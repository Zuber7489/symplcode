<!-- Dynamic Hero Section Two - Supports both Product Metafields and Theme Editor -->
<div
  class="dynamic-hero-section-two {% if section.settings.text_alignment %}hero-v2-align-{{ section.settings.text_alignment }}{% else %}hero-v2-align-center{% endif %}"
  data-auto-slide="{{ section.settings.auto_slide }}"
  {% if section.settings.slide_interval != blank %}data-slide-interval="{{ section.settings.slide_interval | times: 1000 }}"{% endif %}
  data-template="{{ template.name }}"
  data-product-id="{{ product.id }}"
>
  <div class="dynamic-hero-slider-v2">
    {% comment %} PRODUCT PAGE: Use metafields for dynamic content {% endcomment %}
    {% if template.name == 'product' and product.metafields.custom.hero_content_two %}
      {% assign hero_content = product.metafields.custom.hero_content_two.value %}
      {% if hero_content %}
        <!-- Debug: Hero content found -->
        <!-- {{ hero_content | json }} -->
        {% for item in hero_content %}
          <div class="dynamic-hero-slide-v2" data-slide-index="{{ forloop.index0 }}">
            <div class="hero-v2-media-wrapper {% if section.settings.fix %}hero-v2-media-fixed{% endif %}">
              {% if item.content_type == 'image' %}
                <img 
                  src="{{ item.desktop_image }}" 
                  class="hero-v2-media-content hero-v2-desktop-only" 
                  alt="{% if item.heading %}{{ item.heading }}{% endif %}"
                  loading="eager"
                  decoding="async"
                  onerror="this.style.display='none'; console.log('Image failed to load:', this.src);">
                <img 
                  src="{{ item.mobile_image }}" 
                  class="hero-v2-media-content hero-v2-mobile-only" 
                  alt="{% if item.heading %}{{ item.heading }}{% endif %}"
                  loading="eager"
                  decoding="async"
                  onerror="this.style.display='none'; console.log('Image failed to load:', this.src);">
              {% elsif item.content_type == 'video' %}
                <div class="hero-v2-video-container hero-v2-desktop-only">
                  <video 
                    class="hero-v2-video" 
                    {% if item.autoplay %}autoplay{% endif %} 
                    {% if item.loop %}loop{% endif %} 
                    {% if item.muted %}muted{% endif %} 
                    playsinline 
                    {% if item.controls %}controls{% endif %} 
                    poster="{% if item.video_poster %}{{ item.video_poster | img_url: '1920x' }}{% endif %}"
                    preload="{% if forloop.first %}metadata{% else %}none{% endif %}"
                    loading="{% if forloop.first %}eager{% else %}lazy{% endif %}">
                    {% if item.desktop_video != blank %}
                      <source src="{{ item.desktop_video }}" type="video/mp4">
                    {% endif %}
                  </video>
                </div>
                <div class="hero-v2-video-container hero-v2-mobile-only">
                  <video 
                    class="hero-v2-video" 
                    {% if item.autoplay %}autoplay{% endif %} 
                    {% if item.loop %}loop{% endif %} 
                    {% if item.muted %}muted{% endif %} 
                    playsinline 
                    {% if item.controls %}controls{% endif %} 
                    poster="{% if item.video_poster_mobile %}{{ item.video_poster_mobile | img_url: '768x' }}{% elsif item.video_poster %}{{ item.video_poster | img_url: '768x' }}{% endif %}"
                    preload="{% if forloop.first %}metadata{% else %}none{% endif %}"
                    loading="{% if forloop.first %}eager{% else %}lazy{% endif %}">
                    {% if item.mobile_video != blank %}
                      <source src="{{ item.mobile_video }}" type="video/mp4">
                    {% elsif item.desktop_video != blank %}
                      <source src="{{ item.desktop_video }}" type="video/mp4">
                    {% endif %}
                  </video>
                </div>
              {% endif %}
            </div>

            {% unless section.settings.hide_text_content %}
            <div class="hero-v2-container">
              <div class="hero-v2-content" style="{% if item.mobile_padding_top != blank %}--mobile-padding-top: {{ item.mobile_padding_top }}px;{% endif %}">
                <div class="hero-v2-content-wrapper">
                  <div class="hero-v2-text-content">
                    {% if item.heading %}
                      <h1 class="hero-v2-title" style="font-weight:550 !important">{{ item.heading }}</h1>
                    {% endif %}
                    {% if item.text %}
                      <div class="hero-v2-description">{{ item.text }}</div>
                    {% endif %}

                    {% if item.btn_url and item.btn_text %}
                      <div class="hero-v2-cta-wrapper">
                        <a href="{{ item.btn_url }}" class="hero-v2-cta-button">{{ item.btn_text }}</a>
                      </div>
                    {% endif %}
                  </div>
                </div>
              </div>
            </div>
            {% endunless %}
          </div>
        {% endfor %}
      {% endif %}
    {% endif %}

    {% comment %} STATIC PAGES: Use theme editor blocks {% endcomment %}
    {% if template.name != 'product' or product.metafields.custom.hero_content_two == blank %}
      {% for block in section.blocks %}
        {% if block.type == 'slide' %}
          <div class="dynamic-hero-slide-v2" {{ block.shopify_attributes }} data-slide-index="{{ forloop.index0 }}">
            <div class="hero-v2-media-wrapper {% if section.settings.fix %}hero-v2-media-fixed{% endif %}">
              {% if block.settings.content_type == 'image' %}
                <img 
                  src="{{ block.settings.desktop_image | img_url: '1920x' }}" 
                  srcset="{{ block.settings.desktop_image | img_url: '1200x' }} 1200w, {{ block.settings.desktop_image | img_url: '1920x' }} 1920w"
                  sizes="100vw"
                  class="hero-v2-media-content hero-v2-desktop-only" 
                  alt="{% if block.settings.heading %}{{ block.settings.heading }}{% endif %}"
                  loading="{% if forloop.first %}eager{% else %}lazy{% endif %}"
                  decoding="async">
                <img 
                  src="{{ block.settings.mobile_image | img_url: '768x' }}" 
                  srcset="{{ block.settings.mobile_image | img_url: '480x' }} 480w, {{ block.settings.mobile_image | img_url: '768x' }} 768w"
                  sizes="100vw"
                  class="hero-v2-media-content hero-v2-mobile-only" 
                  alt="{% if block.settings.heading %}{{ block.settings.heading }}{% endif %}"
                  loading="{% if forloop.first %}eager{% else %}lazy{% endif %}"
                  decoding="async">
              {% elsif block.settings.content_type == 'video' %}
                <div class="hero-v2-video-container hero-v2-desktop-only">
                  <video 
                    class="hero-v2-video" 
                    {% if block.settings.autoplay %}autoplay{% endif %} 
                    {% if block.settings.loop %}loop{% endif %} 
                    {% if block.settings.muted %}muted{% endif %} 
                    playsinline 
                    {% if block.settings.controls %}controls{% endif %} 
                    poster="{% if block.settings.video_poster %}{{ block.settings.video_poster | img_url: '1920x' }}{% endif %}"
                    preload="{% if forloop.first %}metadata{% else %}none{% endif %}"
                    loading="{% if forloop.first %}eager{% else %}lazy{% endif %}">
                    {% if block.settings.desktop_video != blank %}
                      <source src="{{ block.settings.desktop_video }}" type="video/mp4">
                    {% endif %}
                  </video>
                </div>
                <div class="hero-v2-video-container hero-v2-mobile-only">
                  <video 
                    class="hero-v2-video" 
                    {% if block.settings.autoplay %}autoplay{% endif %} 
                    {% if block.settings.loop %}loop{% endif %} 
                    {% if block.settings.muted %}muted{% endif %} 
                    playsinline 
                    {% if block.settings.controls %}controls{% endif %} 
                    poster="{% if block.settings.video_poster_mobile %}{{ block.settings.video_poster_mobile | img_url: '768x' }}{% elsif block.settings.video_poster %}{{ block.settings.video_poster | img_url: '768x' }}{% endif %}"
                    preload="{% if forloop.first %}metadata{% else %}none{% endif %}"
                    loading="{% if forloop.first %}eager{% else %}lazy{% endif %}">
                    {% if block.settings.mobile_video != blank %}
                      <source src="{{ block.settings.mobile_video }}" type="video/mp4">
                    {% elsif block.settings.desktop_video != blank %}
                      <source src="{{ block.settings.desktop_video }}" type="video/mp4">
                    {% endif %}
                  </video>
                </div>
              {% endif %}
            </div>

            {% unless section.settings.hide_text_content %}
            <div class="hero-v2-container">
              <div class="hero-v2-content" style="{% if block.settings.mobile_padding_top != blank %}--mobile-padding-top: {{ block.settings.mobile_padding_top }}px;{% endif %}">
                <div class="hero-v2-content-wrapper">
                  <div class="hero-v2-text-content">
                    {% if block.settings.heading %}
                      <h1 class="hero-v2-title">{{ block.settings.heading }}</h1>
                    {% endif %}
                    {% if block.settings.text %}
                      <div class="hero-v2-description">{{ block.settings.text }}</div>
                    {% endif %}

                    {% if block.settings.btn_url and block.settings.btn_text %}
                      <div class="hero-v2-cta-wrapper">
                        <a href="{{ block.settings.btn_url }}" class="hero-v2-cta-button">{{ block.settings.btn_text }}</a>
                      </div>
                    {% endif %}
                  </div>
                </div>
              </div>
            </div>
            {% endunless %}
          </div>
        {% endif %}
      {% endfor %}
    {% endif %}
  </div>
</div>

<!-- Navigation positioned outside hero block (similar to 5-star functions) -->
{% assign slide_count = 0 %}
{% if template.name == 'product' and product.metafields.custom.hero_content_two %}
  {% assign slide_count = product.metafields.custom.hero_content_two.value.size %}
{% else %}
  {% assign slide_count = section.blocks.size %}
{% endif %}

{% if slide_count > 1 %}
  <div class="hero-v2-bottom-nav" style="display: flex; align-items: center; justify-content: flex-start; margin-top: 30px; gap: 20px; padding: 0 20px;">
    <!-- Arrows and Line Navigation -->
    <div class="hero-v2-nav-arrows" style="display: flex; gap: 10px;">
      <button class="hero-v2-slider-prev" aria-label="Previous slide" style="background: transparent; border: none; cursor: pointer; transition: all 0.3s ease; padding: 5px;" disabled>
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M15 18L9 12L15 6" stroke="#000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
      <button class="hero-v2-slider-next" aria-label="Next slide" style="background: transparent; border: none; cursor: pointer; transition: all 0.3s ease; padding: 5px;">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M9 18L15 12L9 6" stroke="#000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
    </div>
    
    <div class="hero-v2-slider-line" style="flex: 1; max-width: 150px; height: 4px; background-color: #e5e5e5; border-radius: 2px; position: relative;">
      <div class="hero-v2-slider-progress" style="height: 100%; background-color: #000; border-radius: 2px; width: 25%; transition: width 0.3s ease;"></div>
    </div>
  </div>
{% endif %}

<style>
  /* Dynamic Hero Section Two Styles */
  .dynamic-hero-section-two {
    position: relative;
    width: 100%;
    overflow: hidden;
    background: #000;
  }

  .dynamic-hero-slider-v2 {
    position: relative;
    width: 100%;
    height: 100vh; /* Full viewport height for maximum tallness */
    min-height: 800px;
  }

  .dynamic-hero-slide-v2 {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 0.5s ease-in-out;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 0;
    background: #000;
  }

  @media (max-width: 768px) {
    .dynamic-hero-slide-v2 {
      aspect-ratio: 3/4; /* 3:4 aspect ratio for mobile */
    }
  }

  .dynamic-hero-slide-v2:first-child {
    opacity: 1;
    z-index: 1;
  }

  .dynamic-hero-slide-v2.active {
    opacity: 1;
    z-index: 2;
  }

  .hero-v2-media-wrapper {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  @media (max-width: 768px) {
    .hero-v2-media-wrapper {
      aspect-ratio: 3/4; /* 3:4 aspect ratio for mobile */
    }
  }

  .hero-v2-media-content {
    width: 100%;
    height: 100%;
    display: block;
    object-fit: cover;
    object-position: center;
  }

  @media (max-width: 768px) {
    .hero-v2-media-content {
      object-fit: cover;
      object-position: center;
      width: 100%;
      height: 100%;
    }
  }

  .hero-v2-video-container {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  @media (max-width: 768px) {
    .hero-v2-video-container {
      aspect-ratio: 3/4; /* 3:4 aspect ratio for mobile */
    }
  }

  .hero-v2-video {
    width: 100%;
    height: 100%;
    display: block;
    object-fit: cover;
    object-position: center;
  }

  @media (max-width: 768px) {
    .hero-v2-video {
      object-fit: cover;
      object-position: center;
      width: 100%;
      height: 100%;
    }
  }

  .hero-v2-container {
    position: relative;
    z-index: 2;
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .hero-v2-content {
    text-align: center;
    color: #fff;
    padding-top: var(--mobile-padding-top, 50px);
  }

  .hero-v2-content-wrapper {
    max-width: 800px;
    margin: 0 auto;
  }

  .hero-v2-text-content {
    padding: 40px;
    border-radius: 8px;
  }

  .hero-v2-title {
    margin-bottom: 15px;
    color: #ffffff;
    font-weight: 550; /* Updated font weight */
    font-size: 48px;
    line-height: 1.2;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  }

  .hero-v2-description {
    margin-bottom: 20px;
    color: #ffffff;
    font-size: 22px; /* Updated font size */
    line-height: 1.5;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
    letter-spacing: 0.5px; /* Added letter spacing */
  }

  .hero-v2-cta-wrapper {
    margin-top: 30px;
  }

  .hero-v2-cta-button {
    border-radius: 50px;
    padding: 12px 32px;
    border: 0.8px solid #ffffff;
    transition: none;
    display: inline-block;
    text-decoration: none;
    font-weight: 500; /* Updated font weight */
    letter-spacing: 0.5px;
    cursor: pointer;
    background-color: transparent;
    color: #ffffff;
    font-size: 16px;
    text-transform: none;
    min-width: 160px;
    text-align: center;
    position: relative;
    overflow: hidden;
    z-index: 1;
  }

  .hero-v2-cta-button:hover {
    border: 0.8px solid #ffffff;
    background-color: transparent;
    color: #ffffff;
    text-decoration: none;
    transform: none;
    box-shadow: none;
  }

  .hero-v2-cta-button:active {
    transform: none;
  }

  .hero-v2-cta-button:focus {
    outline: none;
    box-shadow: none;
  }

  /* Hero Bottom Navigation - Positioned outside hero block */
  .hero-v2-bottom-nav {
    justify-content: flex-start !important;
    padding: 20px !important;
    margin-top: 0 !important;
    margin-left: 0 !important;
    background-color: #f8f8f8; /* Light gray background to match reviews section */
    border-top: 1px solid #e5e5e5; /* Subtle border separator */
    width: 100%;
  }

  .hero-v2-nav-arrows button {
    padding: 6px !important;
    
    transition: all 0.3s ease;
  }

  .hero-v2-nav-arrows button:disabled {
    opacity: 0.3 !important;
    cursor: not-allowed !important;
    pointer-events: none;
  }

  .hero-v2-nav-arrows button:not(:disabled):hover {
    opacity: 0.7;
  }

  .hero-v2-nav-arrows svg {
    width: 24px !important;
    height: 24px !important;
  }

  .hero-v2-slider-line {
    max-width: 120px !important;
    height: 2px ;
  }

  /* Text Alignment Variants */
  .hero-v2-align-left .hero-v2-content {
    text-align: left;
  }

  .hero-v2-align-center .hero-v2-content {
    text-align: center;
  }

  /* Video slide specific styling for center alignment */
  .hero-v2-align-center .dynamic-hero-slide-v2:has(.hero-v2-video-container) .hero-v2-content {
    margin-bottom: 15%;
  }

  .hero-v2-align-justify .hero-v2-content {
    text-align: justify;
  }

  /* Mobile Styles */
  @media (max-width: 768px) {
    .dynamic-hero-slider-v2 {
      height: auto;
      min-height: 300px;
      aspect-ratio: 3/4; /* 3:4 aspect ratio for mobile */
    }

    .hero-v2-title {
      font-size: 24px !important; /* Updated mobile font size */
      font-weight: 550 !important; /* Updated mobile font weight */
      margin-bottom: 10px;
    }

    .hero-v2-description {
      font-size: 16px !important; /* Updated mobile font size to 16px */
      letter-spacing: 0.5px;
    }

    .hero-v2-cta-button {
      padding: 10px 24px;
      font-size: 16px; /* Updated mobile font size to 16px */
      font-weight: 500; /* Updated mobile font weight */
      min-width: 140px;
    }

    .hero-v2-text-content {
      padding: 20px;
      margin: 0 10px;
    }

      /* Mobile navigation adjustments */
  .hero-v2-bottom-nav {
    justify-content: flex-start !important;
    margin-left: 0 !important;
    padding: 15px 20px !important; /* Slightly reduced padding for mobile */
  }

    /* Hide arrows on mobile */
    .hero-v2-nav-arrows {
      display: none !important;
    }

    /* Left align progress line on mobile */
    .hero-v2-slider-line {
      max-width: 100px !important;
      margin-left: 0 !important;
      height: 2px !important;
    }

    .hero-v2-nav-arrows button:disabled {
      opacity: 0.3 !important;
    }
  }

  /* Hide mobile/desktop specific content */
  .hero-v2-mobile-only {
    display: none;
  }

  .hero-v2-desktop-only {
    display: block;
  }

  @media (min-width: 768px) {
    .hero-v2-title {
      font-size: 56px;
    }

    .hero-v2-description {
      font-size: 22px; /* Keep updated font size */
    }
  }

  @media (max-width: 768px) {
    .hero-v2-mobile-only {
      display: block;
    }

    .hero-v2-desktop-only {
      display: none;
    }
  }

  /* Extra small screens */
  @media (max-width: 480px) {
    .hero-v2-title {
      font-size: 24px !important;
      line-height: 1.3;
      font-weight: 550 !important;
    }

    .hero-v2-description {
      font-size: 16px !important; /* Updated to 16px for consistency */
      letter-spacing: 0.5px;
    }

    .hero-v2-cta-button {
      padding: 8px 20px;
      font-size: 16px; /* Updated to 16px for consistency */
      font-weight: 500;
      min-width: 120px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const heroSection = document.querySelector('.dynamic-hero-section-two');
    if (!heroSection) return;

    const slider = heroSection.querySelector('.dynamic-hero-slider-v2');
    const slides = heroSection.querySelectorAll('.dynamic-hero-slide-v2');
    const prevBtn = document.querySelector('.hero-v2-slider-prev');
    const nextBtn = document.querySelector('.hero-v2-slider-next');
    const progressBar = document.querySelector('.hero-v2-slider-progress');
    
    let currentSlide = 0;
    let autoSlideInterval;
    const autoSlide = heroSection.dataset.autoSlide === 'true';
    const slideInterval = parseInt(heroSection.dataset.slideInterval) || 5000;

    // Touch/swipe variables
    let touchStartX = 0;
    let touchEndX = 0;
    let touchStartY = 0;
    let touchEndY = 0;
    let isSwiping = false;
    const minSwipeDistance = 50; // Minimum distance for a swipe to be registered
    
    // Auto-slide pause variables
    let userInteractionTimeout;
    const userInteractionDelay = 3000; // 3 seconds delay after user interaction

    // Initialize slider immediately
    function initSlider() {
      // Show first slide immediately
      if (slides.length > 0) {
        slides[0].classList.add('active');
        slides[0].style.zIndex = '2';
        currentSlide = 0;
      }
      
      // Update progress bar
      updateProgressBar();
      
      // Update navigation state
      updateNavigationState();
      
      // Start auto-slide if enabled and multiple slides
      if (autoSlide && slides.length > 1) {
        startAutoSlide();
      }
    }

    // Show slide
    function showSlide(index) {
      // Remove active class from all slides
      slides.forEach(slide => {
        slide.classList.remove('active');
        slide.style.zIndex = '0';
      });
      
      // Add active class to current slide
      if (slides[index]) {
        slides[index].classList.add('active');
        slides[index].style.zIndex = '2';
      }
      
      currentSlide = index;
      updateProgressBar();
      updateNavigationState();
    }

    // Update progress bar
    function updateProgressBar() {
      if (progressBar && slides.length > 1) {
        const progress = ((currentSlide + 1) / slides.length) * 100;
        progressBar.style.width = progress + '%';
      }
    }

    // Update navigation arrows state (enable/disable)
    function updateNavigationState() {
      if (prevBtn && nextBtn) {
        // Disable previous button on first slide
        if (currentSlide === 0) {
          prevBtn.disabled = true;
          prevBtn.style.opacity = '0.3';
          prevBtn.style.cursor = 'not-allowed';
        } else {
          prevBtn.disabled = false;
          prevBtn.style.opacity = '1';
          prevBtn.style.cursor = 'pointer';
        }
        
        // Disable next button on last slide
        if (currentSlide === slides.length - 1) {
          nextBtn.disabled = true;
          nextBtn.style.opacity = '0.3';
          nextBtn.style.cursor = 'not-allowed';
        } else {
          nextBtn.disabled = false;
          nextBtn.style.opacity = '1';
          nextBtn.style.cursor = 'pointer';
        }
      }
    }

    // Next slide
    function nextSlide() {
      const next = (currentSlide + 1) % slides.length;
      showSlide(next);
    }

    // Previous slide
    function prevSlide() {
      const prev = (currentSlide - 1 + slides.length) % slides.length;
      showSlide(prev);
    }

    // Start auto-slide
    function startAutoSlide() {
      // Clear any existing timeout
      if (userInteractionTimeout) {
        clearTimeout(userInteractionTimeout);
        userInteractionTimeout = null;
      }
      
      autoSlideInterval = setInterval(nextSlide, slideInterval);
    }

    // Stop auto-slide
    function stopAutoSlide() {
      if (autoSlideInterval) {
        clearInterval(autoSlideInterval);
      }
    }

    // Pause auto-slide temporarily after user interaction
    function pauseAutoSlideTemporarily() {
      stopAutoSlide();
      
      // Clear any existing timeout
      if (userInteractionTimeout) {
        clearTimeout(userInteractionTimeout);
      }
      
      // Resume auto-slide after delay
      userInteractionTimeout = setTimeout(() => {
        if (autoSlide && slides.length > 1) {
          startAutoSlide();
        }
      }, userInteractionDelay);
    }

    // Handle swipe detection
    function handleSwipe() {
      const swipeDistance = touchEndX - touchStartX;
      const verticalDistance = Math.abs(touchEndY - touchStartY);
      const horizontalDistance = Math.abs(swipeDistance);

      // Only register horizontal swipes if they're more horizontal than vertical
      // and meet the minimum distance threshold
      if (horizontalDistance > verticalDistance && horizontalDistance > minSwipeDistance) {
        if (swipeDistance > 0) {
          // Swipe right - go to previous slide
          prevSlide();
        } else {
          // Swipe left - go to next slide
          nextSlide();
        }
        
        // Pause auto-slide temporarily after user interaction
        if (autoSlide) {
          pauseAutoSlideTemporarily();
        }
      }
    }

    // Touch event handlers
    function handleTouchStart(e) {
      touchStartX = e.touches[0].clientX;
      touchStartY = e.touches[0].clientY;
      isSwiping = false;
      
      // Stop auto-slide during touch
      if (autoSlide) {
        stopAutoSlide();
      }
    }

    function handleTouchMove(e) {
      if (!isSwiping) {
        isSwiping = true;
      }
    }

    function handleTouchEnd(e) {
      touchEndX = e.changedTouches[0].clientX;
      touchEndY = e.changedTouches[0].clientY;
      
      if (isSwiping) {
        handleSwipe();
      } else {
        // If no swipe was detected, resume auto-slide after delay
        if (autoSlide) {
          pauseAutoSlideTemporarily();
        }
      }
    }

    // Add touch event listeners to slider
    if (slider) {
      slider.addEventListener('touchstart', handleTouchStart, { passive: true });
      slider.addEventListener('touchmove', handleTouchMove, { passive: true });
      slider.addEventListener('touchend', handleTouchEnd, { passive: true });
    }

    // Event listeners
    if (prevBtn) {
      prevBtn.addEventListener('click', () => {
        prevSlide();
        if (autoSlide) {
          pauseAutoSlideTemporarily();
        }
      });
    }

    if (nextBtn) {
      nextBtn.addEventListener('click', () => {
        nextSlide();
        if (autoSlide) {
          pauseAutoSlideTemporarily();
        }
      });
    }

    // Pause auto-slide on hover
    slider.addEventListener('mouseenter', stopAutoSlide);
    slider.addEventListener('mouseleave', () => {
      if (autoSlide) startAutoSlide();
    });

    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowLeft') {
        prevSlide();
        if (autoSlide) {
          pauseAutoSlideTemporarily();
        }
      } else if (e.key === 'ArrowRight') {
        nextSlide();
        if (autoSlide) {
          pauseAutoSlideTemporarily();
        }
      }
    });

    // Initialize immediately for faster loading
    initSlider();
  });

  // Function to maintain aspect ratio for hero media and adjust container height
  function maintainHeroAspectRatioTwo() {
    document.querySelectorAll('.dynamic-hero-slide-v2').forEach(slide => {
      const mediaWrapper = slide.querySelector('.hero-v2-media-wrapper');
      const media = slide.querySelector('.hero-v2-media-content, .hero-v2-video');
      const heroSection = slide.closest('.dynamic-hero-section-two');
      
      if (!media) return;
      
      // Check if we're on mobile (768px or below)
      const isMobile = window.innerWidth <= 768;
      
      if (isMobile) {
        // On mobile, use 3:4 aspect ratio
        const containerWidth = mediaWrapper.offsetWidth;
        const calculatedHeight = containerWidth / (3/4); // 3:4 aspect ratio
        
        // Set the height on both the media wrapper and the slide
        mediaWrapper.style.height = calculatedHeight + 'px';
        slide.style.height = calculatedHeight + 'px';
        
        // Also update the hero section height if it exists
        if (heroSection) {
          heroSection.style.height = calculatedHeight + 'px';
        }
      } else {
        // On desktop, use natural aspect ratio
        const isVideo = media.tagName.toLowerCase() === 'video';
        let naturalWidth = isVideo ? media.videoWidth : media.naturalWidth;
        let naturalHeight = isVideo ? media.videoHeight : media.naturalHeight;
        
        // If natural dimensions aren't available yet, use the current image dimensions
        if ((!naturalWidth || !naturalHeight) && media.offsetWidth && media.offsetHeight) {
          naturalWidth = media.offsetWidth;
          naturalHeight = media.offsetHeight;
        }
        
        if (naturalWidth && naturalHeight) {
          const aspectRatio = naturalWidth / naturalHeight;
          const containerWidth = mediaWrapper.offsetWidth;
          const calculatedHeight = containerWidth / aspectRatio;
          
          // Set the height on both the media wrapper and the slide
          mediaWrapper.style.height = calculatedHeight + 'px';
          slide.style.height = calculatedHeight + 'px';
          
          // Also update the hero section height if it exists
          if (heroSection) {
            heroSection.style.height = calculatedHeight + 'px';
          }
        }
      }
    });
  }

  // Run on load and window resize
  window.addEventListener('load', maintainHeroAspectRatioTwo);
  window.addEventListener('resize', maintainHeroAspectRatioTwo);
  
  // Also run when images/videos are loaded to ensure proper sizing
  document.querySelectorAll('.dynamic-hero-section-two .hero-v2-media-content, .dynamic-hero-section-two .hero-v2-video').forEach(media => {
    media.addEventListener('load', maintainHeroAspectRatioTwo);
    if (media.tagName.toLowerCase() === 'video') {
      media.addEventListener('loadedmetadata', maintainHeroAspectRatioTwo);
    }
  });
</script>

{% schema %}
{
  "name": "Dynamic Hero Section Two",
  "tag": "section",
  "class": "dynamic-hero-section-two-wrapper",
  "settings": [
    {
      "type": "header",
      "content": "Product Page Integration"
    },
    {
      "type": "paragraph",
      "content": "On product pages, this section will automatically use product metafields for dynamic content. Set up metafields with namespace 'custom' and key 'hero_content_two' as a JSON list."
    },
    {
      "type": "header",
      "content": "Content Display"
    },
    {
      "type": "checkbox",
      "id": "hide_text_content",
      "label": "Hide Text Content",
      "default": false,
      "info": "When enabled, only images/videos will display without heading, text, or button"
    },
    {
      "type": "header",
      "content": "Static Page Settings"
    },
    {
      "type": "checkbox",
      "id": "fix",
      "label": "Fix Scaling Issue",
      "default": false
    },
    {
      "type": "select",
      "id": "text_alignment",
      "label": "Text Alignment",
      "options": [
        {
          "value": "left",
          "label": "Left Aligned"
        },
        {
          "value": "center",
          "label": "Center Aligned"
        },
        {
          "value": "justify",
          "label": "Justified"
        }
      ],
      "default": "center",
      "info": "Controls how text is aligned within the content area"
    },
    {
      "type": "header",
      "content": "Slider Settings"
    },
    {
      "type": "checkbox",
      "id": "auto_slide",
      "label": "Enable Auto-Slide",
      "default": true,
      "info": "Automatically rotate through slides. When disabled, users must click arrows to navigate."
    },
    {
      "type": "range",
      "id": "slide_interval",
      "min": 3,
      "max": 10,
      "step": 1,
      "unit": "s",
      "label": "Auto-Slide Interval",
      "default": 5,
      "info": "Time between slide transitions (in seconds). Only applies when auto-slide is enabled."
    }
  ],
  "blocks": [
    {
      "type": "slide",
      "name": "Slide",
      "settings": [
        {
          "type": "select",
          "id": "content_type",
          "label": "Content Type",
          "options": [
            {
              "value": "image",
              "label": "Image"
            },
            {
              "value": "video",
              "label": "Video"
            }
          ],
          "default": "image"
        },
        {
          "type": "header",
          "content": "Image Settings"
        },
        {
          "type": "image_picker",
          "id": "desktop_image",
          "label": "Desktop Image",
          "info": "Recommended size: 1920 x 1080 pixels"
        },
        {
          "type": "image_picker",
          "id": "mobile_image",
          "label": "Mobile Image",
          "info": "Recommended size: 768 x 1024 pixels"
        },
        {
          "type": "header",
          "content": "Video Settings"
        },
        {
          "type": "text",
          "id": "desktop_video",
          "label": "Desktop Video URL",
          "info": "First upload your video in Settings > Files, then copy the URL here. MP4 format recommended."
        },
        {
          "type": "text",
          "id": "mobile_video",
          "label": "Mobile Video URL (optional)",
          "info": "If not provided, desktop video will be used. Upload in Settings > Files."
        },
        {
          "type": "image_picker",
          "id": "video_poster",
          "label": "Video Poster Image (Desktop)",
          "info": "Shown before video plays"
        },
        {
          "type": "image_picker",
          "id": "video_poster_mobile",
          "label": "Video Poster Image (Mobile)",
          "info": "If not provided, desktop poster will be used"
        },
        {
          "type": "checkbox",
          "id": "autoplay",
          "label": "Autoplay video",
          "default": true,
          "info": "Autoplays on supported browsers"
        },
        {
          "type": "checkbox",
          "id": "loop",
          "label": "Loop video",
          "default": true
        },
        {
          "type": "checkbox",
          "id": "muted",
          "label": "Mute video",
          "default": true,
          "info": "Video must be muted for autoplay to work"
        },
        {
          "type": "checkbox",
          "id": "controls",
          "label": "Show video controls",
          "default": false
        },
        {
          "type": "header",
          "content": "Content Settings"
        },
        {
          "type": "textarea",
          "id": "heading",
          "label": "Heading"
        },
        {
          "type": "richtext",
          "id": "text",
          "label": "Text"
        },
        {
          "type": "text",
          "id": "btn_text",
          "label": "Button Text"
        },
        {
          "type": "url",
          "id": "btn_url",
          "label": "Button Link"
        },
        {
          "type": "header",
          "content": "Mobile Settings"
        },
        {
          "type": "number",
          "id": "mobile_padding_top",
          "label": "Mobile - Padding from top (%)",
          "info": "Adjust text position from top on mobile",
          "default": 50
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Dynamic Hero Section Two",
      "blocks": [
        {
          "type": "slide"
        }
      ]
    }
  ]
}
{% endschema %} 