<!-- Dynamic Hero Section Two - Supports Variant-Specific, Product Metafields and Theme Editor -->
<div
  class="dynamic-hero-section-two {% if section.settings.text_alignment %}hero-v2-align-{{ section.settings.text_alignment }}{% else %}hero-v2-align-center{% endif %}"
  data-template="{{ template.name }}"
  data-product-id="{{ product.id }}"
  id="dynamic-hero-section-two"
>
  <div class="dynamic-hero-slider-v2">
    {% comment %} PRODUCT PAGE: Use variant-specific metafields first, then product-level {% endcomment %}
    {% if template.name == 'product' %}
      {% assign current_variant = product.selected_or_first_available_variant %}
      {% assign hero_content = current_variant.metafields.custom.hero_content_two.value | default: product.metafields.custom.hero_content_two.value %}
      
      {% if hero_content %}
        <!-- Debug: Hero content found -->
        <!-- {{ hero_content | json }} -->
        {% for item in hero_content %}
          <div class="dynamic-hero-slide-v2" 
               data-slide-index="{{ forloop.index0 }}"
               data-autoplay="{% if item.autoplay != blank %}{{ item.autoplay }}{% endif %}"
               data-autoplay-duration="{% if item.autoplay_duration != blank %}{{ item.autoplay_duration | times: 1000 }}{% endif %}">
            <div class="hero-v2-media-wrapper {% if section.settings.fix %}hero-v2-media-fixed{% endif %}">
              {% if item.content_type == 'image' %}
                <img 
                  src="{{ item.desktop_image }}" 
                  class="hero-v2-media-content hero-v2-desktop-only" 
                  alt="{% if item.heading %}{{ item.heading }}{% endif %}"
                  loading="eager"
                  decoding="async"
                  onerror="this.style.display='none'; ">
                <img 
                  src="{{ item.mobile_image }}" 
                  class="hero-v2-media-content hero-v2-mobile-only" 
                  alt="{% if item.heading %}{{ item.heading }}{% endif %}"
                  loading="eager"
                  decoding="async"
                  onerror="this.style.display='none'; ">
              {% elsif item.content_type == 'video' %}
                <div class="hero-v2-video-container hero-v2-desktop-only">
                  <video 
                    class="hero-v2-video" 
                    {% if item.autoplay %}autoplay{% endif %} 
                    {% if item.loop %}loop{% endif %} 
                    {% if item.muted %}muted{% endif %} 
                    playsinline 
                    {% if item.controls %}controls{% endif %} 
                    poster="{% if item.video_poster %}{{ item.video_poster | img_url: '1920x' }}{% endif %}"
                    preload="{% if forloop.first %}metadata{% else %}none{% endif %}"
                    loading="{% if forloop.first %}eager{% else %}lazy{% endif %}">
                    {% if item.desktop_video != blank %}
                      <source src="{{ item.desktop_video }}" type="video/mp4">
                    {% endif %}
                  </video>
                </div>
                <div class="hero-v2-video-container hero-v2-mobile-only">
                  <video 
                    class="hero-v2-video" 
                    {% if item.autoplay %}autoplay{% endif %} 
                    {% if item.loop %}loop{% endif %} 
                    {% if item.muted %}muted{% endif %} 
                    playsinline 
                    {% if item.controls %}controls{% endif %} 
                    poster="{% if item.video_poster_mobile %}{{ item.video_poster_mobile | img_url: '768x' }}{% elsif item.video_poster %}{{ item.video_poster | img_url: '768x' }}{% endif %}"
                    preload="{% if forloop.first %}metadata{% else %}none{% endif %}"
                    loading="{% if forloop.first %}eager{% else %}lazy{% endif %}">
                    {% if item.mobile_video != blank %}
                      <source src="{{ item.mobile_video }}" type="video/mp4">
                    {% elsif item.desktop_video != blank %}
                      <source src="{{ item.desktop_video }}" type="video/mp4">
                    {% endif %}
                  </video>
                </div>
              {% endif %}
            </div>

            {% unless section.settings.hide_text_content %}
            <div class="hero-v2-container">
              <div class="hero-v2-content" style="{% if item.mobile_padding_top != blank %}--mobile-padding-top: {{ item.mobile_padding_top }}px;{% endif %}">
                <div class="hero-v2-content-wrapper">
                  <div class="hero-v2-text-content">
                    {% if item.heading %}
                      <h1 class="hero-v2-title" style="font-weight:550 !important">{{ item.heading }}</h1>
                    {% endif %}
                    {% if item.text %}
                      <div class="hero-v2-description">{{ item.text }}</div>
                    {% endif %}

                    {% if item.btn_text != blank %}
                      <div class="hero-v2-cta-wrapper">
                        <a href="{% if item.btn_url != blank %}{{ item.btn_url }}{% else %}#{% endif %}" class="hero-v2-cta-button">{{ item.btn_text }}</a>
                      </div>
                    {% endif %}
                  </div>
                </div>
              </div>
            </div>
            {% endunless %}
          </div>
        {% endfor %}
      {% endif %}
    
    {% comment %} STATIC PAGES OR FALLBACK: Use theme editor blocks {% endcomment %}
    {% else %}
      {% for block in section.blocks %}
        {% if block.type == 'slide' %}
          <div class="dynamic-hero-slide-v2" {{ block.shopify_attributes }} data-slide-index="{{ forloop.index0 }}">
            <div class="hero-v2-media-wrapper {% if section.settings.fix %}hero-v2-media-fixed{% endif %}">
              {% if block.settings.content_type == 'image' %}
                <img 
                  src="{{ block.settings.desktop_image | img_url: '1920x' }}" 
                  srcset="{{ block.settings.desktop_image | img_url: '1200x' }} 1200w, {{ block.settings.desktop_image | img_url: '1920x' }} 1920w"
                  sizes="100vw"
                  class="hero-v2-media-content hero-v2-desktop-only" 
                  alt="{% if block.settings.heading %}{{ block.settings.heading }}{% endif %}"
                  loading="{% if forloop.first %}eager{% else %}lazy{% endif %}"
                  decoding="async">
                <img 
                  src="{{ block.settings.mobile_image | img_url: '768x' }}" 
                  srcset="{{ block.settings.mobile_image | img_url: '480x' }} 480w, {{ block.settings.mobile_image | img_url: '768x' }} 768w"
                  sizes="100vw"
                  class="hero-v2-media-content hero-v2-mobile-only" 
                  alt="{% if block.settings.heading %}{{ block.settings.heading }}{% endif %}"
                  loading="{% if forloop.first %}eager{% else %}lazy{% endif %}"
                  decoding="async">
              {% elsif block.settings.content_type == 'video' %}
                <div class="hero-v2-video-container hero-v2-desktop-only">
                  <video 
                    class="hero-v2-video" 
                    {% if block.settings.autoplay %}autoplay{% endif %} 
                    {% if block.settings.loop %}loop{% endif %} 
                    {% if block.settings.muted %}muted{% endif %} 
                    playsinline 
                    {% if block.settings.controls %}controls{% endif %} 
                    poster="{% if block.settings.video_poster %}{{ block.settings.video_poster | img_url: '1920x' }}{% endif %}"
                    preload="{% if forloop.first %}metadata{% else %}none{% endif %}"
                    loading="{% if forloop.first %}eager{% else %}lazy{% endif %}">
                    {% if block.settings.desktop_video != blank %}
                      <source src="{{ block.settings.desktop_video }}" type="video/mp4">
                    {% endif %}
                  </video>
                </div>
                <div class="hero-v2-video-container hero-v2-mobile-only">
                  <video 
                    class="hero-v2-video" 
                    {% if block.settings.autoplay %}autoplay{% endif %} 
                    {% if block.settings.loop %}loop{% endif %} 
                    {% if block.settings.muted %}muted{% endif %} 
                    playsinline 
                    {% if block.settings.controls %}controls{% endif %} 
                    poster="{% if block.settings.video_poster_mobile %}{{ block.settings.video_poster_mobile | img_url: '768x' }}{% elsif block.settings.video_poster %}{{ block.settings.video_poster | img_url: '768x' }}{% endif %}"
                    preload="{% if forloop.first %}metadata{% else %}none{% endif %}"
                    loading="{% if forloop.first %}eager{% else %}lazy{% endif %}">
                    {% if block.settings.mobile_video != blank %}
                      <source src="{{ block.settings.mobile_video }}" type="video/mp4">
                    {% elsif block.settings.desktop_video != blank %}
                      <source src="{{ block.settings.desktop_video }}" type="video/mp4">
                    {% endif %}
                  </video>
                </div>
              {% endif %}
            </div>

            {% unless section.settings.hide_text_content %}
            <div class="hero-v2-container">
              <div class="hero-v2-content" style="{% if block.settings.mobile_padding_top != blank %}--mobile-padding-top: {{ block.settings.mobile_padding_top }}px;{% endif %}">
                <div class="hero-v2-content-wrapper">
                  <div class="hero-v2-text-content">
                    {% if block.settings.heading %}
                      <h1 class="hero-v2-title">{{ block.settings.heading }}</h1>
                    {% endif %}
                    {% if block.settings.text %}
                      <div class="hero-v2-description">{{ block.settings.text }}</div>
                    {% endif %}

                    {% if block.settings.btn_text != blank %}
                      <div class="hero-v2-cta-wrapper">
                        <a href="{% if block.settings.btn_url != blank %}{{ block.settings.btn_url }}{% else %}#{% endif %}" class="hero-v2-cta-button">{{ block.settings.btn_text }}</a>
                      </div>
                    {% endif %}
                  </div>
                </div>
              </div>
            </div>
            {% endunless %}
          </div>
        {% endif %}
      {% endfor %}
    {% endif %}  {% comment %} End of template.name == 'product' check {% endcomment %}
  </div>
</div>

<!-- Navigation positioned outside hero block (similar to 5-star functions) -->
{% assign slide_count = 0 %}
{% if template.name == 'product' %}
  {% assign current_variant = product.selected_or_first_available_variant %}
  {% assign hero_content = current_variant.metafields.custom.hero_content_two.value | default: product.metafields.custom.hero_content_two.value %}
  {% if hero_content %}
    {% assign slide_count = hero_content.size %}
  {% else %}
    {% assign slide_count = section.blocks.size %}
  {% endif %}
{% else %}
  {% assign slide_count = section.blocks.size %}
{% endif %}

{% if slide_count > 1 %}
  <div class="hero-v2-bottom-nav" style="display: flex; align-items: center; justify-content: flex-start; margin-top: 30px; gap: 20px; padding: 0 20px;">
    <!-- Arrows and Line Navigation -->
    <div class="hero-v2-nav-arrows" style="display: flex; gap: 10px;">
      <button class="hero-v2-slider-prev" aria-label="Previous slide" style="background: transparent; border: none; cursor: pointer; transition: all 0.3s ease; padding: 5px;" disabled>
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M15 18L9 12L15 6" stroke="#000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
      <button class="hero-v2-slider-next" aria-label="Next slide" style="background: transparent; border: none; cursor: pointer; transition: all 0.3s ease; padding: 5px;">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M9 18L15 12L9 6" stroke="#000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
    </div>
    
    <div class="hero-v2-slider-line" style="flex: 1; max-width: 150px; height: 4px; background-color: #e5e5e5; border-radius: 2px; position: relative;">
      <div class="hero-v2-slider-progress" style="height: 100%; background-color: #000; border-radius: 2px; width: 25%; transition: width 0.3s ease;"></div>
    </div>
  </div>
{% endif %}

<style>
  /* Dynamic Hero Section Two Styles */
  .dynamic-hero-section-two {
    position: relative;
    width: 100%;
    overflow: hidden;
    background: #000;
  }

  .dynamic-hero-slider-v2 {
    position: relative;
    width: 100%;
    height: 80vh; /* Reduced to 80% of viewport height */
    min-height: 480px; /* 80% of 600px minimum height */
    max-height: 80vh; /* Prevent overflow */
  }

  .dynamic-hero-slide-v2 {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 0.5s ease-in-out;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 0;
    background: transparent; /* Remove black background to prevent gaps */
  }

  @media (max-width: 768px) {
    .dynamic-hero-slide-v2 {
      aspect-ratio: 4/5; /* 4:5 aspect ratio for mobile */
    }
  }

  .dynamic-hero-slide-v2:first-child {
    opacity: 1;
    z-index: 1;
  }

  .dynamic-hero-slide-v2.active {
    opacity: 1;
    z-index: 2;
  }

  .hero-v2-media-wrapper {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
    background: #000; /* Move background to media wrapper to prevent gaps */
  }

  @media (max-width: 768px) {
    .hero-v2-media-wrapper {
      aspect-ratio: 4/5; /* 4:5 aspect ratio for mobile */
    }
  }

  .hero-v2-media-content {
    width: 100%;
    height: 100%;
    display: block;
    object-fit: cover;
    object-position: center;
    /* Prevent any gaps or spacing issues */
    margin: 0;
    padding: 0;
    border: none;
  }

  @media (max-width: 768px) {
    .hero-v2-media-content {
      object-fit: cover;
      object-position: center;
      width: 100%;
      height: 100%;
    }
  }

  .hero-v2-video-container {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  @media (max-width: 768px) {
    .hero-v2-video-container {
      aspect-ratio: 4/5; /* 4:5 aspect ratio for mobile */
    }
  }

  .hero-v2-video {
    width: 100%;
    height: 100%;
    display: block;
    object-fit: cover;
    object-position: center;
  }

  @media (max-width: 768px) {
    .hero-v2-video {
      object-fit: cover;
      object-position: center;
      width: 100%;
      height: 100%;
    }
  }

  .hero-v2-container {
    position: relative;
    z-index: 2;
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100%;
  }

  .hero-v2-content {
    text-align: center;
    color: #fff;
    
  }

  .hero-v2-content-wrapper {
    max-width: 800px;
    margin: 0 auto;
    width: 100%;
  }

  .hero-v2-text-content {
    padding: 40px;
    border-radius: 8px;
  }

  .hero-v2-title {
    margin-bottom: 15px;
    color: #ffffff;
    font-weight: 550; /* Updated font weight */
    font-size: 48px;
    line-height: 1.2;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  }

  .hero-v2-description {
    margin-bottom: 20px;
    color: #ffffff;
    font-size: 22px; /* Updated font size */
    line-height: 1.5;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
    letter-spacing: 0.5px; /* Added letter spacing */
  }

  .hero-v2-cta-wrapper {
    margin-top: 30px;
  }

  .hero-v2-cta-button {
    border-radius: 50px;
    padding: 12px 32px;
    border: 0.8px solid #ffffff;
    transition: none;
    display: inline-block;
    text-decoration: none;
    font-weight: 500; /* Updated font weight */
    letter-spacing: 0.5px;
    cursor: pointer;
    background-color: transparent;
    color: #ffffff;
    font-size: 16px;
    text-transform: none;
    min-width: 160px;
    text-align: center;
    position: relative;
    overflow: hidden;
    z-index: 1;
  }

  .hero-v2-cta-button:hover {
    border: 0.8px solid #ffffff;
    background-color: transparent;
    color: #ffffff;
    text-decoration: none;
    transform: none;
    box-shadow: none;
  }

  .hero-v2-cta-button:active {
    transform: none;
  }

  .hero-v2-cta-button:focus {
    outline: none;
    box-shadow: none;
  }

  /* Hero Bottom Navigation - Positioned outside hero block */
  .hero-v2-bottom-nav {
    justify-content: flex-start !important;
    padding: 20px !important;
    margin-top: 0 !important;
    margin-left: 0 !important;
    background-color: #f8f8f8; /* Light gray background to match reviews section */
    border-top: 1px solid #e5e5e5; /* Subtle border separator */
    width: 100%;
  }

  .hero-v2-nav-arrows button {
    padding: 6px !important;
    
    transition: all 0.3s ease;
  }

  .hero-v2-nav-arrows button:disabled {
    opacity: 0.3 !important;
    cursor: not-allowed !important;
    pointer-events: none;
  }

  .hero-v2-nav-arrows button:not(:disabled):hover {
    opacity: 0.7;
  }

  .hero-v2-nav-arrows svg {
    width: 24px !important;
    height: 24px !important;
  }

  .hero-v2-slider-line {
    max-width: 120px !important;
    height: 2px ;
  }

  /* Text Alignment Variants */
  .hero-v2-align-left .hero-v2-content {
    text-align: left;
  }

  .hero-v2-align-center .hero-v2-content {
    text-align: center;
  }

  /* Video slide specific styling for center alignment */
 

  .hero-v2-align-justify .hero-v2-content {
    text-align: justify;
  }

  /* Mobile Styles */
  @media (max-width: 768px) {
    .dynamic-hero-slider-v2 {
      height: auto;
      min-height: 300px; /* Original mobile minimum height */
      aspect-ratio: 4/5; /* 4:5 aspect ratio for mobile */
      max-height: none; /* Allow mobile to use aspect ratio */
    }

    .hero-v2-title {
      font-size: 24px !important; /* Updated mobile font size */
      font-weight: 550 !important; /* Updated mobile font weight */
      margin-bottom: 10px;
    }

    .hero-v2-description {
      font-size: 16px !important; /* Updated mobile font size to 16px */
      letter-spacing: 0.5px;
    }

    .hero-v2-cta-button {
      padding: 10px 24px;
      font-size: 16px; /* Updated mobile font size to 16px */
      font-weight: 500; /* Updated mobile font weight */
      min-width: 140px;
    }

    .hero-v2-text-content {
      padding: 20px;
      margin: 0 10px;
    }

      /* Mobile navigation adjustments */
  .hero-v2-bottom-nav {
    justify-content: flex-start !important;
    margin-left: 0 !important;
    padding: 15px 20px !important; /* Slightly reduced padding for mobile */
  }

    /* Hide arrows on mobile */
    .hero-v2-nav-arrows {
      display: none !important;
    }

    /* Left align progress line on mobile */
    .hero-v2-slider-line {
      max-width: 100px !important;
      margin-left: 0 !important;
      height: 2px !important;
    }

    .hero-v2-nav-arrows button:disabled {
      opacity: 0.3 !important;
    }
  }

  /* Hide mobile/desktop specific content */
  .hero-v2-mobile-only {
    display: none;
  }

  .hero-v2-desktop-only {
    display: block;
  }

  @media (min-width: 768px) {
    .hero-v2-title {
      font-size: 56px;
    }

    .hero-v2-description {
      font-size: 22px; /* Keep updated font size */
    }
  }

  @media (max-width: 768px) {
    .hero-v2-mobile-only {
      display: block;
    }

    .hero-v2-desktop-only {
      display: none;
    }
  }

  /* Extra small screens */
  @media (max-width: 480px) {
    .hero-v2-title {
      font-size: 24px !important;
      line-height: 1.3;
      font-weight: 550 !important;
    }

    .hero-v2-description {
      font-size: 16px !important; /* Updated to 16px for consistency */
      letter-spacing: 0.5px;
    }

    .hero-v2-cta-button {
      padding: 8px 20px;
      font-size: 16px; /* Updated to 16px for consistency */
      font-weight: 500;
      min-width: 120px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const heroSection = document.querySelector('.dynamic-hero-section-two');
    if (!heroSection) return;

    const slider = heroSection.querySelector('.dynamic-hero-slider-v2');
    const slides = heroSection.querySelectorAll('.dynamic-hero-slide-v2');
    const prevBtn = document.querySelector('.hero-v2-slider-prev');
    const nextBtn = document.querySelector('.hero-v2-slider-next');
    const progressBar = document.querySelector('.hero-v2-slider-progress');
    
    let currentSlide = 0;
    let autoSlideInterval;
    
    // Store in global scope for variant updates
    window.heroCurrentSlideV2 = 0;
    window.heroAutoSlideIntervalV2 = null;
    
    // Per-slide autoplay settings for hero section two
    function getSlideAutoplaySettingsV2(slideIndex) {
      const slide = slides[slideIndex];
      if (!slide) return { enabled: false, duration: 0 };
      
      const autoplay = slide.dataset.autoplay === 'true';
      const duration = parseInt(slide.dataset.autoplayDuration) || 0;
      
      
      return { enabled: autoplay, duration: duration };
    }

    // Touch/swipe variables
    let touchStartX = 0;
    let touchEndX = 0;
    let touchStartY = 0;
    let touchEndY = 0;
    let isSwiping = false;
    const minSwipeDistance = 50; // Minimum distance for a swipe to be registered
    
    // Auto-slide pause variables
    let userInteractionTimeout;
    const userInteractionDelay = 3000; // 3 seconds delay after user interaction

    // Initialize slider immediately for hero section two
    function initSliderV2() {
      // Show first slide immediately
      if (slides.length > 0) {
        slides[0].classList.add('active');
        slides[0].style.zIndex = '2';
        currentSlide = 0;
      }
      
      // Update progress bar
      updateProgressBarV2();
      
      // Update navigation state
      updateNavigationStateV2();
      
      // Start auto-slide if enabled and multiple slides
      if (slides.length > 1) {
        // Check if any slide has autoplay enabled
        const hasAutoplay = Array.from(slides).some(slide => slide.dataset.autoplay === 'true');
        if (hasAutoplay) {
          startAutoSlideV2();
        }
      }
    }

    // Show slide for hero section two
    function showSlideV2(index) {
      
      // Remove active class from all slides
      slides.forEach(slide => {
        slide.classList.remove('active');
        slide.style.zIndex = '0';
        slide.style.opacity = '0';
      });
      
      // Add active class to current slide
      if (slides[index]) {
        slides[index].classList.add('active');
        slides[index].style.zIndex = '2';
        slides[index].style.opacity = '1';
      }
      
      currentSlide = index;
      window.heroCurrentSlideV2 = index;
      updateProgressBarV2();
      updateNavigationStateV2();
      
      // Restart autoplay with new slide settings
      if (getSlideAutoplaySettingsV2(index).enabled) {
        stopAutoSlideV2();
        startAutoSlideV2();
      }
    }

    // Update progress bar for hero section two
    function updateProgressBarV2() {
      if (progressBar && slides.length > 1) {
        const progress = ((currentSlide + 1) / slides.length) * 100;
        progressBar.style.width = progress + '%';
      }
    }

    // Update navigation arrows state (enable/disable) for hero section two
    function updateNavigationStateV2() {
      if (prevBtn && nextBtn) {
        // Disable previous button on first slide
        if (currentSlide === 0) {
          prevBtn.disabled = true;
          prevBtn.style.opacity = '0.3';
          prevBtn.style.cursor = 'not-allowed';
        } else {
          prevBtn.disabled = false;
          prevBtn.style.opacity = '1';
          prevBtn.style.cursor = 'pointer';
        }
        
        // Disable next button on last slide
        if (currentSlide === slides.length - 1) {
          nextBtn.disabled = true;
          nextBtn.style.opacity = '0.3';
          nextBtn.style.cursor = 'not-allowed';
        } else {
          nextBtn.disabled = false;
          nextBtn.style.opacity = '1';
          nextBtn.style.cursor = 'pointer';
        }
      }
    }

    // Next slide for hero section two
    function nextSlideV2() {
      const next = (currentSlide + 1) % slides.length;
      showSlideV2(next);
    }

    // Previous slide for hero section two
    function prevSlideV2() {
      const prev = (currentSlide - 1 + slides.length) % slides.length;
      showSlideV2(prev);
    }

    // Start auto-slide with per-slide settings for hero section two
    function startAutoSlideV2() {
      // Clear any existing timeout
      if (userInteractionTimeout) {
        clearTimeout(userInteractionTimeout);
        userInteractionTimeout = null;
      }
      
      // Stop any existing interval
      if (autoSlideInterval) {
        clearInterval(autoSlideInterval);
      }
      if (window.heroAutoSlideIntervalV2) {
        clearInterval(window.heroAutoSlideIntervalV2);
        window.heroAutoSlideIntervalV2 = null;
      }
      
      // Check if current slide has autoplay enabled
      const slideSettings = getSlideAutoplaySettingsV2(currentSlide);
      
      if (slideSettings.enabled) {
        // Use per-slide duration
        autoSlideInterval = setInterval(() => {
          nextSlideV2();
        }, slideSettings.duration);
        window.heroAutoSlideIntervalV2 = autoSlideInterval;
      }
    }

    // Stop auto-slide for hero section two
    function stopAutoSlideV2() {
      if (autoSlideInterval) {
        clearInterval(autoSlideInterval);
      }
      if (window.heroAutoSlideIntervalV2) {
        clearInterval(window.heroAutoSlideIntervalV2);
        window.heroAutoSlideIntervalV2 = null;
      }
    }

    // Pause auto-slide temporarily after user interaction for hero section two
    function pauseAutoSlideTemporarilyV2() {
      stopAutoSlideV2();
      
      // Clear any existing timeout
      if (userInteractionTimeout) {
        clearTimeout(userInteractionTimeout);
      }
      
      // Resume auto-slide after delay
      userInteractionTimeout = setTimeout(() => {
        if (slides.length > 1) {
          startAutoSlideV2();
        }
      }, userInteractionDelay);
    }

    // Handle swipe detection for hero section two
    function handleSwipeV2() {
      const swipeDistance = touchEndX - touchStartX;
      const verticalDistance = Math.abs(touchEndY - touchStartY);
      const horizontalDistance = Math.abs(swipeDistance);

      // Only register horizontal swipes if they're more horizontal than vertical
      // and meet the minimum distance threshold
      if (horizontalDistance > verticalDistance && horizontalDistance > minSwipeDistance) {
        if (swipeDistance > 0) {
          // Swipe right - go to previous slide
          prevSlideV2();
        } else {
          // Swipe left - go to next slide
          nextSlideV2();
        }
        
        // Pause auto-slide temporarily after user interaction
        pauseAutoSlideTemporarilyV2();
      }
    }

    // Touch event handlers for hero section two
    function handleTouchStartV2(e) {
      touchStartX = e.touches[0].clientX;
      touchStartY = e.touches[0].clientY;
      isSwiping = false;
      
      // Don't stop auto-slide on touch start - let it continue
    }

    function handleTouchMoveV2(e) {
      if (!isSwiping) {
        isSwiping = true;
      }
    }

    function handleTouchEndV2(e) {
      touchEndX = e.changedTouches[0].clientX;
      touchEndY = e.changedTouches[0].clientY;
      
      if (isSwiping) {
        handleSwipeV2();
        // Only pause autoplay if a swipe was actually performed
        pauseAutoSlideTemporarilyV2();
      }
      // If no swipe was detected, don't pause autoplay - let it continue normally
    }

    // Add touch event listeners to slider for hero section two
    if (slider) {
      slider.addEventListener('touchstart', handleTouchStartV2, { passive: true });
      slider.addEventListener('touchmove', handleTouchMoveV2, { passive: true });
      slider.addEventListener('touchend', handleTouchEndV2, { passive: true });
    }

    // Event listeners for hero section two
    if (prevBtn) {
      prevBtn.addEventListener('click', () => {
        prevSlideV2();
        pauseAutoSlideTemporarilyV2();
      });
    }

    if (nextBtn) {
      nextBtn.addEventListener('click', () => {
        nextSlideV2();
        pauseAutoSlideTemporarilyV2();
      });
    }

    // Mouse hover events removed - autoplay continues on hover

    // Keyboard navigation for hero section two
    document.addEventListener('keydown', (e) => {
      // Only handle keyboard events if this hero section is in focus
      if (heroSection.contains(document.activeElement) || heroSection.matches(':hover')) {
        if (e.key === 'ArrowLeft') {
          prevSlideV2();
          pauseAutoSlideTemporarilyV2();
        } else if (e.key === 'ArrowRight') {
          nextSlideV2();
          pauseAutoSlideTemporarilyV2();
        }
      }
    });

    // Initialize immediately for faster loading
    initSliderV2();
  });

  // Function to maintain aspect ratio for hero media and adjust container height
  function maintainHeroAspectRatioTwo() {
    document.querySelectorAll('.dynamic-hero-slide-v2').forEach(slide => {
      const mediaWrapper = slide.querySelector('.hero-v2-media-wrapper');
      const media = slide.querySelector('.hero-v2-media-content, .hero-v2-video');
      const heroSlider = document.querySelector('.dynamic-hero-slider-v2');
      
      if (!media || !heroSlider) return;
      
      // Check if we're on mobile (768px or below)
      const isMobile = window.innerWidth <= 768;
      
      if (isMobile) {
        // On mobile, use 4:5 aspect ratio
        const containerWidth = mediaWrapper.offsetWidth;
        const calculatedHeight = containerWidth / (4/5); // 4:5 aspect ratio
        
        // Set the height on both the media wrapper and the slide
        mediaWrapper.style.height = calculatedHeight + 'px';
        slide.style.height = calculatedHeight + 'px';
        heroSlider.style.height = calculatedHeight + 'px';
      } else {
        // On desktop, use 80% of viewport height
        const viewportHeight = window.innerHeight;
        const minHeight = 480; // 80% of 600px
        const finalHeight = Math.max(minHeight, viewportHeight * 0.8); // 80% of viewport height
        
        // Only set if it's different from current height to avoid conflicts
        if (Math.abs(heroSlider.offsetHeight - finalHeight) > 10) {
          heroSlider.style.height = finalHeight + 'px';
        }
        
        // Ensure media fills the container properly
        mediaWrapper.style.height = '100%';
        slide.style.height = '100%';
      }
    });
  }

  // Run on load and window resize
  window.addEventListener('load', maintainHeroAspectRatioTwo);
  window.addEventListener('resize', maintainHeroAspectRatioTwo);
  
  // Also run when images/videos are loaded to ensure proper sizing
  document.querySelectorAll('.dynamic-hero-section-two .hero-v2-media-content, .dynamic-hero-section-two .hero-v2-video').forEach(media => {
    media.addEventListener('load', maintainHeroAspectRatioTwo);
    if (media.tagName.toLowerCase() === 'video') {
      media.addEventListener('loadedmetadata', maintainHeroAspectRatioTwo);
    }
  });

  // Function to reattach navigation event listeners after variant update for section two
  function reattachNavigationListenersV2() {
    const heroSection = document.getElementById('dynamic-hero-section-two');
    if (!heroSection) return;

    const slider = heroSection.querySelector('.dynamic-hero-slider-v2');
    const slides = heroSection.querySelectorAll('.dynamic-hero-slide-v2');
    const prevBtn = document.querySelector('.hero-v2-slider-prev');
    const nextBtn = document.querySelector('.hero-v2-slider-next');
    
    if (!slider || !slides.length) return;

    // Remove existing event listeners by cloning and replacing elements
    if (prevBtn) {
      const newPrevBtn = prevBtn.cloneNode(true);
      prevBtn.parentNode.replaceChild(newPrevBtn, prevBtn);
    }
    if (nextBtn) {
      const newNextBtn = nextBtn.cloneNode(true);
      nextBtn.parentNode.replaceChild(newNextBtn, nextBtn);
    }

    // Get fresh references to the new buttons
    const newPrevBtn = document.querySelector('.hero-v2-slider-prev');
    const newNextBtn = document.querySelector('.hero-v2-slider-next');

    // Navigation functions for variant-updated slides
    function nextSlideVariantV2() {
      const currentSlide = window.heroCurrentSlideV2 || 0;
      const next = (currentSlide + 1) % slides.length;
      showSlideVariantV2(next);
    }

    function prevSlideVariantV2() {
      const currentSlide = window.heroCurrentSlideV2 || 0;
      const prev = (currentSlide - 1 + slides.length) % slides.length;
      showSlideVariantV2(prev);
    }

    function showSlideVariantV2(index) {
      // Remove active class from all slides
      slides.forEach(slide => {
        slide.classList.remove('active');
        slide.style.zIndex = '0';
        slide.style.opacity = '0';
      });
      
      // Add active class to current slide
      if (slides[index]) {
        slides[index].classList.add('active');
        slides[index].style.zIndex = '2';
        slides[index].style.opacity = '1';
      }
      
      window.heroCurrentSlideV2 = index;
      
      // Update progress bar
      const progressBar = document.querySelector('.hero-v2-slider-progress');
      if (progressBar && slides.length > 1) {
        const progress = ((index + 1) / slides.length) * 100;
        progressBar.style.width = progress + '%';
      }
      
      // Update navigation buttons
      if (newPrevBtn && newNextBtn) {
        newPrevBtn.disabled = index === 0;
        newPrevBtn.style.opacity = index === 0 ? '0.3' : '1';
        newPrevBtn.style.cursor = index === 0 ? 'not-allowed' : 'pointer';
        
        newNextBtn.disabled = index === slides.length - 1;
        newNextBtn.style.opacity = index === slides.length - 1 ? '0.3' : '1';
        newNextBtn.style.cursor = index === slides.length - 1 ? 'not-allowed' : 'pointer';
      }
    }

    // Add event listeners
    if (newPrevBtn) {
      newPrevBtn.addEventListener('click', () => {
        prevSlideVariantV2();
        // Pause autoplay temporarily
        if (window.heroAutoSlideIntervalV2) {
          clearInterval(window.heroAutoSlideIntervalV2);
          setTimeout(() => {
            const currentSlide = window.heroCurrentSlideV2 || 0;
            const slide = slides[currentSlide];
            if (slide && slide.dataset.autoplay === 'true') {
              const duration = parseInt(slide.dataset.autoplayDuration) || 5000;
              window.heroAutoSlideIntervalV2 = setInterval(() => {
                nextSlideVariantV2();
              }, duration);
            }
          }, 3000);
        }
      });
    }

    if (newNextBtn) {
      newNextBtn.addEventListener('click', () => {
        nextSlideVariantV2();
        // Pause autoplay temporarily
        if (window.heroAutoSlideIntervalV2) {
          clearInterval(window.heroAutoSlideIntervalV2);
          setTimeout(() => {
            const currentSlide = window.heroCurrentSlideV2 || 0;
            const slide = slides[currentSlide];
            if (slide && slide.dataset.autoplay === 'true') {
              const duration = parseInt(slide.dataset.autoplayDuration) || 5000;
              window.heroAutoSlideIntervalV2 = setInterval(() => {
                nextSlideVariantV2();
              }, duration);
            }
          }, 3000);
        }
      });
    }

    // Touch/swipe support for variant slides
    let touchStartX = 0;
    let touchEndX = 0;
    let touchStartY = 0;
    let touchEndY = 0;
    let isSwiping = false;
    const minSwipeDistance = 50;

    function handleSwipeVariantV2() {
      const swipeDistance = touchEndX - touchStartX;
      const verticalDistance = Math.abs(touchEndY - touchStartY);
      const horizontalDistance = Math.abs(swipeDistance);

      if (horizontalDistance > verticalDistance && horizontalDistance > minSwipeDistance) {
        if (swipeDistance > 0) {
          prevSlideVariantV2();
        } else {
          nextSlideVariantV2();
        }
      }
    }

    function handleTouchStartVariantV2(e) {
      touchStartX = e.touches[0].clientX;
      touchStartY = e.touches[0].clientY;
      isSwiping = false;
    }

    function handleTouchMoveVariantV2(e) {
      if (!isSwiping) {
        isSwiping = true;
      }
    }

    function handleTouchEndVariantV2(e) {
      touchEndX = e.changedTouches[0].clientX;
      touchEndY = e.changedTouches[0].clientY;
      
      if (isSwiping) {
        handleSwipeVariantV2();
      }
    }

    // Add touch event listeners to slider
    if (slider) {
      slider.addEventListener('touchstart', handleTouchStartVariantV2, { passive: true });
      slider.addEventListener('touchmove', handleTouchMoveVariantV2, { passive: true });
      slider.addEventListener('touchend', handleTouchEndVariantV2, { passive: true });
    }
  }

  // ============================================
  // VARIANT-SPECIFIC HERO CONTENT UPDATE (SECTION TWO)
  // ============================================
  // This function updates the hero section two when a variant is selected
  
  function updateHeroContentTwoForVariant(variantId) {
    // Check if we have variant hero content two data
    if (typeof variantHeroContentTwo === 'undefined' || !variantHeroContentTwo) {
      return;
    }

    const heroData = variantHeroContentTwo[variantId];
    if (!heroData || heroData.length === 0) {
      console.log('No hero content two for variant:', variantId);
      return;
    }

    const heroSection = document.getElementById('dynamic-hero-section-two');
    if (!heroSection) return;

    const heroSlider = heroSection.querySelector('.dynamic-hero-slider-v2');
    if (!heroSlider) return;

    // Stop any existing autoplay
    if (window.heroAutoSlideIntervalV2) {
      clearInterval(window.heroAutoSlideIntervalV2);
      window.heroAutoSlideIntervalV2 = null;
    }

    // Clear existing slides
    heroSlider.innerHTML = '';

    // Create new slides from variant data
    heroData.forEach((item, index) => {
      const slide = document.createElement('div');
      slide.className = 'dynamic-hero-slide-v2';
      slide.dataset.slideIndex = index;
      if (item.autoplay) slide.dataset.autoplay = 'true';
      if (item.autoplay_duration) slide.dataset.autoplayDuration = item.autoplay_duration * 1000;

      let mediaHTML = '';
      const hideTextContent = {{ section.settings.hide_text_content | json }};
      
      // Build media content
      if (item.content_type === 'image') {
        mediaHTML = `
          <div class="hero-v2-media-wrapper">
            <img src="${item.desktop_image}" class="hero-v2-media-content hero-v2-desktop-only" alt="${item.heading || ''}" loading="${index === 0 ? 'eager' : 'lazy'}">
            <img src="${item.mobile_image}" class="hero-v2-media-content hero-v2-mobile-only" alt="${item.heading || ''}" loading="${index === 0 ? 'eager' : 'lazy'}">
          </div>
        `;
      } else if (item.content_type === 'video') {
        mediaHTML = `
          <div class="hero-v2-media-wrapper">
            <div class="hero-v2-video-container hero-v2-desktop-only">
              <video class="hero-v2-video" ${item.autoplay ? 'autoplay' : ''} ${item.loop ? 'loop' : ''} ${item.muted ? 'muted' : ''} playsinline ${item.controls ? 'controls' : ''} poster="${item.video_poster || ''}" preload="${index === 0 ? 'metadata' : 'none'}">
                ${item.desktop_video ? `<source src="${item.desktop_video}" type="video/mp4">` : ''}
              </video>
            </div>
            <div class="hero-v2-video-container hero-v2-mobile-only">
              <video class="hero-v2-video" ${item.autoplay ? 'autoplay' : ''} ${item.loop ? 'loop' : ''} ${item.muted ? 'muted' : ''} playsinline ${item.controls ? 'controls' : ''} poster="${item.video_poster_mobile || item.video_poster || ''}" preload="${index === 0 ? 'metadata' : 'none'}">
                ${item.mobile_video ? `<source src="${item.mobile_video}" type="video/mp4">` : item.desktop_video ? `<source src="${item.desktop_video}" type="video/mp4">` : ''}
              </video>
            </div>
          </div>
        `;
      }

      // Build text content (if not hidden)
      let textHTML = '';
      if (!hideTextContent) {
        // Build button HTML separately
        let buttonHTML = '';
        // Only show button if btn_text has actual content (not empty/undefined/null)
        // Also check that btn_text is not just whitespace and has length > 0 after trimming
        const hasValidBtnText = item.btn_text && 
                                typeof item.btn_text === 'string' && 
                                item.btn_text.trim().length > 0;
        
        if (hasValidBtnText) {
          // Use provided URL or default to '#' if missing
          const btnUrl = (item.btn_url && item.btn_url.trim() !== '') ? item.btn_url : '#';
          console.log('🔘 Section Two - Button found for slide', index, ':', item.btn_text.trim(), '->', btnUrl);
          buttonHTML = `
            <div class="hero-v2-cta-wrapper" style="margin-top: 30px; position: relative; z-index: 10;">
              <a href="${btnUrl}" 
                 class="hero-v2-cta-button" 
                 style="display: inline-block !important; visibility: visible !important; opacity: 1 !important; pointer-events: auto !important;">
                ${item.btn_text.trim()}
              </a>
            </div>`;
        } else {
          console.log('⚪ Section Two - Button hidden for slide', index, '- btn_text:', JSON.stringify(item.btn_text), '(empty or invalid)');
        }
        
        // Only create text content div if there's heading, text, or button
        if (item.heading || item.text || buttonHTML) {
          textHTML = `
            <div class="hero-v2-container">
              <div class="hero-v2-content" style="${item.mobile_padding_top ? '--mobile-padding-top: ' + item.mobile_padding_top + 'px;' : ''}">
                <div class="hero-v2-content-wrapper">
                  <div class="hero-v2-text-content">
                    ${item.heading ? `<h1 class="hero-v2-title" style="font-weight:550 !important">${item.heading}</h1>` : ''}
                    ${item.text ? `<div class="hero-v2-description">${item.text}</div>` : ''}
                    ${buttonHTML}
                  </div>
                </div>
              </div>
            </div>
          `;
        }
      }

      slide.innerHTML = mediaHTML + textHTML;
      heroSlider.appendChild(slide);
    });

    // Reinitialize the slider completely
    const slides = heroSlider.querySelectorAll('.dynamic-hero-slide-v2');
    if (slides.length > 0) {
      // Reset all slides to inactive state
      slides.forEach((slide, index) => {
        slide.classList.remove('active');
        slide.style.zIndex = '0';
        slide.style.opacity = '0';
      });
      
      // Activate first slide
      slides[0].classList.add('active');
      slides[0].style.zIndex = '2';
      slides[0].style.opacity = '1';
      
      // Reset global variables
      window.heroCurrentSlideV2 = 0;
      
      // Update navigation visibility
      const bottomNav = document.querySelector('.hero-v2-bottom-nav');
      if (bottomNav) {
        bottomNav.style.display = slides.length > 1 ? 'flex' : 'none';
      }
      
      // Update progress bar
      const progressBar = document.querySelector('.hero-v2-slider-progress');
      if (progressBar && slides.length > 1) {
        progressBar.style.width = (100 / slides.length) + '%';
      }
      
      // Update navigation buttons
      const prevBtn = document.querySelector('.hero-v2-slider-prev');
      const nextBtn = document.querySelector('.hero-v2-slider-next');
      if (prevBtn && nextBtn) {
        prevBtn.disabled = true;
        prevBtn.style.opacity = '0.3';
        prevBtn.style.cursor = 'not-allowed';
        
        if (slides.length > 1) {
          nextBtn.disabled = false;
          nextBtn.style.opacity = '1';
          nextBtn.style.cursor = 'pointer';
        } else {
          nextBtn.disabled = true;
          nextBtn.style.opacity = '0.3';
          nextBtn.style.cursor = 'not-allowed';
        }
      }
      
      // Re-run aspect ratio function
      setTimeout(() => {
        maintainHeroAspectRatioTwo();
        
        // Reattach navigation event listeners
        reattachNavigationListenersV2();
        
        // Start autoplay if enabled for first slide
        if (slides.length > 1) {
          const firstSlide = slides[0];
          const autoplay = firstSlide.dataset.autoplay === 'true';
          const duration = parseInt(firstSlide.dataset.autoplayDuration) || 5000;
          
          if (autoplay) {
            window.heroAutoSlideIntervalV2 = setInterval(() => {
              const currentSlide = window.heroCurrentSlideV2 || 0;
              const nextSlide = (currentSlide + 1) % slides.length;
              
              // Hide current slide
              slides[currentSlide].classList.remove('active');
              slides[currentSlide].style.zIndex = '0';
              slides[currentSlide].style.opacity = '0';
              
              // Show next slide
              slides[nextSlide].classList.add('active');
              slides[nextSlide].style.zIndex = '2';
              slides[nextSlide].style.opacity = '1';
              
              window.heroCurrentSlideV2 = nextSlide;
              
              // Update progress bar
              if (progressBar) {
                const progress = ((nextSlide + 1) / slides.length) * 100;
                progressBar.style.width = progress + '%';
              }
              
              // Update navigation buttons
              if (prevBtn && nextBtn) {
                prevBtn.disabled = nextSlide === 0;
                prevBtn.style.opacity = nextSlide === 0 ? '0.3' : '1';
                prevBtn.style.cursor = nextSlide === 0 ? 'not-allowed' : 'pointer';
                
                nextBtn.disabled = nextSlide === slides.length - 1;
                nextBtn.style.opacity = nextSlide === slides.length - 1 ? '0.3' : '1';
                nextBtn.style.cursor = nextSlide === slides.length - 1 ? 'not-allowed' : 'pointer';
              }
              
              // Check if next slide has different autoplay settings
              const nextSlideElement = slides[nextSlide];
              const nextAutoplay = nextSlideElement.dataset.autoplay === 'true';
              const nextDuration = parseInt(nextSlideElement.dataset.autoplayDuration) || 5000;
              
              if (nextAutoplay && nextDuration !== duration) {
                // Restart with new duration
                clearInterval(window.heroAutoSlideIntervalV2);
                window.heroAutoSlideIntervalV2 = setInterval(() => {
                  const currentSlide = window.heroCurrentSlideV2 || 0;
                  const nextSlide = (currentSlide + 1) % slides.length;
                  
                  // Hide current slide
                  slides[currentSlide].classList.remove('active');
                  slides[currentSlide].style.zIndex = '0';
                  slides[currentSlide].style.opacity = '0';
                  
                  // Show next slide
                  slides[nextSlide].classList.add('active');
                  slides[nextSlide].style.zIndex = '2';
                  slides[nextSlide].style.opacity = '1';
                  
                  window.heroCurrentSlideV2 = nextSlide;
                  
                  // Update progress bar
                  if (progressBar) {
                    const progress = ((nextSlide + 1) / slides.length) * 100;
                    progressBar.style.width = progress + '%';
                  }
                  
                  // Update navigation buttons
                  if (prevBtn && nextBtn) {
                    prevBtn.disabled = nextSlide === 0;
                    prevBtn.style.opacity = nextSlide === 0 ? '0.3' : '1';
                    prevBtn.style.cursor = nextSlide === 0 ? 'not-allowed' : 'pointer';
                    
                    nextBtn.disabled = nextSlide === slides.length - 1;
                    nextBtn.style.opacity = nextSlide === slides.length - 1 ? '0.3' : '1';
                    nextBtn.style.cursor = nextSlide === slides.length - 1 ? 'not-allowed' : 'pointer';
                  }
                }, nextDuration);
              }
            }, duration);
          }
        }
      }, 100);
    }
  }

  // Listen for variant change events
  document.addEventListener('DOMContentLoaded', function() {
    document.addEventListener('variant:changed', function(e) {
      if (e.detail && e.detail.variant && e.detail.variant.id) {
        updateHeroContentTwoForVariant(e.detail.variant.id.toString());
      }
    });
  });
</script>

{% schema %}
{
  "name": "Dynamic Hero Section Two",
  "tag": "section",
  "class": "dynamic-hero-section-two-wrapper",
  "settings": [
    {
      "type": "header",
      "content": "Product Page Integration"
    },
    {
      "type": "paragraph",
      "content": "On product pages, this section will automatically use product metafields for dynamic content. Set up metafields with namespace 'custom' and key 'hero_content_two' as a JSON list."
    },
    {
      "type": "paragraph",
      "content": "JSON Structure for metafields: [{\"content_type\": \"image\", \"desktop_image\": \"url\", \"mobile_image\": \"url\", \"heading\": \"text\", \"text\": \"description\", \"btn_text\": \"button\", \"btn_url\": \"link\", \"autoplay\": true, \"autoplay_duration\": 5}, ...]"
    },
    {
      "type": "paragraph",
      "content": "Per-slide autoplay settings: Set 'autoplay' to true/false for each slide, and 'autoplay_duration' to the desired seconds (e.g., 2, 5, 10, 15). Each slide can have different timing. Autoplay is ONLY controlled through metafields - theme settings are disabled to prevent conflicts."
    },
    {
      "type": "header",
      "content": "Content Display"
    },
    {
      "type": "checkbox",
      "id": "hide_text_content",
      "label": "Hide Text Content",
      "default": false,
      "info": "When enabled, only images/videos will display without heading, text, or button"
    },
    {
      "type": "header",
      "content": "Static Page Settings"
    },
    {
      "type": "checkbox",
      "id": "fix",
      "label": "Fix Scaling Issue",
      "default": false
    },
    {
      "type": "select",
      "id": "text_alignment",
      "label": "Text Alignment",
      "options": [
        {
          "value": "left",
          "label": "Left Aligned"
        },
        {
          "value": "center",
          "label": "Center Aligned"
        },
        {
          "value": "justify",
          "label": "Justified"
        }
      ],
      "default": "center",
      "info": "Controls how text is aligned within the content area"
    },
  ],
  "blocks": [
    {
      "type": "slide",
      "name": "Slide",
      "settings": [
        {
          "type": "select",
          "id": "content_type",
          "label": "Content Type",
          "options": [
            {
              "value": "image",
              "label": "Image"
            },
            {
              "value": "video",
              "label": "Video"
            }
          ],
          "default": "image"
        },
        {
          "type": "header",
          "content": "Image Settings"
        },
        {
          "type": "image_picker",
          "id": "desktop_image",
          "label": "Desktop Image",
          "info": "Recommended size: 1920 x 1080 pixels"
        },
        {
          "type": "image_picker",
          "id": "mobile_image",
          "label": "Mobile Image",
          "info": "Recommended size: 768 x 1024 pixels"
        },
        {
          "type": "header",
          "content": "Video Settings"
        },
        {
          "type": "text",
          "id": "desktop_video",
          "label": "Desktop Video URL",
          "info": "First upload your video in Settings > Files, then copy the URL here. MP4 format recommended."
        },
        {
          "type": "text",
          "id": "mobile_video",
          "label": "Mobile Video URL (optional)",
          "info": "If not provided, desktop video will be used. Upload in Settings > Files."
        },
        {
          "type": "image_picker",
          "id": "video_poster",
          "label": "Video Poster Image (Desktop)",
          "info": "Shown before video plays"
        },
        {
          "type": "image_picker",
          "id": "video_poster_mobile",
          "label": "Video Poster Image (Mobile)",
          "info": "If not provided, desktop poster will be used"
        },
        {
          "type": "checkbox",
          "id": "autoplay",
          "label": "Autoplay video",
          "default": true,
          "info": "Autoplays on supported browsers"
        },
        {
          "type": "checkbox",
          "id": "loop",
          "label": "Loop video",
          "default": true
        },
        {
          "type": "checkbox",
          "id": "muted",
          "label": "Mute video",
          "default": true,
          "info": "Video must be muted for autoplay to work"
        },
        {
          "type": "checkbox",
          "id": "controls",
          "label": "Show video controls",
          "default": false
        },
        {
          "type": "header",
          "content": "Content Settings"
        },
        {
          "type": "textarea",
          "id": "heading",
          "label": "Heading"
        },
        {
          "type": "richtext",
          "id": "text",
          "label": "Text"
        },
        {
          "type": "text",
          "id": "btn_text",
          "label": "Button Text"
        },
        {
          "type": "url",
          "id": "btn_url",
          "label": "Button Link"
        },
        {
          "type": "header",
          "content": "Mobile Settings"
        },
        {
          "type": "number",
          "id": "mobile_padding_top",
          "label": "Mobile - Padding from top (%)",
          "info": "Adjust text position from top on mobile",
          "default": 50
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Dynamic Hero Section Two",
      "blocks": [
        {
          "type": "slide"
        }
      ]
    }
  ]
}
{% endschema %} 