<div id="custom-cart" class="r-side-cart">
  <div class="cart-overlay"></div>
  
  <div class="cart-content">
    <!-- Free Shipping Progress Bar -->
    <div class="free-shipping-progress">
      <div class="progress-text">
          <span class="free-shipping-progress-text">
            {% assign free_shipping_threshold = 9900 %}
            {% assign remaining_amount = free_shipping_threshold | minus: cart.total_price %}
            {% if remaining_amount > 0 %}
              Almost there! Add ${{ remaining_amount | divided_by: 100.0 | round: 2 }} more for free shipping
            {% else %}
              <span class="free-shipping-achieved">You got free shipping!</span>
            {% endif %}
          </span>
      </div>
      
      <div class="progress-bar-container">
        {% assign progress_percentage = cart.total_price | times: 100 | divided_by: free_shipping_threshold %}
        {% if progress_percentage > 100 %}{% assign progress_percentage = 100 %}{% endif %}
        <div class="progress-bar" style="width: {{ progress_percentage }}%">
          <div class="truck-icon">
            <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path d="M4 5.25a.75.75 0 0 1 .75-.75h6.991a2.75 2.75 0 0 1 2.645 1.995l.427 1.494a.25.25 0 0 0 .18.173l1.681.421a1.75 1.75 0 0 1 1.326 1.698v1.219a1.75 1.75 0 0 1-1.032 1.597 2.5 2.5 0 1 1-4.955.153h-3.025a2.5 2.5 0 1 1-4.78-.75h-.458a.75.75 0 0 1 0-1.5h2.5c.03 0 .06.002.088.005a2.493 2.493 0 0 1 1.947.745h4.43a2.493 2.493 0 0 1 1.785-.75c.698 0 1.33.286 1.783.748a.25.25 0 0 0 .217-.248v-1.22a.25.25 0 0 0-.19-.242l-1.682-.42a1.75 1.75 0 0 1-1.258-1.217l-.427-1.494a1.25 1.25 0 0 0-1.202-.907h-6.991a.75.75 0 0 1-.75-.75Zm2.5 9.25a1 1 0 1 0 0-2 1 1 0 0 0 0 2Zm8 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z"/>
            </svg>
          </div>
        </div>
      </div>
    </div>

    <!-- Cart Header -->
    <div class="cart-header">
      <h2 class="cart-title">Your bag ({{ cart.item_count }})</h2>
      <button class="cart-close cart-icon" aria-label="Close cart">✕</button>
    </div>

    <!-- Cart Items and Bundle Section Container -->
    <div class="cart-items-container">
        {% if cart.item_count > 0 %}
        <form class="Cart_Drawer__Content" action="{{ routes.cart_url }}" method="POST" novalidate>
          <div id="cart-items-list" class="cart-items-list">
              {% for item in cart.items %}
                <div class="cart-item r-prod-row" data-item-key="{{ item.key }}" data-variant-id="{{ item.variant.id }}" data-line="{{forloop.index}}">
                  <!-- Column 1: Product Image -->
                  <div class="cart-item-image">
                    <a href="{{item.url}}">
                      <img src="{{ item | img_url: 'large' }}" alt="{{ item.product.title }}" loading="lazy">
                    </a>
                  </div>
                  
                  <!-- Column 2: Product Details -->
                  <div class="cart-item-details">
                    <h3 class="cart-item-title" style="font-weight:600 !important">{{ item.product.title }}</h3>
                    {% unless item.variant.title contains 'Default' %}
                      <p class="cart-item-variant">{{ item.variant.title }}</p>
                    {% endunless %}
                  </div>
                  
                  <!-- Column 3: Quantity Controls -->
                    <div class="cart-item-quantity r-prod-qty">
                      <button type="button" class="quantity-btn minus qty__adjust qty__adjust--minus" data-action="decrease" tabindex="0">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
                        </svg>
                      </button>
                      <input type="number" class="quantity-input" value="{{ item.quantity }}" min="1" readonly>
                      <button type="button" class="quantity-btn plus qty__adjust qty__adjust--plus" data-action="increase" aria-label="Increase item quantity by one" tabindex="0">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                        </svg>
                      </button>
                    </div>
                    
                  <!-- Column 4: Price -->
                    <div class="cart-item-pricing">
                      <div class="price-container">
                        {% assign original_price = item.variant.compare_at_price | default: item.original_price %}
                        {% assign has_discount = false %}
                        {% assign discount_amount = 0 %}
                        
                        {% comment %} Check for product-level discounts (compare_at_price) {% endcomment %}
                        {% if original_price and original_price > item.price %}
                          {% assign has_discount = true %}
                          {% assign discount_amount = original_price | minus: item.price | times: item.quantity %}
                        {% endif %}
                        
                        {% comment %} Check for cart-level discounts {% endcomment %}
                        {% if item.discounts.size > 0 %}
                          {% assign has_discount = true %}
                          {% for discount in item.discounts %}
                            {% assign discount_amount = discount_amount | plus: discount.amount %}
                          {% endfor %}
                        {% endif %}
                        
                        {% if has_discount %}
                          <div class="original-price-top">{{ item.original_line_price | money }}</div>
                          <div class="price-comparison">
                            <span class="original-price">{{ original_price | times: item.quantity | money }}</span>
                            <span class="discounted-price">{{ item.line_price | money }}</span>
                          </div>
                          <div class="savings">(Save {{ discount_amount | money }})</div>
                          
                          {% comment %} Get coupon code from item discounts array {% endcomment %}
                          {% assign item_discount_code = '' %}
                          {% if item.discounts.size > 0 %}
                            {% for discount in item.discounts %}
                              {% assign item_discount_code = discount.title %}
                              {% break %}
                            {% endfor %}
                          {% endif %}
                          
                          {% if item_discount_code != blank %}
                            <div class="coupon-code">{{ item_discount_code }}</div>
                          {% elsif item.properties['discount_code'] %}
                            <div class="coupon-code">{{ item.properties['discount_code'] }}</div>
                          {% endif %}
                        {% else %}
                          <div class="current-price">{{ item.line_price | money }}</div>
                        {% endif %}
                      </div>
                    </div>
                    
                  <!-- Column 5: Remove Button -->
                  <div class="cart-item-remove-container">
                    <button class="cart-item-remove remove-cart" data-item-key="{{ item.key }}" aria-label="Remove item">
                      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                      </svg>
                    </button>
                  </div>
                  
                  <div class="spinner"></div>
                </div>
              {% endfor %}
          </div>
          
          <!-- Bundle & Save Section -->
          <div class="bundle-save-section">
            <h3 class="bundle-title">Bundle & save</h3>
            <div class="bundle-products-container">
              <div class="bundle-products-scroll" id="bundle-products-scroll">
                <!-- Bundle products with metafield support -->
                {% assign bundle_products = blank %}
                {% assign shown_product_ids = '' %}

                {% comment %} Simple approach: Show recommendations from each cart item, avoiding duplicates {% endcomment %}
                {% for item in cart.items %}
                  {% if item.product.metafields.custom.recommendations_for_cart.value != blank %}
                    {% assign item_recommendations = item.product.metafields.custom.recommendations_for_cart.value %}

                    {% comment %} If it's a metafield reference, get the actual products {% endcomment %}
                    {% if item_recommendations.products %}
                      {% assign item_recommendations = item_recommendations.products %}
                    {% endif %}

                    {% comment %} For each recommended product, check if we've already shown it and if it's not already in cart {% endcomment %}
                    {% for recommended_product in item_recommendations %}
                      {% assign product_id_check = ',' | append: recommended_product.id | append: ',' %}
                      {% assign product_in_cart = false %}
                      
                      {% comment %} Check if this product is already in the cart {% endcomment %}
                      {% for cart_item in cart.items %}
                        {% if cart_item.product.id == recommended_product.id %}
                          {% assign product_in_cart = true %}
                          {% break %}
                        {% endif %}
                      {% endfor %}
                      
                      {% unless shown_product_ids contains product_id_check or product_in_cart %}
                        {% comment %} Add this product ID to our tracking string {% endcomment %}
                        {% assign shown_product_ids = shown_product_ids | append: ',' | append: recommended_product.id | append: ',' %}
                        
                        {% comment %} Render the product immediately to avoid complex array management {% endcomment %}
                        <div class="bundle-product" data-product-id="{{ recommended_product.id }}">
                          <div class="bundle-product-gray-box">
                            <div class="bundle-product-image">
                              <img src="{{ recommended_product.variants.first.featured_image | default: recommended_product.featured_image | img_url: 'medium' }}" alt="{{ recommended_product.title }}">
                            </div>
                            <h4 class="bundle-product-title">{{ recommended_product.title }}</h4>
                            <p class="bundle-product-price">{{ recommended_product.variants.first.price | money }}</p>
                          </div>
                   
                          <div class="bundle-product-variants">
                            {% for variant in recommended_product.variants limit: 4 %}
                              <div class="variant-dot {% if forloop.first %}selected{% endif %}" data-variant-id="{{ variant.id }}" data-product-id="{{ recommended_product.id }}" data-variant-index="{{ forloop.index0 }}" data-fabric="{{ variant.option1 }}">
                                <div class="dot" style="background-color: {{ variant.option1 | handleize }};"></div>
                              </div>
                            {% endfor %}
                          </div>
                          <div class="bundle-product-material">{{ recommended_product.variants.first.option1 }}</div>
                          <button class="add-to-bag-btn bundle-cart-btn" data-variant-id="{{ recommended_product.selected_or_first_available_variant.id }}" data-product-id="{{ recommended_product.id }}" data-source="bundle-cart">Add to Bag</button>
                        </div>
                      {% endunless %}
                    {% endfor %}
                  {% endif %}
                {% endfor %}
                
                {% comment %} Generate JavaScript data for all recommended products (avoiding duplicates) {% endcomment %}
                <script>
                  {% assign js_product_ids = '' %}
                  {% for item in cart.items %}
                    {% if item.product.metafields.custom.recommendations_for_cart.value != blank %}
                      {% assign item_recommendations = item.product.metafields.custom.recommendations_for_cart.value %}

                      {% comment %} If it's a metafield reference, get the actual products {% endcomment %}
                      {% if item_recommendations.products %}
                        {% assign item_recommendations = item_recommendations.products %}
                      {% endif %}

                      {% for recommended_product in item_recommendations %}
                        {% assign js_product_id_check = ',' | append: recommended_product.id | append: ',' %}
                        {% assign js_product_in_cart = false %}
                        
                        {% comment %} Check if this product is already in the cart {% endcomment %}
                        {% for cart_item in cart.items %}
                          {% if cart_item.product.id == recommended_product.id %}
                            {% assign js_product_in_cart = true %}
                            {% break %}
                          {% endif %}
                        {% endfor %}
                        
                        {% unless js_product_ids contains js_product_id_check or js_product_in_cart %}
                          {% assign js_product_ids = js_product_ids | append: ',' | append: recommended_product.id | append: ',' %}
                          window.bundleProductVariants_{{ recommended_product.id }} = [
                            {% for variant in recommended_product.variants limit: 4 %}
                              {
                                id: {{ variant.id }},
                                title: {{ variant.title | json }},
                                price: {{ variant.price }},
                                fabric: {{ variant.option1 | json }},
                                featured_image: {
                                  url: "{{ variant.featured_image | default: recommended_product.featured_image | img_url: 'medium' }}",
                                  alt: "{{ variant.title | default: recommended_product.title }}"
                                }
                              }{% unless forloop.last %},{% endunless %}
                            {% endfor %}
                          ];
                        {% endunless %}
                      {% endfor %}
                    {% endif %}
                  {% endfor %}
                </script>
              </div>
            </div>
          </div>
        </form>
        {% else %}
          <div class="empty-cart">
            <p style="text-align:center; padding: 40px 0;">Cart is empty</p>
          </div>
        {% endif %}
    </div>

    <!-- Sticky Checkout Section - Only show when cart has items -->
    {% if cart.item_count > 0 %}
    <div class="checkout-section">
      <div class="discount-code-section">
        <input type="text" id="discount-code" class="discount-input" placeholder="Discount Code" maxlength="20">
        <button id="apply-discount" class="apply-discount-btn">Apply</button>
      </div>
      
      <!-- Applied Discount Codes Display -->
      <div id="applied-discounts" class="applied-discounts-section" style="display: none;">
        {% if cart.discount_codes.size > 0 %}
          {% for discount_code in cart.discount_codes %}
            {% if discount_code.applicable %}
              <div class="discount-tag" data-code="{{ discount_code.code }}">
                <span class="discount-tag-icon">🏷️</span>
                <span class="discount-tag-text">{{ discount_code.code }}</span>
                <button class="discount-tag-remove" data-code="{{ discount_code.code }}" aria-label="Remove discount code">
                  <svg viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                  </svg>
                </button>
              </div>
            {% endif %}
          {% endfor %}
        {% endif %}
      </div>
      
      {% assign total_savings = 0 %}
      {% for item in cart.items %}
        {% if item.variant.compare_at_price > item.variant.price %}
          {% assign item_savings = item.variant.compare_at_price | minus: item.variant.price | times: item.quantity %}
          {% assign total_savings = total_savings | plus: item_savings %}
        {% endif %}
      {% endfor %}
      {% comment %}Only add total_discount if it's not already included in the line item calculations{% endcomment %}
      {% if cart.total_discount > 0 %}
        {% assign total_savings = total_savings | plus: cart.total_discount %}
      {% endif %}
 
      
      <div class="shipping-info">
        <div class="shipping-text">
          <p>Free shipping over $50 and free 30 days return</p>
          
          <!-- Payment Methods -->
          <div class="payment-methods">
            <!-- Visa -->
            <img src="{{ 'visa-svgrepo-com.svg' | asset_url }}" alt="Visa" class="payment-icon">
            
            <!-- Mastercard -->
            <img src="{{ 'mastercard-svgrepo-com.svg' | asset_url }}" alt="Mastercard" class="payment-icon">
            
            <!-- PayPal -->
            <img src="{{ 'paypal-svgrepo-com.svg' | asset_url }}" alt="PayPal" class="payment-icon">
            
            <!-- Apple Pay -->
            <img src="{{ 'apple-pay-svgrepo-com.svg' | asset_url }}" alt="Apple Pay" class="payment-icon">
            
            <!-- American Express -->
            <img src="{{ 'amex-svgrepo-com.svg' | asset_url }}" alt="American Express" class="payment-icon">
            
            <!-- Shop Pay -->
            <img src="{{ 'Shop pay.svg' | asset_url }}" alt="Shop Pay" class="payment-icon">
            
            <!-- Google Pay -->
            <img src="{{ 'google-pay-svgrepo-com.svg' | asset_url }}" alt="Google Pay" class="payment-icon">
          </div>
        </div>
        
        <div class="shipping-totals">
          <div class="shipping-row" id="savings-display" {% if total_savings <= 0 %}style="display: none;"{% endif %}>
        <span class="shipping-label">Savings : </span>
        <span class="saving-cost" id="savings-amount">{{ total_savings | money }}</span>
      </div>
          <div class="shipping-row">
            <span class="shipping-label">Shipping :</span>
            <span class="shipping-cost">
                {% if cart.total_price >= 5000 %}
                  Free
                {% else %}
                  $5.00
                {% endif %}
            </span>
          </div>
          <div class="total-row">
            <span class="total-label">Total :</span>
            <span class="total-amount">{{ cart.total_price | money }}</span>
          </div>
        </div>
      </div>
      
      <button class="checkout-btn" id="checkout-btn" onclick="window.location.href='/checkout'">Checkout</button>
    </div>
    {% endif %}
  </div>
</div>

<style>
.r-side-cart {
  position: fixed;
  top: 0;
  right: 0;
  width: 100%;
  height: 100vh;
  z-index: 10000;
  display: block;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  transform: translateX(100%);
  visibility: hidden;
  opacity: 0;
}

.r-side-cart.active {
  transform: translateX(0);
  visibility: visible;
  opacity: 1;
}

.r-side-cart.active .cart-items-container,
.r-side-cart.active .bundle-save-section,
.r-side-cart.active .checkout-section {
  display: block !important;
}

/* Hide sections when cart is empty */
.r-side-cart .empty-cart {
  display: block;
}

.r-side-cart .empty-cart ~ * {
  display: none !important;
}

/* Force hide checkout section when cart is empty */
.r-side-cart:not(.active) .checkout-section,
.r-side-cart .empty-cart + .checkout-section,
.r-side-cart .checkout-section:not(:has(.discount-code-section)) {
  display: none !important;
}

/* Additional rule to hide checkout section when cart is empty */
.r-side-cart .cart-items-container:has(.empty-cart) ~ .checkout-section {
  display: none !important;
}

/* Hide checkout section when cart is empty - most specific rule */
.r-side-cart .checkout-section {
  display: block;
}

.r-side-cart .empty-cart ~ .checkout-section,
.r-side-cart .cart-items-container:has(.empty-cart) + .checkout-section {
  display: none !important;
}

/* Hide checkout section with class */
.r-side-cart .checkout-section.hidden-when-empty {
  display: none !important;
}

.cart-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  backdrop-filter: blur(4px);
}

.cart-content {
  position: absolute;
  top: 0;
  right: 0;
  width: 680px;
  height: 100vh;
  background: #ffffff;
  box-shadow: -4px 0 24px rgba(0, 0, 0, 0.15);
  display: flex;
  flex-direction: column;
  overflow: hidden;
  border-radius: 0;
}

/* Free Shipping Progress Bar */
.free-shipping-progress {
  background: #ffffff;
  color: #111827;
  text-align: center;
  padding: 16px 16px 20px;
  position: relative;
}

.free-shipping-progress .progress-text {
  color: #111827;
  margin-bottom: 16px;
}

.free-shipping-progress .free-shipping-achieved {
  color: #111827;
  font-weight: normal;
  font-size: 16px;
}

.free-shipping-progress .free-shipping-progress-text {
  color: #111827;
  font-size: 14px;
}

.free-shipping-progress .remaining-amount {
  color: #111827;
  font-weight: 600;
}

.progress-bar-container {
  width: 97%;
  height: 12px;
  background: #e5e7eb;
  border-radius: 6px;
  overflow: visible;
  margin-bottom: 0;
  position: relative;
}

.progress-bar {
  height: 100%;
  background: #5896a1;
  border-radius: 6px;
  transition: width 0.6s ease;
  position: relative;
}

.truck-icon {
    position: absolute;
    right: -24px;
    top: -14px;
    background: #5896a1;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

.truck-icon svg {
  width: 27px;
  height: 27px;
  fill: white;
  margin-left: 4px;
  margin-top: 2px;
}

/* Cart Header */
.cart-header {
  padding: 16px;
  position: relative;
}

.cart-title {
  font-size: 18px;
  font-weight: 600;
  color: #111827;
  margin: 0;
  font-family: inherit;
}

.cart-close {
  position: absolute;
  top: 0px;
  right: 16px;
  background: none;
  border: none;
  color: #6b7280;
  cursor: pointer;
  padding: 8px;
  border-radius: 50%;
  transition: all 0.2s ease;
  font-size: 18px;
}

.cart-close:hover {
  background: #f5f5f5;
  color: #333;
}

/* Cart Items Container */
.cart-items-container {
  flex: 1;
  overflow-y: auto;
  padding: 0 16px;
  background: #ffffff;
}

.cart-items-list {
  padding: 0 0 0 0;
}

.cart-item {
  display: grid;
  grid-template-columns: 80px 2fr 1fr 2fr 0fr;
  align-items: flex-start;
  padding: 24px 0;
  gap: 16px;
  position: relative;
}

.cart-item-image {
  width: 77px;
  height: 91px;
  border-radius: 8px;
  overflow: hidden;
  background: #f8f9fa;
  grid-column: 1;
}

.cart-item-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.cart-item-details {
  grid-column: 2;
  min-width: 0;
}

.cart-item-title {
  font-size: 16px;
  font-weight: 500;
  color: #111827;
  margin: 0 0 4px 0;
  line-height: 1.3;
  font-family: inherit;
}

.cart-item-variant {
  font-size: 14px;
  color: #996515;
  margin: 0;
  font-weight: 500;
}

.cart-item-quantity {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0px;
  background: transparent;
  grid-column: 3;
}

.quantity-btn {
  width: 32px;
  height: 32px;
  border: 1px solid #d1d5db;
  border-radius: 50%;
  background: #ffffff;
  color: #6b7280;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.quantity-btn:hover {
  background: #f8f9fa;
  color: #111827;
  border-color: #9ca3af;
}

.quantity-btn svg {
  width: 16px;
  height: 16px;
}

.quantity-input {
  width: 40px;
  text-align: center;
  border: none;
  background: transparent;
  font-size: 14px;
  font-weight: 500;
  color: #111827;
  outline: none;
  -moz-appearance: textfield; /* Hide spinner in Firefox */
}

.quantity-input::-webkit-inner-spin-button,
.quantity-input::-webkit-outer-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

.quantity-display {
  font-size: 14px;
  font-weight: 500;
  color: #374151;
  min-width: 24px;
  text-align: center;
  padding: 0;
}

.cart-item-pricing {
  text-align: right;
  min-width: 80px;
  grid-column: 4;
}

.price-container {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  text-align: right;
}

.price-container:has(.price-details) {
  margin-top: 21px;
}

.price-container:not(:has(.price-details)) {
  margin-top: 0px;
}

.current-price {
  font-size: 18px;
  margin-left: 51px;
  font-weight: 400;
  color: #111827;
  margin-bottom: 4px;
}

.original-price-top {
  font-size: 18px;
  font-weight: 400;
  color: #111827;
  margin-bottom: 4px;
}

.price-comparison {
  display: flex;
  gap: 8px;
  align-items: center;
  margin-bottom: 4px;
  justify-content: flex-end;
  margin-top:15px;
}

.original-price {
  font-size: 13px;
  color: #9ca3af;
  text-decoration: line-through;
  font-weight: 500;
}

.discounted-price {
  font-size: 14px;
  color: #111827;
  font-weight: 600;
}

.savings {
  font-size: 12px;
  color: #0891b2;
  font-weight: 600;
  background: transparent;
  padding: 0;
  border-radius: 0;
  margin-bottom: 2px;
  display: inline-block;
}

.coupon-code {
  font-size: 11px;
  color: #374151;
  font-weight: 500;
  display: flex;
  align-items: center;
  gap: 6px;
  background: #f3f4f6;
  padding: 4px 8px;
  border-radius: 4px;
  margin-top: 4px;
}

.coupon-code:before {
  content: "";
  display: inline-block;
  width: 12px;
  height: 12px;
  background: #374151;
  mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z'/%3E%3C/svg%3E") no-repeat center;
  -webkit-mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z'/%3E%3C/svg%3E") no-repeat center;
  mask-size: contain;
  -webkit-mask-size: contain;
}

.bundle-tag {
  display: flex;
  align-items: center;
  gap: 4px;
  font-size: 11px;
  color: #059669;
  font-weight: 600;
  margin-top: 2px;
}

.bundle-dot {
  width: 8px;
  height: 8px;
  background: #059669;
  border-radius: 50%;
}

.cart-item-remove-container {
  grid-column: 5;
  display: flex;
  align-items: center;
  justify-content: center;
}

.cart-item-remove {
  background: none;
  border: none;
  color: #9ca3af;
  cursor: pointer;
  border-radius: 50%;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  
}

.cart-item-remove:hover {
  background: #f8f9fa;
  color: #dc2626;
}

.cart-item-remove svg {
  width: 20px;
  height: 20px;
}

/* Bundle & Save Section */
.bundle-save-section {
  background: #ffffff;
  margin: 0 -16px 0 0;
}

.bundle-title {
  font-size: 18px;
  font-weight: 600 !important;
  color: #111827;
  margin: 0 0 16px 0;
  font-family: inherit;
  padding-left: 0;
}

.bundle-products-container {
  overflow: hidden;
  position: relative;
  cursor: grab;
  padding: 0 0px;
}

.bundle-products-container.grabbing {
  cursor: grabbing;
}

.bundle-products-scroll {
  display: flex;
  gap: 12px;
  padding: 8px 0;
  margin-left: 0;
  transition: transform 0.5s cubic-bezier(0.23, 1, 0.32, 1); 
  will-change: transform;
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

.bundle-products-scroll.no-transition {
  transition: none;
}

.bundle-product {
  flex: 0 0 160px;
  background: transparent;
  border-radius: 0;
  padding: 0;
  text-align: center;
  border: none;
  transition: all 0.2s ease;
  box-shadow: none;
  margin: 0;
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

.bundle-product-image {
  width: 100%;
  height: 135px;
  border-radius: 0;
  overflow: hidden;
  background: transparent;
  margin-bottom: 8px;
}

.bundle-product-image img {
  width: 100%;
  height: 100%;
  object-fit: contain;
  transition: opacity 0.3s ease;
}

.bundle-product-title {
  font-size: 14px;
  font-weight: 600;
  color: #111827;
  margin: 0 0 4px 0;
  line-height: 1.3;
  font-family: inherit;
  padding: 0;
  text-align: center;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.bundle-product-price {
  font-size: 14px;
  color: #111827;
  font-weight: 600;
  margin: 6px 0 0 0;
  padding: 0;
  text-align: center;
}

.bundle-product-gray-box {
  background: #f3f4f6;
  border-radius: 8px;
  margin-bottom: 8px;
  overflow: hidden;
  padding: 12px;
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
}

.bundle-product-variants {
  display: flex;
  justify-content: center;
  gap: 4px;
  margin: 8px 0;
}

.variant-dot {
  cursor: pointer;
  transition: all 0.2s ease;
  width: 20px;
  height: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.variant-dot .dot {
  width: 16px;
  height: 16px;
  border: 2px solid #d1d5db;
  border-radius: 50%;
  background: #ffffff;
  transition: all 0.2s ease;
}

.variant-dot.selected .dot {
  border-color: #111827;
  background: #111827;
  box-shadow: 0 0 0 2px #fff, 0 0 0 3px #111827;
}

.variant-dot:hover .dot {
  transform: scale(1.1);
  border-color: #111827;
}

.bundle-product-material {
  font-size: 12px;
  color: #996515;
  font-weight: 600;
  margin: 8px 0 0 0;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  text-align: center;
}

.add-to-bag-btn, .bundle-cart-btn {
  width: 100%;
  background: #037e85;
  color: #ffffff;
  border: none;
  padding: 8px 16px;
  border-radius: 9999px;
  font-size: 12px;
  margin-top: 8px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  font-family: inherit;
  
  letter-spacing: 0.5px;
  position: relative;
}

.add-to-bag-btn:hover, .bundle-cart-btn:hover {
  background: #026068;
}

.add-to-bag-btn.is-loading, .bundle-cart-btn.is-loading {
  opacity: 0.7;
  pointer-events: none;
}

.add-to-bag-btn.is-loading::after, .bundle-cart-btn.is-loading::after {
  content: "";
  position: absolute;
  width: 12px;
  height: 12px;
  top: 50%;
  left: 50%;
  margin-left: -6px;
  margin-top: -6px;
  border: 2px solid #ffffff;
  border-radius: 50%;
  border-top-color: transparent;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

/* Loading states for quantity and remove buttons */
.quantity-btn.is-loading,
.cart-item-remove.is-loading {
  opacity: 0.7;
  pointer-events: none;
  position: relative;
}

.quantity-btn.is-loading::after,
.cart-item-remove.is-loading::after {
  content: "";
  position: absolute;
  width: 12px;
  height: 12px;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  border: 2px solid #6b7280;
  border-radius: 50%;
  border-top-color: transparent;
  animation: spin 1s linear infinite;
  z-index: 1;
}

.quantity-btn.is-loading svg,
.cart-item-remove.is-loading svg {
  opacity: 0;
}

/* Checkout Section */
.checkout-section {
  background: #ffffff;
  padding: 20px 16px 24px;
  position: sticky;
  bottom: 0;
  z-index: 10;
  box-shadow: 0 -4px 12px rgba(0, 0, 0, 0.1);
}

.discount-code-section {
  display: flex;
  gap: 12px;
  margin-bottom: 12px;
}

.discount-input {
  flex: 1;
  padding: 8px 16px;
  width: 371px;
  border: 1px solid #d1d5db;
  border-radius: 8px;
  font-size: 14px;
  font-family: inherit;
}

.discount-input:focus {
  outline: none;
  border-color: #2dd4bf;
  box-shadow: 0 0 0 3px rgba(45, 212, 191, 0.1);
}

.apply-discount-btn {
  background: black;
  color: #ffffff;
  border: none;
  padding: 8px 9px;
  border-radius: 9999px;
  font-size: 12px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  font-family: inherit;
  white-space: nowrap;
  width: 42%;
}

.apply-discount-btn:hover {
  background: #374151;
}

/* Applied Discount Codes Section */
.applied-discounts-section {
  margin-bottom: 12px;
}

.discount-tag {
  display: inline-flex;
  align-items: center;
  gap: 6px;
  background: #f0f9ff;
  border: 1px solid #0891b2;
  border-radius: 6px;
  padding: 6px 8px;
  margin: 4px 0;
  font-size: 12px;
  color: #0891b2;
}

.discount-tag-icon {
  font-size: 14px;
}

.discount-tag-text {
  font-weight: 600;
  letter-spacing: 0.5px;
  text-transform: uppercase;
}

.discount-tag-remove {
  background: none;
  border: none;
  color: #0891b2;
  cursor: pointer;
  padding: 2px;
  border-radius: 3px;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.discount-tag-remove:hover {
  background: #0891b2;
  color: white;
}

.discount-tag-remove svg {
  width: 14px;
  height: 14px;
}

.savings-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 16px;
}

.savings-label {
  font-size: 14px;
  color: #111827;
}

.savings-amount {
  font-size: 14px;
  font-weight: 500;
  margin-right:225px;
  color: #111827;
}

.shipping-info {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 24px;
  margin-top: 18px;
}

.shipping-text {
  flex: 1;
}

.shipping-text p {
  font-size: 14px;
  color: #111827;
  margin: 0 0 12px 0;
}

.payment-methods {
  display: flex;
  gap: 4px;
  flex-wrap: wrap;
}

.payment-icon {
  height: 24px;
  width: 40px;
  max-width: 40px;
  opacity: 0.8;
  transition: all 0.2s ease;
  filter: grayscale(20%);
  border-radius: 4px;
  object-fit: contain;
  display: block;
}

.payment-icon:hover {
  opacity: 1;
  filter: grayscale(0%);
  transform: scale(1.05);
}

.shipping-totals {
  text-align: right;
  margin-left: 16px;
  min-width: 270px;
}

.shipping-row, .total-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 12px;
      margin-right: 99px;
}

.shipping-row:last-child {
  margin-bottom: 0;
}

.shipping-label, .total-label {
  font-size: 14px;
  color: #111827;
}

.shipping-cost {
  font-size: 14px;
  font-weight: 500;
  color: #111827;
}

.saving-cost {
  font-size: 14px;
  font-weight: 500;
  color: #111827;
}

.total-label {
  font-weight: 500;
}

.total-amount {
  font-size: 14px;
  font-weight: 600;
  color: #111827;
}

.checkout-btn {
  width: 100%;
  background: black;
  color: #ffffff;
  border: none;
  padding: 9px 24px;
  border-radius: 9999px;
  font-size: 18px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  font-family: inherit;
}

.checkout-btn:hover:not(:disabled) {
  background: #374151;
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(17, 24, 39, 0.3);
}

.checkout-btn:disabled {
  background: #9ca3af;
  cursor: not-allowed;
  transform: none;
  box-shadow: none;
}

/* Apply discount button loading state */
.apply-discount-btn.is-loading {
  background: #9ca3af;
  cursor: not-allowed;
  position: relative;
  color: transparent;
}

.apply-discount-btn.is-loading::after {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 16px;
  height: 16px;
  border: 2px solid #ffffff;
  border-top: 2px solid transparent;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

/* Discount input field states */
.discount-input.success {
  border-color: #10b981 !important;
  background-color: #f0fdf4 !important;
  box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1) !important;
}

.discount-input.error {
  border-color: #ef4444 !important;
  background-color: #fef2f2 !important;
  box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1) !important;
}

/* Loading spinner for cart items */
.r-prod-row.is-loading {
  opacity: 0.5;
  pointer-events: none;
}

.spinner {
  display: none;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 20px;
  height: 20px;
  border: 2px solid #f3f3f3;
  border-top: 2px solid #3498db;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

.r-prod-row.is-loading .spinner {
  display: block;
}

@keyframes spin {
  0% { transform: translate(-50%, -50%) rotate(0deg); }
  100% { transform: translate(-50%, -50%) rotate(360deg); }
}

/* Responsive Design */
@media (max-width: 1024px) {
  .cart-content {
    width: 640px;
  }
}

@media (max-width: 768px) {
  .cart-content {
    width: 520px;
  }
  
  .free-shipping-progress {
    padding: 12px 12px 16px;
  }
  
  .free-shipping-progress .free-shipping-progress-text {
    font-size: 13px;
  }
  
  .cart-header {
    padding: 12px;
  }
  
  .cart-title {
    font-size: 16px;
  }
  
  
  
  .cart-item {
    display: grid;
    grid-template-columns: 60px 1fr 1fr 2fr 0fr;
    padding: 16px 0;
    gap: 10px;
  }
  
  .cart-item-image {
    width: 56px;
    height: 56px;
    grid-column: 1;
  }
  
  .cart-item-title {
    font-size: 14px;
  }
  
  .cart-item-variant {
    font-size: 12px;
  }
  
  .quantity-btn {
    width: 28px;
    height: 28px;
  }
  
  .quantity-input {
    width: 32px;
    font-size: 12px;
  }
  
  .main-price {
    font-size: 14px;
  }
  
  .bundle-title {
    font-size: 16px;
    margin-bottom: 12px;
  }
  
  .bundle-product {
    flex: 0 0 130px;
  }
  
  .bundle-product-image {
    height: 110px;
  }
  
  .bundle-product-title {
    font-size: 12px;
  }
  
  .bundle-product-price {
    font-size: 12px;
  }
  
  .checkout-section {
    padding: 16px 12px 20px;
  }
  
  .discount-input {
    width: 280px;
    padding: 6px 12px;
    font-size: 13px;
  }
  
  .apply-discount-btn {
    padding: 6px 8px;
    font-size: 11px;
    width: 32%;
  }
  
  .shipping-text p {
    font-size: 12px;
  }
  
  .payment-icon {
    height: 20px;
    width: 32px;
    max-width: 32px;
  }
  
  .checkout-btn {
    padding: 8px 20px;
    font-size: 16px;
  }
}

@media (max-width: 640px) {
  .cart-content {
    width: 470px;
  }
  
  .cart-item-details {
    grid-column: 2;
  }
  
  .cart-item-quantity {
    grid-column: 3;
  }
  
  .cart-item-pricing {
    grid-column: 4;
    min-width: 70px;
  }
  
  .cart-item-remove-container {
    grid-column: 5;
  }
  
  .bundle-product {
    flex: 0 0 120px;
  }
  
  .bundle-product-image {
    height: 100px;
  }
  
  .discount-input {
    width: 240px;
  }
  
  .shipping-totals {
    min-width: 160px;
  }
}

@media (max-width: 480px) {
  .cart-content {
    width: 100%;
    height: 100vh;
  }
  
  .free-shipping-progress {
    padding: 10px 12px 14px;
  }
  
  .cart-header {
    padding: 12px;
  }
  
  .cart-title {
    font-size: 16px;
  }
  
  .cart-items-container {
    padding: 0 12px;
  }
  
  .cart-item {
    display: grid;
    grid-template-columns: 50px 1fr 1fr 2fr 0fr;
    padding: 14px 0;
    gap: 8px;
    align-items: flex-start;
  }
  
  .cart-item-image {
    width: 50px;
    height: 50px;
    grid-column: 1;
  }
  
  .cart-item-details {
    grid-column: 2;
    min-width: 0;
  }
  
  .cart-item-title {
    font-size: 13px;
    line-height: 1.2;
    margin-bottom: 2px;
  }
  
  .cart-item-variant {
    font-size: 11px;
  }
  
  .cart-item-quantity {
    grid-column: 3;
  }
  
  .quantity-btn {
    width: 24px;
    height: 24px;
  }
  
  .quantity-btn svg {
    width: 12px;
    height: 12px;
  }
  
  .quantity-input {
    width: 28px;
    font-size: 11px;
  }
  
  .cart-item-pricing {
    grid-column: 4;
    text-align: right;
    min-width: 60px;
  }
  
  .current-price, .original-price-top {
    font-size: 13px;
    margin-left: 46px;
  }
  
  .price-comparison {
    margin-top: 2px;
  }
  
  .original-price, .discounted-price {
    font-size: 10px;
  }
  
  .savings {
    font-size: 10px;
  }
  
  .cart-item-remove-container {
    grid-column: 5;
  }
  
  .cart-item-remove svg {
    width: 16px;
    height: 16px;
  }
  
  .bundle-save-section {
    margin: 0;
  }
  
  .bundle-title {
    font-size: 15px;
    margin-bottom: 10px;
  }
  
  .bundle-product {
    flex: 0 0 110px;
  }
  
  .bundle-product-image {
    height: 90px;
  }
  
  .bundle-product-title {
    font-size: 11px;
    line-height: 1.2;
  }
  
  .bundle-product-price {
    font-size: 11px;
  }
  
  .bundle-product-material {
    font-size: 10px;
  }
  
  .add-to-bag-btn, .bundle-cart-btn {
    font-size: 10px;
    padding: 6px 12px;
  }
  
  .checkout-section {
    padding: 14px 12px 18px;
  }
  
  .discount-code-section {
    flex-direction: column;
    gap: 8px;
    margin-bottom: 10px;
  }
  
  .discount-input {
    width: 100%;
    padding: 8px 12px;
  }
  
  .apply-discount-btn {
    width: 100%;
    padding: 8px 16px;
    font-size: 12px;
  }
  
  .shipping-info {
    flex-direction: column;
    gap: 12px;
    margin-bottom: 16px;
  }
  
  .shipping-text p {
    font-size: 11px;
    margin-bottom: 8px;
  }
  
  .payment-methods {
    gap: 3px;
  }
  
  .payment-icon {
    height: 18px;
    width: 28px;
    max-width: 28px;
  }
  
  .shipping-totals {
    margin-left: 0;
    text-align: left;
    min-width: auto;
    width: 100%;
  }
  
  .shipping-row, .total-row {
    margin-bottom: 8px;
  }
  
  .shipping-label, .total-label, .shipping-cost, .total-amount {
    font-size: 12px;
  }
  
  .checkout-btn {
    padding: 10px 20px;
    font-size: 15px;
  }
  
  .savings-amount {
    margin-right: 0;
  }
}

@media (max-width: 360px) {
  .cart-content {
    width: 100%;
  }
  
  .free-shipping-progress {
    padding: 8px 10px 12px;
  }
  
  .free-shipping-progress .free-shipping-progress-text {
    font-size: 11px;
  }
  
  .cart-header {
    padding: 10px;
  }
  
  .cart-items-container {
    padding: 0 10px;
  }
  
  .cart-item {
    display: grid;
    grid-template-columns: 45px 1fr 1fr 2fr 0fr;
    padding: 12px 0;
    gap: 6px;
    align-items: flex-start;
  }
  
  .cart-item-image {
    width: 45px;
    height: 45px;
    grid-column: 1;
  }
  
  .cart-item-details {
    grid-column: 2;
    min-width: 0;
  }
  
  .cart-item-title {
    font-size: 12px;
    line-height: 1.1;
    margin-bottom: 1px;
  }
  
  .cart-item-variant {
    font-size: 10px;
  }
  
  .cart-item-quantity {
    grid-column: 3;
  }
  
  .quantity-btn {
    width: 22px;
    height: 22px;
  }
  
  .quantity-btn svg {
    width: 10px;
    height: 10px;
  }
  
  .quantity-input {
    width: 24px;
    font-size: 10px;
  }
  
  .cart-item-pricing {
    grid-column: 4;
    min-width: 50px;
  }
  
  .cart-item-remove-container {
    grid-column: 5;
  }
  
  .current-price, .original-price-top {
    font-size: 12px;
  }
  
  .original-price, .discounted-price {
    font-size: 9px;
  }
  
  .savings {
    font-size: 9px;
  }
  
  .cart-item-remove svg {
    width: 14px;
    height: 14px;
  }
  
  .bundle-product {
    flex: 0 0 100px;
  }
  
  .bundle-product-image {
    height: 80px;
  }
  
  .checkout-section {
    padding: 12px 10px 16px;
  }
}
</style>

<script>
// Configure Shopify money formatting
if (typeof Shopify === 'undefined') {
  window.Shopify = {};
}
Shopify.money_format = "{{ shop.money_format | strip_html }}";

// Add formatMoney function to Shopify object if not available
if (typeof Shopify.formatMoney !== 'function') {
  Shopify.formatMoney = function(cents, format) {
    if (typeof cents === 'string') {
      cents = cents.replace('.', '');
    }
    var value = '';
    var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
    var formatString = (format || this.money_format);
    
    function formatWithDelimiters(number, precision, thousands, decimal) {
      precision = precision || 2;
      thousands = thousands || ',';
      decimal = decimal || '.';
      
      if (isNaN(number) || number == null) {
        return 0;
      }
      
      number = (number / 100.0).toFixed(precision);
      
      var parts = number.split('.');
      var dollarsAmount = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands);
      var centsAmount = parts[1] ? (decimal + parts[1]) : '';
      
      return dollarsAmount + centsAmount;
    }
    
    switch (formatString.match(placeholderRegex)[1]) {
      case 'amount':
        value = formatWithDelimiters(cents, 2);
        break;
      case 'amount_no_decimals':
        value = formatWithDelimiters(cents, 0);
        break;
      case 'amount_with_comma_separator':
        value = formatWithDelimiters(cents, 2, '.', ',');
        break;
      case 'amount_no_decimals_with_comma_separator':
        value = formatWithDelimiters(cents, 0, '.', ',');
        break;
    }
    
    return formatString.replace(placeholderRegex, value);
  };
}

// Listen for cart refresh events from cart.js
$(document).on('cart:refresh', function() {
  // Add a small delay to ensure DOM is ready
  setTimeout(function() {
    updateBundleProductsWithHTML(); // Use full HTML refresh for product page additions
  }, 50);
});

// Listen for cart refresh complete events
$(document).on('cart:refresh-complete', function() {
  // Ensure cart content is visible after refresh
  setTimeout(function() {
    if ($('.r-side-cart').hasClass('active')) {
      // Check if cart is empty
      var cartItemCount = parseInt($('.cart-title').text().match(/\d+/)) || 0;
      
      if (cartItemCount === 0) {
        // Show empty cart state
        $('.cart-items-container').html('<div class="empty-cart"><p style="text-align:center; padding: 40px 0;">Cart is empty</p></div>');
        $('.checkout-section').hide().addClass('hidden-when-empty');
        $('.bundle-save-section').hide();
        $('.free-shipping-progress').show(); // Keep free shipping progress visible
        
        // Update free shipping progress for empty cart
        updateFreeShippingProgress(0);
      } else {
        // Show cart content
        $('.Cart_Drawer__Content').show();
        $('.empty-cart').hide();
      }
    }
  }, 100);
});




// Format money helper function using Shopify's money format
function formatMoney(cents) {
  // Convert to number if it's a string
  if (typeof cents === 'string') {
    cents = parseFloat(cents);
  }
  
  // Handle invalid input
  if (isNaN(cents)) {
    cents = 0;
  }
  
  // Use Shopify's formatMoney function
  if (typeof Shopify !== 'undefined' && typeof Shopify.formatMoney === 'function') {
    return Shopify.formatMoney(cents, Shopify.money_format);
  }
  
  // Ultimate fallback to USD format if Shopify is not available
  var dollars = cents / 100;
  return "$" + dollars.toFixed(2);
}





// Bundle slide navigation class
class BundleSlideNavigation {
  constructor() {
    // Call setupBundleDragAndTouch directly
    setTimeout(() => {
      this.setupBundleDragAndTouch();
      this.setupVariantSelection();
    }, 300);
  }

  setupBundleDragAndTouch() {
    const bundleContainer = document.getElementById('bundle-products-scroll');
    if (!bundleContainer) {
      return;
    }

    let currentIndex = 0;
    let cardWidth;
    let totalCards;
    let visibleCards;
    let isDragging = false;
    let startPos = 0;
    let currentTranslate = 0;
    let prevTranslate = 0;
    let animationID = 0;
    let clickPrevented = false;
    let lastDeltaX = 0;
    let hasDragged = false;
    let dragStartTime = 0;
    let dragThreshold = 10;

    // Calculate dimensions
    function calculateDimensions() {
      const bundleProducts = bundleContainer.querySelectorAll('.bundle-product');
      if (bundleProducts.length === 0) return;
      
      totalCards = bundleProducts.length;
      const firstCard = bundleProducts[0];
      const style = window.getComputedStyle(firstCard);
      const marginLeft = parseInt(style.marginLeft) || 0;
      const marginRight = parseInt(style.marginRight) || 0;
      
      cardWidth = firstCard.offsetWidth + marginLeft + marginRight;
      
      const containerWidth = bundleContainer.parentElement.offsetWidth;
      visibleCards = Math.floor(containerWidth / cardWidth);
      visibleCards = Math.max(1, visibleCards);
    }

    // Initialize
    calculateDimensions();
    updateBundlePosition();

    // Handle window resize
    window.addEventListener('resize', function() {
      calculateDimensions();
      if (currentIndex > totalCards - visibleCards) {
        currentIndex = Math.max(0, totalCards - visibleCards);
      }
      updateBundlePosition();
    });

    // Update bundle position
    function updateBundlePosition() {
      if (isNaN(cardWidth) || cardWidth <= 0) {
        calculateDimensions();
        if (isNaN(cardWidth) || cardWidth <= 0) return;
      }
      const translateX = -currentIndex * cardWidth;
      bundleContainer.style.transform = `translateX(${translateX}px)`;
    }

    // Check if target is interactive
    function isInteractiveTarget(target) {
      return target.closest('.variant-dot') || 
             target.closest('.bundle-cart-btn') || 
             target.closest('button') ||
             target.closest('input') ||
             target.closest('select');
    }

    // Prevent link clicks during drag
    bundleContainer.addEventListener('click', function(e) {
      if (hasDragged) {
        e.preventDefault();
        e.stopPropagation();
        hasDragged = false;
      }
    });

    // Mouse drag support
    let mouseStartTime = 0;
    let mouseStartX = 0;
    let mouseLastX = 0;
    let mouseLastTime = 0;

    bundleContainer.addEventListener('mousedown', function(e) {
      if (isInteractiveTarget(e.target)) {
        return;
      }
      if (e.button !== 0) return;
      e.preventDefault();
      isDragging = true;
      clickPrevented = false;
      hasDragged = false;
      dragStartTime = Date.now();
      mouseStartX = startPos = e.clientX;
      mouseLastX = e.clientX;
      mouseStartTime = mouseLastTime = Date.now();
      prevTranslate = -currentIndex * cardWidth;
      bundleContainer.classList.add('no-transition');
      bundleContainer.parentElement.classList.add('grabbing');
      cancelAnimationFrame(animationID);
      animationID = requestAnimationFrame(animation);
    });

    window.addEventListener('mousemove', function(e) {
      if (!isDragging) return;
      const currentPosition = e.clientX;
      const diff = currentPosition - mouseStartX;
      lastDeltaX = diff;
      currentTranslate = prevTranslate + diff;
      mouseLastX = currentPosition;
      mouseLastTime = Date.now();
      
      const maxTranslate = 0;
      const minTranslate = -(totalCards - visibleCards) * cardWidth;
      if (currentTranslate > maxTranslate) {
        currentTranslate = maxTranslate + diff * 0.3;
      } else if (currentTranslate < minTranslate) {
        currentTranslate = minTranslate + diff * 0.3;
      }
      
      if (Math.abs(diff) > dragThreshold) {
        clickPrevented = true;
        hasDragged = true;
      }
    });

    function mouseDragEnd(e) {
      if (!isDragging) return;
      
      const dragDuration = Date.now() - dragStartTime;
      const movedBy = mouseLastX - mouseStartX;
      
      if (dragDuration < 200 && Math.abs(movedBy) < dragThreshold) {
        isDragging = false;
        bundleContainer.classList.remove('no-transition');
        bundleContainer.parentElement.classList.remove('grabbing');
        cancelAnimationFrame(animationID);
        return;
      }
      
      isDragging = false;
      bundleContainer.classList.remove('no-transition');
      bundleContainer.parentElement.classList.remove('grabbing');
      
      const timeElapsed = (mouseLastTime - mouseStartTime) || 1;
      const velocity = movedBy / timeElapsed;
      let targetIndex = currentIndex;
      
      const flickVelocity = 0.5;
      if (cardWidth > 0) {
        if (Math.abs(velocity) > flickVelocity) {
          if (velocity < 0) {
            targetIndex = Math.min(totalCards - visibleCards, currentIndex + 2);
          } else {
            targetIndex = Math.max(0, currentIndex - 2);
          }
        } else if (Math.abs(movedBy) > cardWidth * 0.15) {
          if (movedBy < 0) {
            targetIndex = Math.min(totalCards - visibleCards, currentIndex + 2);
          } else {
            targetIndex = Math.max(0, currentIndex - 2);
          }
        } else {
          targetIndex = currentIndex;
        }
      }
      
      targetIndex = Math.max(0, Math.min(totalCards - visibleCards, targetIndex));
      currentIndex = targetIndex;
      updateBundlePosition();
      
      cancelAnimationFrame(animationID);
      setTimeout(() => {
        clickPrevented = false;
      }, 550);
    }

    window.addEventListener('mouseup', mouseDragEnd);
    bundleContainer.addEventListener('mouseleave', mouseDragEnd);

    // Touch swipe support for mobile
    let touchStartX = 0;
    let touchStartY = 0;
    let touchCurrentX = 0;
    let touchStartTime = 0;
    let touchPrevTranslate = 0;
    let touchIsDragging = false;
    let touchHasDragged = false;
    let touchDirection = null;

    bundleContainer.addEventListener('touchstart', function(e) {
      if (isInteractiveTarget(e.target)) {
        return;
      }
      if (e.touches.length !== 1) return;
      touchIsDragging = true;
      touchHasDragged = false;
      touchDirection = null;
      dragStartTime = Date.now();
      touchStartX = e.touches[0].clientX;
      touchStartY = e.touches[0].clientY;
      touchCurrentX = e.touches[0].clientX;
      touchStartTime = Date.now();
      touchPrevTranslate = -currentIndex * cardWidth;
      bundleContainer.classList.add('no-transition');
      bundleContainer.parentElement.classList.add('grabbing');
    }, { passive: true });

    bundleContainer.addEventListener('touchmove', function(e) {
      if (!touchIsDragging || e.touches.length !== 1) return;

      const currentX = e.touches[0].clientX;
      const currentY = e.touches[0].clientY;

      if (touchDirection === null) {
        const deltaX = Math.abs(currentX - touchStartX);
        const deltaY = Math.abs(currentY - touchStartY);

        if (deltaX > 5 || deltaY > 5) {
          if (deltaX > deltaY) {
            touchDirection = 'horizontal';
          } else {
            touchDirection = 'vertical';
          }
        }
      }

      if (touchDirection === 'horizontal') {
        e.preventDefault();
        touchCurrentX = currentX;
        const diff = touchCurrentX - touchStartX;
        currentTranslate = touchPrevTranslate + diff;
        
        const maxTranslate = 0;
        const minTranslate = -(totalCards - visibleCards) * cardWidth;
        if (currentTranslate > maxTranslate) {
          currentTranslate = maxTranslate + diff * 0.3;
        } else if (currentTranslate < minTranslate) {
          currentTranslate = minTranslate + diff * 0.3;
        }
        
        bundleContainer.style.transform = `translateX(${currentTranslate}px)`;
        
        if (Math.abs(diff) > dragThreshold) {
          touchHasDragged = true;
          hasDragged = true;
        }
      }
    }, { passive: false });

    bundleContainer.addEventListener('touchend', function(e) {
      if (!touchIsDragging) return;

      const wasHorizontal = touchDirection === 'horizontal';
      
      touchIsDragging = false;
      touchDirection = null;

      if (!wasHorizontal) {
        return;
      }
      
      const dragDuration = Date.now() - dragStartTime;
      const movedBy = touchCurrentX - touchStartX;
      
      if (dragDuration < 200 && Math.abs(movedBy) < dragThreshold) {
        bundleContainer.classList.remove('no-transition');
        bundleContainer.parentElement.classList.remove('grabbing');
        return;
      }
      
      bundleContainer.classList.remove('no-transition');
      bundleContainer.parentElement.classList.remove('grabbing');
      
      const timeElapsed = (Date.now() - touchStartTime) || 1;
      const velocity = movedBy / timeElapsed;
      let targetIndex = currentIndex;
      const flickVelocity = 0.5;
      
      if (cardWidth > 0) {
        if (Math.abs(velocity) > flickVelocity) {
          if (velocity < 0) {
            targetIndex = Math.min(totalCards - visibleCards, currentIndex + 2);
          } else {
            targetIndex = Math.max(0, currentIndex - 2);
          }
        } else if (Math.abs(movedBy) > cardWidth * 0.15) {
          if (movedBy < 0) {
            targetIndex = Math.min(totalCards - visibleCards, currentIndex + 2);
          } else {
            targetIndex = Math.max(0, currentIndex - 2);
          }
        }
      }
      
      targetIndex = Math.max(0, Math.min(totalCards - visibleCards, targetIndex));
      currentIndex = targetIndex;
      updateBundlePosition();
      
      setTimeout(() => {
        hasDragged = false;
      }, 550);
    });

    // Animation function
    function animation() {
      if (isDragging) {
        bundleContainer.style.transform = `translateX(${currentTranslate}px)`;
        animationID = requestAnimationFrame(animation);
      }
    }
  }
  
  // Setup variant selection for bundle products
  setupVariantSelection() {
    const bundleContainer = document.getElementById('bundle-products-scroll');
    if (!bundleContainer) return;
    
    // Handle variant dot clicks
    bundleContainer.addEventListener('click', function(e) {
      const variantDot = e.target.closest('.variant-dot');
      if (variantDot) {
        e.preventDefault();
        const productId = variantDot.closest('.bundle-product').dataset.productId;
        const variantId = variantDot.dataset.variantId;
        const variantIndex = variantDot.dataset.variantIndex;
        
        // Update selected variant dot
        const productContainer = variantDot.closest('.bundle-product');
        const variantDots = productContainer.querySelectorAll('.variant-dot');
        variantDots.forEach(dot => {
          dot.classList.remove('selected');
        });
        variantDot.classList.add('selected');
        
        // Update the Add to Bag button with the selected variant ID
        const addToBagBtn = productContainer.querySelector('.bundle-cart-btn');
        if (addToBagBtn) {
          addToBagBtn.dataset.variantId = variantId;
        }
        
        // Update the fabric name
        const materialElement = productContainer.querySelector('.bundle-product-material');
        if (materialElement) {
          const fabric = variantDot.dataset.fabric || '';
          materialElement.textContent = fabric;
        }
        
        // Update product image based on selected variant
        const productImage = productContainer.querySelector('.bundle-product-image img');
        if (productImage) {
          // Get variant data from window object (would be populated by AJAX)
          const variantData = window[`bundleProductVariants_${productId}`];
          if (variantData && variantData[variantIndex]) {
            const variant = variantData[variantIndex];
            if (variant.featured_image && variant.featured_image.url) {
              // Add a small delay to ensure smooth transition
              productImage.style.opacity = '0.5';
              setTimeout(() => {
                productImage.src = variant.featured_image.url;
                productImage.alt = variant.title;
                productImage.style.opacity = '1';
              }, 100);
            }
          }
        }
              
        // Update product price based on selected variant
        const productPrice = productContainer.querySelector('.bundle-product-price');
        if (productPrice) {
          const variantData = window[`bundleProductVariants_${productId}`];
          if (variantData && variantData[variantIndex]) {
            const variant = variantData[variantIndex];
            if (variant.price) {
              // Format price using existing formatMoney function
              const newPrice = formatMoney(variant.price);
              productPrice.textContent = newPrice;
            }
          }
        }
      }
    });
  }
}

// Function to apply discount code
function applyDiscountCode(code) {
  if (!code) {
    alert("Please enter a discount code");
    return;
  }
  
  // Add loading state to the apply button
  $('#apply-discount').prop("disabled", true).addClass("is-loading");
  
  // Apply discount code directly (faster approach)
  $.ajax({
    type: "POST",
    url: "/cart/update.js",
    dataType: "json",
    data: {
      'discount': code
    },
    success: function(newCart) {
      // Check if discount was actually applied
      var discountApplied = false;
      
      // Method 1: Check if the specific code exists AND is applicable
      if (newCart.discount_codes) {
        var codeExistsAndApplicable = newCart.discount_codes.some(function(dc) {
          return dc.code === code && dc.applicable === true;
        });
        if (codeExistsAndApplicable) {
          discountApplied = true;
        }
      }
      
      // Method 2: Check if the specific code exists in discount_codes (even if not applicable)
      // This helps identify if the code was recognized by Shopify
      if (newCart.discount_codes) {
        var codeExists = newCart.discount_codes.some(function(dc) {
          return dc.code === code;
        });
        if (codeExists) {
          // Check if it's applicable
          var codeData = newCart.discount_codes.find(function(dc) {
            return dc.code === code;
          });
          if (codeData && codeData.applicable === true) {
            discountApplied = true;
          } else {
            discountApplied = false;
          }
        } else {
          discountApplied = false;
        }
      }
      
      if (discountApplied) {
        // Refresh cart content completely to show updated prices, savings, and discount tags
        refreshCartAfterDiscount(newCart);
        
        // Show success visual feedback
        $('#discount-code').removeClass('error').addClass('success').val('');
        setTimeout(function() {
          $('#discount-code').removeClass('success');
        }, 3000);
      } else {
        // Show error visual feedback
        $('#discount-code').removeClass('success').addClass('error');
        setTimeout(function() {
          $('#discount-code').removeClass('error');
        }, 3000);
      }
      
      // Remove loading state
      $('#apply-discount').prop("disabled", false).removeClass("is-loading");
    },
    error: function(XMLHttpRequest, textStatus) {
      // Handle error - Shopify will return error for invalid codes
      $('#discount-code').removeClass('success').addClass('error');
      setTimeout(function() {
        $('#discount-code').removeClass('error');
      }, 3000);
      
      // Remove loading state
      $('#apply-discount').prop("disabled", false).removeClass("is-loading");
    }
  });
}

// Function to remove discount code
function removeDiscountCode(code) {
  // Add loading state to the remove button
  $('.discount-tag-remove[data-code="' + code + '"]').prop("disabled", true);
  
  // Remove discount code by updating cart without it
  $.ajax({
    type: "POST",
    url: "/cart/update.js",
    dataType: "json",
    data: {
      'discount': '' // Clearing discount codes
    },
    success: function(newCart) {
      // Refresh cart content completely to show updated prices and remove discount tags
      refreshCartAfterDiscount(newCart);
      
      // Remove loading state
      $('.discount-tag-remove').prop("disabled", false);
    },
    error: function(xhr, status, error) {
      console.error('Error removing discount code:', error);
      alert('Error removing discount code. Please try again.');
      
      // Remove loading state
      $('.discount-tag-remove').prop("disabled", false);
    }
  });
}

// Function to refresh cart after discount application/removal
function refreshCartAfterDiscount(cartData) {
  // Full HTML refresh to show updated discount information
  $.ajax({
    type: "GET",
    url: "/cart",
    dataType: "html",
    cache: false,
    success: function(html) {
      var $cartHtml = $(html);
      var $newCartSection = $cartHtml.find('.r-side-cart');
      
      if ($newCartSection.length > 0) {
        // Get current cart state
        var wasActive = $('.r-side-cart').hasClass('active');
        var bodyHasCartOpen = $('body').hasClass('g-cart-open');
        
        // Replace cart content with fresh server HTML
        $('.r-side-cart').html($newCartSection.html());
        
        // Restore cart state
        if (wasActive) {
          $('.r-side-cart').addClass('active');
        }
        if (bodyHasCartOpen) {
          $('body').addClass('g-cart-open');
        }
        
        // Update cart counts from the fresh HTML
        var cartCount = $cartHtml.find('.count').text() || cartData.item_count.toString();
        $(".count").html(cartCount);
        $("#cart-count").html(cartCount);
        $(".hcart").html(cartCount);
        
        // Update cart title
        $('.cart-title').text('Your bag (' + cartCount + ')');
        
        // Show/hide applied discounts section
        updateAppliedDiscountsDisplay(cartData);
        
        // Re-initialize bundle functionality after cart update
        setTimeout(function() {
          new BundleSlideNavigation();
          initializeBundleProductImages();
          hideProductsAlreadyInCart();
        }, 50);
        
      } else {
        // Fallback to data-only update
        updateTotalSavingsDisplay(cartData);
        updateCartTotalsOnly(cartData);
        updateAppliedDiscountsDisplay(cartData);
      }
    },
    error: function(xhr, status, error) {
      console.error('Error refreshing cart after discount:', error);
      // Fallback to data-only update
      updateTotalSavingsDisplay(cartData);
      updateCartTotalsOnly(cartData);
      updateAppliedDiscountsDisplay(cartData);
    }
  });
}

// Function to update applied discounts display
function updateAppliedDiscountsDisplay(cartData) {
  var $appliedDiscountsSection = $('#applied-discounts');
  
  if (cartData.discount_codes && cartData.discount_codes.length > 0) {
    var hasApplicableDiscounts = cartData.discount_codes.some(function(dc) {
      return dc.applicable === true;
    });
    
    if (hasApplicableDiscounts) {
      // Build discount tags HTML
      var discountTagsHTML = '';
      cartData.discount_codes.forEach(function(discount_code) {
        if (discount_code.applicable) {
          discountTagsHTML += `
            <div class="discount-tag" data-code="${discount_code.code}">
              <span class="discount-tag-icon">🏷️</span>
              <span class="discount-tag-text">${discount_code.code}</span>
              <button class="discount-tag-remove" data-code="${discount_code.code}" aria-label="Remove discount code">
                <svg viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
              </button>
            </div>
          `;
        }
      });
      
      $appliedDiscountsSection.html(discountTagsHTML).show();
    } else {
      $appliedDiscountsSection.hide();
    }
  } else {
    $appliedDiscountsSection.hide();
  }
}

// Function to hide products that are already in the cart
function hideProductsAlreadyInCart() {
  
  // Get all cart item product IDs
  var cartProductIds = [];
  $('.cart-item').each(function() {
    var $cartItem = $(this);
    var productId = $cartItem.find('.cart-item-image a').attr('href');
    if (productId) {
      // Extract product ID from URL (e.g., /products/product-handle)
      var matches = productId.match(/\/products\/([^\/\?]+)/);
      if (matches && matches[1]) {
        cartProductIds.push(matches[1]);
      }
    }
  });
  
  // Alternative method: check by data attributes if available
  $('.cart-item[data-variant-id]').each(function() {
    var variantId = $(this).data('variant-id');
    if (variantId) {
      // Find the corresponding bundle product by checking if any variant matches
      $('.bundle-product').each(function() {
        var $bundleProduct = $(this);
        var productId = $bundleProduct.data('product-id');
        
        // Check if this bundle product's variants include the cart variant
        var variantData = window[`bundleProductVariants_${productId}`];
        if (variantData) {
          for (var i = 0; i < variantData.length; i++) {
            if (variantData[i].id == variantId) {
              $bundleProduct.fadeOut(300, function() {
                $(this).remove();
              });
              return false; // Break out of the loop
            }
          }
        }
      });
    }
  });
  
  // Hide bundle products that match cart items
  $('.bundle-product').each(function() {
    var $bundleProduct = $(this);
    var bundleProductId = $bundleProduct.data('product-id');
    
    // Compare with cart items (this is a backup method)
    $('.cart-item-image a').each(function() {
      var cartProductUrl = $(this).attr('href');
      if (cartProductUrl && cartProductUrl.includes('/products/')) {
        // We'll need to compare by product ID when we have a reliable way to get it
        // For now, the server-side filtering should handle most cases
      }
    });
  });
}

// Function to initialize bundle product images with selected variants
function initializeBundleProductImages() {
  $('.bundle-product').each(function() {
    var $product = $(this);
    var productId = $product.data('product-id');
    var $selectedDot = $product.find('.variant-dot.selected');
    
    if ($selectedDot.length > 0) {
      var variantIndex = $selectedDot.data('variant-index');
      var variantData = window[`bundleProductVariants_${productId}`];
      
      if (variantData && variantData[variantIndex]) {
        var variant = variantData[variantIndex];
        var $productImage = $product.find('.bundle-product-image img');
        var $productPrice = $product.find('.bundle-product-price');
        var $materialElement = $product.find('.bundle-product-material');
        var $addToBagBtn = $product.find('.bundle-cart-btn');
        
        // Update image
        if (variant.featured_image && variant.featured_image.url && $productImage.length > 0) {
          $productImage.attr('src', variant.featured_image.url);
          $productImage.attr('alt', variant.title);
        }
        
        // Update price
        if (variant.price && $productPrice.length > 0) {
          $productPrice.text(formatMoney(variant.price));
        }
        
        // Update material
        if (variant.fabric && $materialElement.length > 0) {
          $materialElement.text(variant.fabric);
        }
        
        // Update add to bag button variant ID
        if ($addToBagBtn.length > 0) {
          $addToBagBtn.attr('data-variant-id', variant.id);
        }
      }
    }
  });
}

// Initialize bundle slide navigation
$(document).ready(function() {
  // Initialize on page load
  setTimeout(() => {
    new BundleSlideNavigation();
    initializeBundleProductImages();
    updateBundleProducts();
  }, 100);
  
  // Cart close functionality
  $(document).on('click', '.cart-close, .cart-overlay', function(e) {
    e.preventDefault();
    $('.r-side-cart').removeClass('active');
    $('body').removeClass('g-cart-open');
  });
  
  // Initialize on cart open
  $(document).on('click', '.cart-icon', function() {
    setTimeout(() => {
      new BundleSlideNavigation();
      initializeBundleProductImages();
      hideProductsAlreadyInCart(); // Hide products that are already in cart
    }, 300);
  });
  
  // Initialize after cart refresh
  $(document).on('cart:refresh-complete', function() {
    // Clear any stuck loading states immediately
    $('.bundle-cart-btn').prop("disabled", false).removeClass("is-loading");
  });
  

  
  // Safety check for stuck loading states - runs every 5 seconds
  setInterval(function() {
    $('.bundle-cart-btn.is-loading').each(function() {
      var $button = $(this);
      var loadingStartTime = $button.data('loading-start-time');
      var currentTime = new Date().getTime();
      
      // If button has been loading for more than 5 seconds, remove loading state
      if (!loadingStartTime || (currentTime - loadingStartTime > 5000)) {
        $button.prop("disabled", false).removeClass("is-loading");
      }
    });
  }, 5000);
  
  // Add to Bag button handler for bundle products (only in cart)
  $(document).on('click', '.bundle-cart-btn', function(e) {
    e.preventDefault();
    e.stopPropagation(); // Prevent event bubbling
    e.stopImmediatePropagation(); // Prevent other handlers from running
    
    var $button = $(this);
    var variantId = $button.data('variant-id');
    var quantity = 1; // Default quantity;
    
    // Prevent double-clicking or if cart operation is in progress
    if ($button.hasClass('is-loading') || $button.prop('disabled') || isCartOperationInProgress) {
      return false;
    }
    
    // Validate variant ID
    if (!variantId) {
      alert('Product variant not found');
      return false;
    }
    
    // Add loading state ONLY to this button and store loading start time
    $button.prop("disabled", true)
           .addClass("is-loading")
           .data('loading-start-time', new Date().getTime());
    
    // Add item to cart via AJAX
    addBundleItemToCart(variantId, quantity);
    
    // Safety measure: Remove loading state after a timeout
    setTimeout(function() {
      if ($button.hasClass('is-loading')) {
        $button.prop("disabled", false).removeClass("is-loading");
        isCartOperationInProgress = false; // Reset flag on timeout
      }
    }, 5000); // 5 seconds timeout as a fallback
  });
  
  // Quantity increase button handler
  $(document).on('click', '.quantity-btn.plus', function(e) {
    e.preventDefault();
    var $button = $(this);
    var $itemRow = $button.closest('.cart-item');
    var $quantityInput = $button.siblings('.quantity-input');
    var currentQuantity = parseInt($quantityInput.val());
    var newQuantity = currentQuantity + 1;
    
    // Prevent multiple clicks during loading
    if ($button.hasClass('is-loading') || $button.prop('disabled')) {
      return false;
    }
    
    // Get current line number dynamically (in case items were removed)
    var lineNumber = getCurrentLineNumber($itemRow);
    if (!lineNumber) {
      console.error('Could not determine line number for item');
      return false;
    }
    
    // Store original quantity for error rollback
    $quantityInput.data('original-quantity', currentQuantity);
    
    // Add loading state to button
    $button.prop('disabled', true).addClass('is-loading');
    
    // Update quantity input immediately for better UX
    $quantityInput.val(newQuantity);
    
    // Update item quantity in cart
    updateCartItemQuantity(lineNumber, newQuantity, $button);
  });
  
  // Quantity decrease button handler
  $(document).on('click', '.quantity-btn.minus', function(e) {
    e.preventDefault();
    var $button = $(this);
    var $itemRow = $button.closest('.cart-item');
    var $quantityInput = $button.siblings('.quantity-input');
    var currentQuantity = parseInt($quantityInput.val());
    var newQuantity = Math.max(1, currentQuantity - 1); // Minimum quantity of 1
    
    // Prevent multiple clicks during loading
    if ($button.hasClass('is-loading') || $button.prop('disabled')) {
      return false;
    }
    
    // Get current line number dynamically (in case items were removed)
    var lineNumber = getCurrentLineNumber($itemRow);
    if (!lineNumber) {
      console.error('Could not determine line number for item');
      return false;
    }
    
    // Store original quantity for error rollback
    $quantityInput.data('original-quantity', currentQuantity);
    
    // Add loading state to button
    $button.prop('disabled', true).addClass('is-loading');
    
    // Update quantity input immediately for better UX
    $quantityInput.val(newQuantity);
    
    // If quantity is 0, remove the item, otherwise update quantity
    if (newQuantity === 0) {
      removeItemFromCart(lineNumber, $button);
    } else {
      updateCartItemQuantity(lineNumber, newQuantity, $button);
    }
  });
  
  // Remove item button handler
  $(document).on('click', '.cart-item-remove', function(e) {
    e.preventDefault();
    var $button = $(this);
    var $itemRow = $button.closest('.cart-item');
    
    // Prevent multiple clicks during loading
    if ($button.hasClass('is-loading') || $button.prop('disabled')) {
      return false;
    }
    
    // Get current line number dynamically
    var lineNumber = getCurrentLineNumber($itemRow);
    if (!lineNumber) {
      console.error('Could not determine line number for item');
      return false;
    }
    
    // Add loading state to button
    $button.prop('disabled', true).addClass('is-loading');
    
    // Remove item from cart
    removeItemFromCart(lineNumber, $button);
  });
  
  // Apply discount code handler
  $(document).on('click', '#apply-discount', function(e) {
    e.preventDefault();
    var code = $('#discount-code').val().trim();
    applyDiscountCode(code);
  });
  
  // Allow applying discount with Enter key
  $(document).on('keypress', '#discount-code', function(e) {
    if (e.which === 13) { // Enter key
      e.preventDefault();
      var code = $(this).val().trim();
      applyDiscountCode(code);
    }
  });
  
  // Remove discount code handler
  $(document).on('click', '.discount-tag-remove', function(e) {
    e.preventDefault();
    var code = $(this).data('code');
    if (code) {
      removeDiscountCode(code);
    }
  });
});

// Function to update bundle products after cart changes (optimized for speed)
function updateBundleProducts() {
  // Fast JSON-only update for better performance
  $.ajax({
    type: "GET",
    url: "/cart.js",
    dataType: "json",
    cache: false,
    success: function(cartData) {
      // Update cart counts and totals quickly
      updateCartTotalsOnly(cartData);
      updateCartHeader(cartData.item_count);
      
      // Show/hide cart elements based on item count
      if (cartData.item_count > 0) {
        $(".hcart").show();
      } else {
        $(".hcart").hide();
      }
    },
    error: function(xhr, status, error) {
      console.error('Error fetching cart data:', error);
    }
  });
}

// Function for full HTML refresh (used for product page additions)
function updateBundleProductsWithHTML() {
  // Full HTML refresh to show new items added from product page
  $.ajax({
    type: "GET",
    url: "/cart",
    dataType: "html",
    cache: false,
    success: function(html) {
      var $cartHtml = $(html);
      var $newCartSection = $cartHtml.find('.r-side-cart');
      
      if ($newCartSection.length > 0) {
        // Get current cart state
        var wasActive = $('.r-side-cart').hasClass('active');
        var bodyHasCartOpen = $('body').hasClass('g-cart-open');
        
        // Replace cart content with fresh server HTML
        $('.r-side-cart').html($newCartSection.html());
        
        // Restore cart state
        if (wasActive) {
          $('.r-side-cart').addClass('active');
        }
        if (bodyHasCartOpen) {
          $('body').addClass('g-cart-open');
        }
        
        // Update cart counts from the fresh HTML
        var cartCount = $cartHtml.find('.count').text() || '0';
        $(".count").html(cartCount);
        $("#cart-count").html(cartCount);
        $(".hcart").html(cartCount);
        
        // Update cart title
        $('.cart-title').text('Your bag (' + cartCount + ')');
        
        if (cartCount == '0') {
          $(".hcart").hide();
          // Ensure empty cart state is properly displayed
          $('.cart-items-container').html('<div class="empty-cart"><p style="text-align:center; padding: 40px 0;">Cart is empty</p></div>');
          $('.checkout-section').hide().addClass('hidden-when-empty');
          $('.bundle-save-section').hide();
          $('.free-shipping-progress').show(); // Keep free shipping progress visible
          
          // Update free shipping progress for empty cart
          updateFreeShippingProgress(0);
        } else {
          $(".hcart").show();
        }
        
        // Re-initialize bundle functionality after cart update
        setTimeout(function() {
          // Refresh line numbers after full cart update
          refreshCartLineNumbers();
          
          new BundleSlideNavigation();
          initializeBundleProductImages();
          hideProductsAlreadyInCart();
        }, 50); // Reduced delay for faster initialization
        
      } else {
        console.error('No cart section found in server response');
      }
    },
    error: function(xhr, status, error) {
      console.error('Error fetching cart HTML:', error);
      // Fallback to fast JSON update
      updateBundleProducts();
    }
  });
}

// Global flag to prevent multiple simultaneous cart operations
var isCartOperationInProgress = false;
var cartOperationTimeout = null;

// Function to get current line number dynamically (accounts for removed items)
function getCurrentLineNumber($itemRow) {
  // Find the index of this item in the cart items list
  var $allItems = $('.cart-item');
  var currentIndex = $allItems.index($itemRow);
  
  // Line numbers are 1-indexed in Shopify, so add 1
  return currentIndex + 1;
}

// Function to refresh line numbers after cart updates
function refreshCartLineNumbers() {
  $('.cart-item').each(function(index) {
    $(this).attr('data-line', index + 1);
  });
}

// Function to add item to cart from bundle section
function addBundleItemToCart(variantId, quantity) {
  // Clear any existing timeout
  if (cartOperationTimeout) {
    clearTimeout(cartOperationTimeout);
  }
  
  // Prevent multiple simultaneous operations
  if (isCartOperationInProgress) {
    return;
  }
  
  isCartOperationInProgress = true;
  var $button = $('.bundle-cart-btn[data-variant-id="' + variantId + '"]');
  
  // Use Shopify's cart/add.js with proper success/error handling
  $.ajax({
    type: "POST",
    url: "/cart/add.js",
    dataType: "json",
    data: {
      id: variantId,
      quantity: quantity
    },
    success: function(item) {
      
      // Immediately hide the product from bundle section
      var productId = $button.data('product-id');
      var $productElement = $('.bundle-product[data-product-id="' + productId + '"]');
      if ($productElement.length > 0) {
        $productElement.fadeOut(300, function() {
          $(this).remove();
          
          // Re-initialize bundle slide navigation after product removal
          setTimeout(function() {
            new BundleSlideNavigation();
          }, 100);
        });
      }
      
      // Remove loading state from button
      $button.prop("disabled", false).removeClass("is-loading");
      
      // Reset the flag
      isCartOperationInProgress = false;
      
      // Use Shopify.onSuccess which is now properly handled by cart.js
      if (typeof Shopify !== 'undefined' && typeof Shopify.onSuccess === 'function') {
        Shopify.onSuccess();
      } else {
        // Fallback: trigger cart refresh directly
        $(document).trigger('cart:refresh');
      }
    },
    error: function(xhr) {
      
      // Remove loading state from button
      $button.prop("disabled", false).removeClass("is-loading");
      
      // Reset the flag immediately on error
      isCartOperationInProgress = false;
      
      // Use Shopify.onError which is now properly handled by cart.js
      if (typeof Shopify !== 'undefined' && typeof Shopify.onError === 'function') {
        Shopify.onError(xhr, 'error');
      } else {
        // Fallback error handling
        try {
          var data = JSON.parse(xhr.responseText);
          alert(data.message || 'Error adding item to cart');
        } catch (e) {
          alert('Error adding item to cart');
        }
      }
    }
  });
}

// Function to update cart item quantity
function updateCartItemQuantity(lineNumber, quantity, $button) {
  var $itemRow = $button.closest('.cart-item');
  var unitPrice = parseFloat($itemRow.find('.cart-item-pricing').data('unit-price')) || 0;
  
  // Double-check line number is valid
  if (!lineNumber || lineNumber < 1) {
    console.error('Invalid line number:', lineNumber);
    if ($button) {
      $button.prop('disabled', false).removeClass('is-loading');
    }
    return;
  }
  
  $.ajax({
    type: "POST",
    url: "/cart/change.js",
    dataType: "json",
    data: {
      line: lineNumber,
      quantity: quantity
    },
    success: function(cart) {
      // Remove loading state from button
      if ($button) {
        $button.prop('disabled', false).removeClass('is-loading');
      }
      
      // Refresh line numbers after cart update
      refreshCartLineNumbers();
      
      // Fast update: Update only the specific item's price and cart totals
      updateCartTotalsOnly(cart);
      updateItemPriceOnly($itemRow, quantity, cart);
    },
    error: function(xhr) {
      // Remove loading state from button
      if ($button) {
        $button.prop('disabled', false).removeClass('is-loading');
      }
      
      // Restore original quantity on error
      var originalQuantity = $button.siblings('.quantity-input').data('original-quantity') || 1;
      $button.siblings('.quantity-input').val(originalQuantity);
      
      var data = JSON.parse(xhr.responseText);
      alert(data.message || 'Error updating cart');
    }
  });
}

// Function to remove item from cart
function removeItemFromCart(lineNumber, $button) {
  var $itemRow = $button.closest('.cart-item');
  
  // Double-check line number is valid
  if (!lineNumber || lineNumber < 1) {
    console.error('Invalid line number for removal:', lineNumber);
    if ($button) {
      $button.prop('disabled', false).removeClass('is-loading');
    }
    $itemRow.fadeIn(200); // Show item again if error
    return;
  }
  
  // Optimistic UI: Hide item immediately
  $itemRow.fadeOut(200);
  
  $.ajax({
    type: "POST",
    url: "/cart/change.js",
    dataType: "json",
    data: {
      line: lineNumber,
      quantity: 0
    },
    success: function(cart) {
      // Remove loading state from button
      if ($button) {
        $button.prop('disabled', false).removeClass('is-loading');
      }

      // Fast update: Update only cart totals and remove item
      $itemRow.remove();

      // Refresh line numbers after item removal
      refreshCartLineNumbers();

      updateCartTotalsOnly(cart);
      updateCartHeader(cart.item_count);

      // Show empty cart if no items
      if (cart.item_count === 0) {
        // Hide cart sections but keep free shipping progress visible
        $('.cart-items-list').hide();
        $('.bundle-save-section').hide();
        $('.checkout-section').hide();
        $('.free-shipping-progress').show(); // Keep free shipping progress visible

        // Show empty cart message
        $('.cart-items-container').html('<div class="empty-cart"><p style="text-align:center; padding: 40px 0;">Cart is empty</p></div>');

        // Force hide checkout section with important and add class
        $('.checkout-section').css('display', 'none !important').addClass('hidden-when-empty');

        // Update cart title to show 0 items
        $('.cart-title').text('Your bag (0)');

        // Update free shipping progress for empty cart
        updateFreeShippingProgress(0);
      } else {
        // Show sections when cart has items
        $('.checkout-section').show().removeClass('hidden-when-empty');
        $('.free-shipping-progress').show();

        // Refresh bundle products after item removal to show previously hidden products
        setTimeout(function() {
          refreshBundleProducts(cart);
        }, 100);
      }
    },
    error: function(xhr) {
      // Remove loading state from button
      if ($button) {
        $button.prop('disabled', false).removeClass('is-loading');
      }
      
      // Restore item on error
      $itemRow.fadeIn(200);
      
      var data = JSON.parse(xhr.responseText);
      alert(data.message || 'Error removing item');
    }
  });
}

// Fast update helper functions
function updateCartTotalsOnly(cart) {
  // Update cart totals without full page refresh
  $('.total-amount').text(formatMoney(cart.total_price));
  
  // Update cart count
  $('.count').text(cart.item_count);
  $('.hcart').text(cart.item_count);
  $('.cart-btn').html('<span class="fa fa-shopping-bag"></span><span>' + cart.item_count + '</span>');
  
  // Update cart title
  $('.cart-title').text('Your bag (' + cart.item_count + ')');
  
  // Handle empty cart state
  if (cart.item_count === 0) {
    $('.cart-items-container').html('<div class="empty-cart"><p style="text-align:center; padding: 40px 0;">Cart is empty</p></div>');
    $('.checkout-section').hide().addClass('hidden-when-empty');
    $('.bundle-save-section').hide();
    $('.free-shipping-progress').show(); // Keep free shipping progress visible
    $('.hcart').hide();
    
    // Update free shipping progress for empty cart
    updateFreeShippingProgress(0);
    return; // Exit early for empty cart
  } else {
    $('.hcart').show();
  }
  
  // Update total savings using dedicated function
  updateTotalSavingsDisplay(cart);
  
  // Update shipping (but not the savings amount)
  var shippingCost = cart.total_price >= 5000 ? 'Free' : '$5.00';
  $('.shipping-row').not('#savings-display').find('.shipping-cost').text(shippingCost);
  
  // Update free shipping progress
  updateFreeShippingProgress(cart.total_price);
}

function updateItemPriceOnly($itemRow, quantity, cart) {
  // Find the specific item in cart data using dynamic line number
  var lineNumber = getCurrentLineNumber($itemRow);
  var cartItem = null;
  
  // Line numbers are 1-indexed, array is 0-indexed
  if (lineNumber && lineNumber <= cart.items.length) {
    cartItem = cart.items[lineNumber - 1];
  }
  
  if (cartItem) {
    // Update line price
    var $priceContainer = $itemRow.find('.cart-item-pricing');
    var $currentPrice = $priceContainer.find('.current-price');
    var $originalPriceTop = $priceContainer.find('.original-price-top');
    var $discountedPrice = $priceContainer.find('.discounted-price');
    var $savings = $priceContainer.find('.savings');
    
    if ($currentPrice.length > 0) {
      $currentPrice.text(formatMoney(cartItem.line_price));
    }
    if ($originalPriceTop.length > 0) {
      $originalPriceTop.text(formatMoney(cartItem.original_line_price || cartItem.line_price));
    }
    if ($discountedPrice.length > 0) {
      $discountedPrice.text(formatMoney(cartItem.line_price));
    }
    
    // Update individual item savings
    if ($savings.length > 0 && cartItem.original_price > cartItem.price) {
      var itemSavings = (cartItem.original_price - cartItem.price) * cartItem.quantity;
      $savings.text('(Save ' + formatMoney(itemSavings) + ')');
    }
  }
  
  // Recalculate and update total savings in checkout section
  updateTotalSavingsDisplay(cart);
}

function updateCartHeader(itemCount) {
  $('.cart-title').text('Your bag (' + itemCount + ')');
}

// Function to update free shipping progress
function updateFreeShippingProgress(cartTotal) {
  var freeShippingThreshold = 9900; // $99.00 in cents
  var remainingAmount = freeShippingThreshold - cartTotal;
  var progressPercentage = Math.min(100, (cartTotal * 100) / freeShippingThreshold);
  
  if (remainingAmount > 0) {
    $('.free-shipping-progress-text').html('Almost there! Add $' + (remainingAmount / 100).toFixed(2) + ' more for free shipping');
  } else {
    $('.free-shipping-progress-text').html('<span class="free-shipping-achieved">You got free shipping!</span>');
  }
  
  $('.progress-bar').css('width', progressPercentage + '%');
}

// Function to update total savings display in checkout section
function updateTotalSavingsDisplay(cart) {
  var totalSavings = 0;

  if (cart.items && cart.items.length > 0) {
    for (var i = 0; i < cart.items.length; i++) {
      var item = cart.items[i];
      if (item.original_price > item.price) {
        var itemSavings = (item.original_price - item.price) * item.quantity;
        totalSavings += itemSavings;
      }
    }
  }

  // Add cart-level discounts
  if (cart.total_discount > 0) {
    totalSavings += cart.total_discount;
  }

  // Update savings display in checkout section
  if (totalSavings > 0) {
    $('#savings-display').show();
    $('#savings-amount').text(formatMoney(totalSavings));
  } else {
    $('#savings-display').hide();
  }
  
  // Also update applied discounts display
  updateAppliedDiscountsDisplay(cart);
}

// Function to refresh bundle products after cart changes
function refreshBundleProducts(cart) {
  // Since bundle products are removed from DOM when added to cart,
  // we need to refresh the bundle section from server when items are removed
  $.ajax({
    type: "GET",
    url: "/cart",
    dataType: "html",
    cache: false,
    success: function(html) {
      var $cartHtml = $(html);
      var $newBundleSection = $cartHtml.find('.bundle-save-section');

      if ($newBundleSection.length > 0) {
        // Replace the current bundle section with the fresh one from server
        $('.bundle-save-section').replaceWith($newBundleSection);

        // Re-initialize bundle functionality after refresh
        setTimeout(function() {
          new BundleSlideNavigation();
          initializeBundleProductImages();
        }, 100);
      }
    },
    error: function(xhr, status, error) {
      console.error('Error refreshing bundle products:', error);
    }
  });
}

// Duplicate function removed - using the AJAX version above
</script>

