<div id="custom-cart" class="r-side-cart">
  <div class="cart-overlay"></div>
  
  <div class="cart-content">
    <!-- Free Shipping Progress Bar -->
    <div class="free-shipping-progress">
      <div class="progress-text">
          <span class="free-shipping-progress-text">
            {% assign free_shipping_threshold = 5000 %}
            {% assign remaining_amount = free_shipping_threshold | minus: cart.total_price %}
            {% if remaining_amount > 0 %}
              Almost there! Add {{ remaining_amount | money }} more for free shipping
            {% else %}
              <span class="free-shipping-achieved">You got free shipping!</span>
            {% endif %}
          </span>
      </div>
      
      <div class="progress-bar-container">
        {% assign progress_percentage = cart.total_price | times: 100 | divided_by: free_shipping_threshold %}
        {% if progress_percentage > 100 %}{% assign progress_percentage = 100 %}{% endif %}
        <div class="progress-bar" style="width: {{ progress_percentage }}%">
          <div class="truck-icon">
            <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path d="M4 5.25a.75.75 0 0 1 .75-.75h6.991a2.75 2.75 0 0 1 2.645 1.995l.427 1.494a.25.25 0 0 0 .18.173l1.681.421a1.75 1.75 0 0 1 1.326 1.698v1.219a1.75 1.75 0 0 1-1.032 1.597 2.5 2.5 0 1 1-4.955.153h-3.025a2.5 2.5 0 1 1-4.78-.75h-.458a.75.75 0 0 1 0-1.5h2.5c.03 0 .06.002.088.005a2.493 2.493 0 0 1 1.947.745h4.43a2.493 2.493 0 0 1 1.785-.75c.698 0 1.33.286 1.783.748a.25.25 0 0 0 .217-.248v-1.22a.25.25 0 0 0-.19-.242l-1.682-.42a1.75 1.75 0 0 1-1.258-1.217l-.427-1.494a1.25 1.25 0 0 0-1.202-.907h-6.991a.75.75 0 0 1-.75-.75Zm2.5 9.25a1 1 0 1 0 0-2 1 1 0 0 0 0 2Zm8 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z"/>
            </svg>
          </div>
        </div>
      </div>
    </div>

    <!-- Cart Header -->
    <div class="cart-header">
      <h2 class="cart-title">Your bag ({{ cart.item_count }})</h2>
      <button class="cart-close cart-icon" aria-label="Close cart">âœ•</button>
    </div>

    <!-- Cart Items and Bundle Section Container -->
    <div class="cart-items-container">
        {% if cart.item_count > 0 %}
        <form class="Cart_Drawer__Content" action="{{ routes.cart_url }}" method="POST" novalidate>
          <div id="cart-items-list" class="cart-items-list">
              {% for item in cart.items %}
                <div class="cart-item r-prod-row" data-item-key="{{ item.key }}" data-variant-id="{{ item.variant.id }}" data-line="{{forloop.index}}">
                  <div class="cart-item-image">
                    <a href="{{item.url}}">
                      <img src="{{ item | img_url: 'large' }}" alt="{{ item.product.title }}" loading="lazy">
                    </a>
                  </div>
                  
                  <div class="cart-item-details">
                    <h3 class="cart-item-title">{{ item.product.title }}</h3>
                    {% unless item.variant.title contains 'Default' %}
                      <p class="cart-item-variant">{{ item.variant.title }}</p>
                    {% endunless %}
                  </div>
                  
                  <div class="cart-item-actions">
                    <div class="cart-item-quantity r-prod-qty">
                      <button type="button" class="quantity-btn minus qty__adjust qty__adjust--minus" data-action="decrease" tabindex="0">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
                        </svg>
                      </button>
                      <input type="number" class="quantity-input" value="{{ item.quantity }}" min="1" readonly>
                      <button type="button" class="quantity-btn plus qty__adjust qty__adjust--plus" data-action="increase" aria-label="Increase item quantity by one" tabindex="0">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                        </svg>
                      </button>
                    </div>
                    
                    <div class="cart-item-pricing">
                      <div class="price-container">
                        {% assign original_price = item.variant.compare_at_price | default: item.original_price %}
                        {% if original_price and original_price > item.price %}
                          <div class="main-price">{{ item.price | money }}</div>
                          <div class="price-details">
                            <span class="original-price">{{ original_price | money }}</span>
                          </div>
                          <div class="savings">Save {{ original_price | minus: item.price | money }}</div>
                        {% else %}
                          <div class="main-price">{{ item.price | money }}</div>
                        {% endif %}
                      </div>
                    </div>
                    
                    <button class="cart-item-remove remove-cart" data-item-key="{{ item.key }}" aria-label="Remove item">
                      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                      </svg>
                    </button>
                  </div>
                  <div class="spinner"></div>
                </div>
              {% endfor %}
          </div>
          
          <!-- Bundle & Save Section -->
          <div class="bundle-save-section">
            <h3 class="bundle-title">Bundle & save</h3>
            <div class="bundle-products-container">
              <div class="bundle-products-scroll" id="bundle-products-scroll">
                <!-- Bundle products with metafield support -->
                {% assign bundle_products = blank %}
                
                {% comment %} Check metafields for all items in the cart {% endcomment %}
                {% for item in cart.items %}
                  {% if item.product.metafields.custom.recommendations_for_cart.value != blank %}
                    {% assign bundle_products = item.product.metafields.custom.recommendations_for_cart.value %}
                    {% break %}
                  {% endif %}
                {% endfor %}
                
                {% comment %} If it's a metafield reference, get the actual products {% endcomment %}
                {% if bundle_products.products %}
                  {% assign bundle_products = bundle_products.products %}
                {% endif %}
                
                {% if bundle_products != blank %}
                  {% for product in bundle_products %}
                    <div class="bundle-product" data-product-id="{{ product.id }}">
                    <div class="bundle-product-gray-box">
                      <div class="bundle-product-image">
                        <img src="{{ product.variants.first.featured_image | default: product.featured_image | img_url: 'medium' }}" alt="{{ product.title }}">
                      </div>
                      <h4 class="bundle-product-title">{{ product.title }}</h4>
                      <p class="bundle-product-price">{{ product.variants.first.price | money }}</p>
                    </div>
             
                    <div class="bundle-product-variants">
                      {% for variant in product.variants limit: 4 %}
                        <div class="variant-dot {% if forloop.first %}selected{% endif %}" data-variant-id="{{ variant.id }}" data-product-id="{{ product.id }}" data-variant-index="{{ forloop.index0 }}" data-fabric="{{ variant.option1 }}">
                          <div class="dot" style="background-color: {{ variant.option1 | handleize }};"></div>
                        </div>
                      {% endfor %}
                    </div>
                    <div class="bundle-product-material">{{ product.variants.first.option1 }}</div>
                    <button class="add-to-bag-btn bundle-cart-btn" data-variant-id="{{ product.selected_or_first_available_variant.id }}" data-product-id="{{ product.id }}" data-source="bundle-cart">Add to Bag</button>
                  </div>
                  {% endfor %}
                {% endif %}
                
                {% if bundle_products != blank %}
                  <script>
                    {% for product in bundle_products %}
                      window.bundleProductVariants_{{ product.id }} = [
                        {% for variant in product.variants limit: 4 %}
                          {
                            id: {{ variant.id }},
                            title: {{ variant.title | json }},
                            price: {{ variant.price }},
                            fabric: {{ variant.option1 | json }},
                            featured_image: {
                              url: "{{ variant.featured_image | default: product.featured_image | img_url: 'medium' }}",
                              alt: "{{ variant.title | default: product.title }}"
                            }
                          }{% unless forloop.last %},{% endunless %}
                        {% endfor %}
                      ];
                    {% endfor %}
                  </script>
                {% endif %}
              </div>
            </div>
          </div>
        </form>
        {% else %}
          <div class="empty-cart">
            <p style="text-align:center; padding: 40px 0;">Cart is empty</p>
          </div>
        {% endif %}
    </div>

    <!-- Sticky Checkout Section -->
    {% if cart.item_count > 0 %}
    <div class="checkout-section">
      <div class="discount-code-section">
        <input type="text" id="discount-code" class="discount-input" placeholder="Discount Code" maxlength="20">
        <button id="apply-discount" class="apply-discount-btn">Apply</button>
      </div>
      
      {% assign total_savings = 0 %}
      {% for item in cart.items %}
        {% if item.variant.compare_at_price > item.variant.price %}
          {% assign item_savings = item.variant.compare_at_price | minus: item.variant.price | times: item.quantity %}
          {% assign total_savings = total_savings | plus: item_savings %}
        {% endif %}
      {% endfor %}
      {% comment %}Only add total_discount if it's not already included in the line item calculations{% endcomment %}
      {% if cart.total_discount > 0 %}
        {% assign total_savings = total_savings | plus: cart.total_discount %}
      {% endif %}
      <div class="savings-row" id="savings-display" {% if total_savings <= 0 %}style="display: none;"{% endif %}>
        <span class="savings-label">Savings</span>
        <span class="savings-amount" id="savings-amount">{{ total_savings | money }}</span>
      </div>
      
      <div class="shipping-info">
        <div class="shipping-text">
          <p>Free shipping over $50 and free 30 days return</p>
          
          <!-- Payment Methods -->
          <div class="payment-methods">
            <!-- Visa -->
            <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5e/Visa_Inc._logo.svg/2560px-Visa_Inc._logo.svg.png" alt="Visa" class="payment-icon">
            
            <!-- Mastercard -->
            <img src="https://pngimg.com/d/mastercard_PNG15.png" alt="Mastercard" class="payment-icon">
            
            <!-- PayPal -->
            <img src="https://logos-world.net/wp-content/uploads/2020/07/PayPal-Logo-2007.png" alt="PayPal" class="payment-icon">
            
            <!-- Apple Pay -->
            <img src="https://cdn-icons-png.flaticon.com/512/5968/5968500.png" alt="Apple Pay" class="payment-icon">
            
            <!-- American Express -->
            <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSm73LvI1Hjl87YXRhaNgwI8G65OBi8KOtuEw&s" alt="American Express" class="payment-icon">
            
            <!-- Shop Pay -->
            <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTp-2ZhkuBgV0xrrobgbq0QmQ_hFSS4JkLdWI5T5U3FtwRkeWFKz_fTIfs8aNHszviJw1Y&usqp=CAU" alt="Shop Pay" class="payment-icon">
            
            <!-- Google Pay -->
            <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f2/Google_Pay_Logo.svg/800px-Google_Pay_Logo.svg.png" alt="Google Pay" class="payment-icon">
            
            <!-- Venmo -->
            <img src="https://static1.makeuseofimages.com/wordpress/wp-content/uploads/2024/10/venmo-logo-blue.jpg" alt="Venmo" class="payment-icon">
          </div>
        </div>
        
        <div class="shipping-totals">
          <div class="shipping-row">
            <span class="shipping-label">Shipping</span>
            <span class="shipping-cost">
                {% if cart.total_price >= 5000 %}
                  Free
                {% else %}
                  $5.00
                {% endif %}
            </span>
          </div>
          <div class="total-row">
            <span class="total-label">Total</span>
            <span class="total-amount">{{ cart.total_price | money }}</span>
          </div>
        </div>
      </div>
      
      <button class="checkout-btn" id="checkout-btn" onclick="window.location.href='/checkout'">Checkout</button>
    </div>
    {% endif %}
  </div>
</div>

<style>
.r-side-cart {
  position: fixed;
  top: 0;
  right: 0;
  width: 100%;
  height: 100vh;
  z-index: 10000;
  display: block;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  transform: translateX(100%);
  visibility: hidden;
}

.r-side-cart.active {
  transform: translateX(0);
  visibility: visible;
}

.cart-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  backdrop-filter: blur(4px);
}

.cart-content {
  position: absolute;
  top: 0;
  right: 0;
  width: 580px;
  height: 100vh;
  background: #ffffff;
  box-shadow: -4px 0 24px rgba(0, 0, 0, 0.15);
  display: flex;
  flex-direction: column;
  overflow: hidden;
  border-radius: 0;
}

/* Free Shipping Progress Bar */
.free-shipping-progress {
  background: #ffffff;
  color: #111827;
  text-align: center;
  padding: 16px 16px 20px;
  position: relative;
}

.free-shipping-progress .progress-text {
  color: #111827;
  margin-bottom: 16px;
}

.free-shipping-progress .free-shipping-achieved {
  color: #111827;
  font-weight: normal;
  font-size: 16px;
}

.free-shipping-progress .free-shipping-progress-text {
  color: #111827;
  font-size: 14px;
}

.free-shipping-progress .remaining-amount {
  color: #111827;
  font-weight: 600;
}

.progress-bar-container {
  width: 100%;
  height: 12px;
  background: #e5e7eb;
  border-radius: 6px;
  overflow: visible;
  margin-bottom: 0;
  position: relative;
}

.progress-bar {
  height: 100%;
  background: #5896a1;
  border-radius: 6px;
  transition: width 0.6s ease;
  position: relative;
}

.truck-icon {
    position: absolute;
    right: -6px;
    top: -14px;
    background: #5896a1;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

.truck-icon svg {
  width: 27px;
  height: 27px;
  fill: white;
}

/* Cart Header */
.cart-header {
  padding: 16px;
  position: relative;
}

.cart-title {
  font-size: 18px;
  font-weight: 600;
  color: #111827;
  margin: 0;
  font-family: inherit;
}

.cart-close {
  position: absolute;
  top: 16px;
  right: 16px;
  background: none;
  border: none;
  color: #6b7280;
  cursor: pointer;
  padding: 8px;
  border-radius: 50%;
  transition: all 0.2s ease;
  font-size: 18px;
}

.cart-close:hover {
  background: #f5f5f5;
  color: #333;
}

/* Cart Items Container */
.cart-items-container {
  flex: 1;
  overflow-y: auto;
  padding: 0 16px;
  background: #ffffff;
}

.cart-items-list {
  padding: 0 0 0 0;
}

.cart-item {
  display: flex;
  align-items: center;
  padding: 24px 0;
  gap: 16px;
  position: relative;
}

.cart-item-image {
  flex-shrink: 0;
  width: 64px;
  height: 64px;
  border-radius: 8px;
  overflow: hidden;
  background: #f8f9fa;
}

.cart-item-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.cart-item-details {
  flex: 1;
  min-width: 0;
}

.cart-item-title {
  font-size: 16px;
  font-weight: 500;
  color: #111827;
  margin: 0 0 4px 0;
  line-height: 1.3;
  font-family: inherit;
}

.cart-item-variant {
  font-size: 14px;
  color: #996515;
  margin: 0;
  font-weight: 500;
}

.cart-item-actions {
  display: flex;
  align-items: center;
  gap: 12px;
}

.cart-item-quantity {
  display: flex;
  align-items: center;
  gap: 0px;
  background: transparent;
}

.quantity-btn {
  width: 32px;
  height: 32px;
  border: 1px solid #d1d5db;
  border-radius: 50%;
  background: #ffffff;
  color: #6b7280;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.quantity-btn:hover {
  background: #f8f9fa;
  color: #111827;
  border-color: #9ca3af;
}

.quantity-btn svg {
  width: 16px;
  height: 16px;
}

.quantity-input {
  width: 40px;
  text-align: center;
  border: none;
  background: transparent;
  font-size: 14px;
  font-weight: 500;
  color: #111827;
  outline: none;
  -moz-appearance: textfield; /* Hide spinner in Firefox */
}

.quantity-input::-webkit-inner-spin-button,
.quantity-input::-webkit-outer-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

.quantity-display {
  font-size: 14px;
  font-weight: 500;
  color: #374151;
  min-width: 24px;
  text-align: center;
  padding: 0;
}

.cart-item-pricing {
  text-align: right;
  min-width: 80px;
  margin-left: 36px;
}

.price-container {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
}

.price-container:has(.price-details) {
  margin-top: 21px;
}

.price-container:not(:has(.price-details)) {
  margin-top: 0px;
}

.main-price {
  font-size: 16px;
 
  color: #111827;
  margin-bottom: 4px;
}

.price-details {
  display: flex;
  gap: 6px;
  align-items: center;
  margin-bottom: 4px;
}

.original-price {
  font-size: 14px;
  color: #9ca3af;
  text-decoration: line-through;
  font-weight: 600;
  margin-right: 8px;
}



.savings {
  font-size: 12px;
  color: #ffffff;
  font-weight: 700;
  background: #dc2626;
  padding: 3px 8px;
  border-radius: 12px;
  margin-top: 2px;
  display: inline-block;
}

.bundle-tag {
  display: flex;
  align-items: center;
  gap: 4px;
  font-size: 11px;
  color: #059669;
  font-weight: 600;
  margin-top: 2px;
}

.bundle-dot {
  width: 8px;
  height: 8px;
  background: #059669;
  border-radius: 50%;
}

.cart-item-remove {
  background: none;
  border: none;
  color: #9ca3af;
  cursor: pointer;
  padding: 8px;
  border-radius: 50%;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.cart-item-remove:hover {
  background: #f8f9fa;
  color: #dc2626;
}

.cart-item-remove svg {
  width: 20px;
  height: 20px;
}

/* Bundle & Save Section */
.bundle-save-section {

  background: #ffffff;
  margin: 0 0px;
}

.bundle-title {
  font-size: 18px;
  font-weight: 600 !important;
  color: #111827;
  margin: 0 0 16px 0;
  font-family: inherit;
  padding-left: 0;
}

.bundle-products-container {
  overflow: hidden;
  position: relative;
  cursor: grab;
  padding: 0 0px;
}

.bundle-products-container.grabbing {
  cursor: grabbing;
}

.bundle-products-scroll {
  display: flex;
  gap: 12px;
  padding: 8px 0;
  margin-left: 0;
  transition: transform 0.5s cubic-bezier(0.23, 1, 0.32, 1); 
  will-change: transform;
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

.bundle-products-scroll.no-transition {
  transition: none;
}

.bundle-product {
  flex: 0 0 152px;
  background: transparent;
  border-radius: 0;
  padding: 0;
  text-align: center;
  border: none;
  transition: all 0.2s ease;
  box-shadow: none;
  margin: 0;
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

.bundle-product-image {
  width: 100%;
  height: 135px;
  border-radius: 0;
  overflow: hidden;
  background: transparent;
  margin-bottom: 8px;
}

.bundle-product-image img {
  width: 100%;
  height: 100%;
  object-fit: contain;
  transition: opacity 0.3s ease;
}

.bundle-product-title {
  font-size: 14px;
  font-weight: 600;
  color: #111827;
  margin: 0 0 4px 0;
  line-height: 1.3;
  font-family: inherit;
  padding: 0;
  text-align: center;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.bundle-product-price {
  font-size: 14px;
  color: #111827;
  font-weight: 600;
  margin: 6px 0 0 0;
  padding: 0;
  text-align: center;
}

.bundle-product-gray-box {
  background: #f3f4f6;
  border-radius: 8px;
  margin-bottom: 8px;
  overflow: hidden;
  padding: 12px;
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
}

.bundle-product-variants {
  display: flex;
  justify-content: center;
  gap: 4px;
  margin: 8px 0;
}

.variant-dot {
  cursor: pointer;
  transition: all 0.2s ease;
  width: 20px;
  height: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.variant-dot .dot {
  width: 16px;
  height: 16px;
  border: 2px solid #d1d5db;
  border-radius: 50%;
  background: #ffffff;
  transition: all 0.2s ease;
}

.variant-dot.selected .dot {
  border-color: #111827;
  background: #111827;
  box-shadow: 0 0 0 2px #fff, 0 0 0 3px #111827;
}

.variant-dot:hover .dot {
  transform: scale(1.1);
  border-color: #111827;
}

.bundle-product-material {
  font-size: 12px;
  color: #D97706;
  font-weight: 600;
  margin: 8px 0 0 0;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  text-align: center;
}

.add-to-bag-btn, .bundle-cart-btn {
  width: 100%;
  background: #037e85;
  color: #ffffff;
  border: none;
  padding: 8px 16px;
  border-radius: 9999px;
  font-size: 12px;
  margin-top: 8px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  font-family: inherit;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  position: relative;
}

.add-to-bag-btn:hover, .bundle-cart-btn:hover {
  background: #026068;
}

.add-to-bag-btn.is-loading, .bundle-cart-btn.is-loading {
  opacity: 0.7;
  pointer-events: none;
}

.add-to-bag-btn.is-loading::after, .bundle-cart-btn.is-loading::after {
  content: "";
  position: absolute;
  width: 12px;
  height: 12px;
  top: 50%;
  left: 50%;
  margin-left: -6px;
  margin-top: -6px;
  border: 2px solid #ffffff;
  border-radius: 50%;
  border-top-color: transparent;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

/* Checkout Section */
.checkout-section {
  background: #ffffff;
  padding: 20px 16px 24px;
  position: sticky;
  bottom: 0;
  z-index: 10;
  box-shadow: 0 -4px 12px rgba(0, 0, 0, 0.1);
}

.discount-code-section {
  display: flex;
  gap: 12px;
  margin-bottom: 12px;
}

.discount-input {
  flex: 1;
  padding: 8px 16px;
  width: 371px;
  border: 1px solid #d1d5db;
  border-radius: 8px;
  font-size: 14px;
  font-family: inherit;
}

.discount-input:focus {
  outline: none;
  border-color: #2dd4bf;
  box-shadow: 0 0 0 3px rgba(45, 212, 191, 0.1);
}

.apply-discount-btn {
  background: black;
  color: #ffffff;
  border: none;
  padding: 8px 9px;
  border-radius: 9999px;
  font-size: 12px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  font-family: inherit;
  white-space: nowrap;
  width: 35%;
}

.apply-discount-btn:hover {
  background: #374151;
}

.savings-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 16px;
}

.savings-label {
  font-size: 14px;
  color: #111827;
}

.savings-amount {
  font-size: 14px;
  font-weight: 500;
  margin-right:208px;
  color: #111827;
}

.shipping-info {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 24px;
}

.shipping-text {
  flex: 1;
}

.shipping-text p {
  font-size: 14px;
  color: #111827;
  margin: 0 0 12px 0;
}

.payment-methods {
  display: flex;
  gap: 4px;
  flex-wrap: wrap;
}

.payment-icon {
  height: 24px;
  width: auto;
  max-width: 48px;
  opacity: 0.8;
  transition: all 0.2s ease;
  filter: grayscale(20%);
  border-radius: 4px;
  object-fit: contain;
}

.payment-icon:hover {
  opacity: 1;
  filter: grayscale(0%);
  transform: scale(1.05);
}

.shipping-totals {
  text-align: right;
  margin-left: 16px;
  min-width: 189px;
}

.shipping-row, .total-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 12px;
}

.shipping-row:last-child {
  margin-bottom: 0;
}

.shipping-label, .total-label {
  font-size: 14px;
  color: #111827;
}

.shipping-cost {
  font-size: 14px;
  font-weight: 500;
  color: #111827;
}

.total-label {
  font-weight: 500;
}

.total-amount {
  font-size: 14px;
  font-weight: 600;
  color: #111827;
}

.checkout-btn {
  width: 100%;
  background: black;
  color: #ffffff;
  border: none;
  padding: 9px 24px;
  border-radius: 9999px;
  font-size: 18px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  font-family: inherit;
}

.checkout-btn:hover:not(:disabled) {
  background: #374151;
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(17, 24, 39, 0.3);
}

.checkout-btn:disabled {
  background: #9ca3af;
  cursor: not-allowed;
  transform: none;
  box-shadow: none;
}

/* Loading spinner for cart items */
.r-prod-row.is-loading {
  opacity: 0.5;
  pointer-events: none;
}

.spinner {
  display: none;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 20px;
  height: 20px;
  border: 2px solid #f3f3f3;
  border-top: 2px solid #3498db;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

.r-prod-row.is-loading .spinner {
  display: block;
}

@keyframes spin {
  0% { transform: translate(-50%, -50%) rotate(0deg); }
  100% { transform: translate(-50%, -50%) rotate(360deg); }
}

/* Responsive Design */
@media (max-width: 1024px) {
  .cart-content {
    width: 480px;
  }
}

@media (max-width: 768px) {
  .cart-content {
    width: 420px;
  }
  
  .free-shipping-progress {
    padding: 12px 12px 16px;
  }
  
  .free-shipping-progress .free-shipping-progress-text {
    font-size: 13px;
  }
  
  .cart-header {
    padding: 12px;
  }
  
  .cart-title {
    font-size: 16px;
  }
  
  .cart-items-container {
    padding: 0 12px;
  }
  
  .cart-item {
    padding: 16px 0;
    gap: 10px;
  }
  
  .cart-item-image {
    width: 56px;
    height: 56px;
  }
  
  .cart-item-title {
    font-size: 14px;
  }
  
  .cart-item-variant {
    font-size: 12px;
  }
  
  .quantity-btn {
    width: 28px;
    height: 28px;
  }
  
  .quantity-input {
    width: 32px;
    font-size: 12px;
  }
  
  .main-price {
    font-size: 14px;
  }
  
  .bundle-title {
    font-size: 16px;
    margin-bottom: 12px;
  }
  
  .bundle-product {
    flex: 0 0 130px;
  }
  
  .bundle-product-image {
    height: 110px;
  }
  
  .bundle-product-title {
    font-size: 12px;
  }
  
  .bundle-product-price {
    font-size: 12px;
  }
  
  .checkout-section {
    padding: 16px 12px 20px;
  }
  
  .discount-input {
    width: 280px;
    padding: 6px 12px;
    font-size: 13px;
  }
  
  .apply-discount-btn {
    padding: 6px 8px;
    font-size: 11px;
    width: 32%;
  }
  
  .shipping-text p {
    font-size: 12px;
  }
  
  .payment-icon {
    height: 20px;
    max-width: 40px;
  }
  
  .checkout-btn {
    padding: 8px 20px;
    font-size: 16px;
  }
}

@media (max-width: 640px) {
  .cart-content {
    width: 380px;
  }
  
  .cart-item-actions {
    gap: 8px;
  }
  
  .cart-item-pricing {
    min-width: 70px;
  }
  
  .bundle-product {
    flex: 0 0 120px;
  }
  
  .bundle-product-image {
    height: 100px;
  }
  
  .discount-input {
    width: 240px;
  }
  
  .shipping-totals {
    min-width: 160px;
  }
}

@media (max-width: 480px) {
  .cart-content {
    width: 100%;
    height: 100vh;
  }
  
  .free-shipping-progress {
    padding: 10px 12px 14px;
  }
  
  .cart-header {
    padding: 12px;
  }
  
  .cart-title {
    font-size: 16px;
  }
  
  .cart-items-container {
    padding: 0 12px;
  }
  
  .cart-item {
    padding: 14px 0;
    gap: 8px;
    flex-wrap: wrap;
  }
  
  .cart-item-image {
    width: 50px;
    height: 50px;
  }
  
  .cart-item-details {
    flex: 1;
    min-width: 120px;
  }
  
  .cart-item-actions {
    width: 100%;
    justify-content: space-between;
    margin-top: 8px;
  }
  
  .cart-item-quantity {
    order: 1;
  }
  
  .cart-item-pricing {
    order: 2;
    text-align: right;
    min-width: auto;
  }
  
  .cart-item-remove {
    order: 3;
  }
  
  .bundle-save-section {
    margin: 0;
  }
  
  .bundle-title {
    font-size: 15px;
    margin-bottom: 10px;
  }
  
  .bundle-product {
    flex: 0 0 110px;
  }
  
  .bundle-product-image {
    height: 90px;
  }
  
  .bundle-product-title {
    font-size: 11px;
    line-height: 1.2;
  }
  
  .bundle-product-price {
    font-size: 11px;
  }
  
  .bundle-product-material {
    font-size: 10px;
  }
  
  .add-to-bag-btn, .bundle-cart-btn {
    font-size: 10px;
    padding: 6px 12px;
  }
  
  .checkout-section {
    padding: 14px 12px 18px;
  }
  
  .discount-code-section {
    flex-direction: column;
    gap: 8px;
    margin-bottom: 10px;
  }
  
  .discount-input {
    width: 100%;
    padding: 8px 12px;
  }
  
  .apply-discount-btn {
    width: 100%;
    padding: 8px 16px;
    font-size: 12px;
  }
  
  .shipping-info {
    flex-direction: column;
    gap: 12px;
    margin-bottom: 16px;
  }
  
  .shipping-text p {
    font-size: 11px;
    margin-bottom: 8px;
  }
  
  .payment-methods {
    gap: 3px;
  }
  
  .payment-icon {
    height: 18px;
    max-width: 36px;
  }
  
  .shipping-totals {
    margin-left: 0;
    text-align: left;
    min-width: auto;
    width: 100%;
  }
  
  .shipping-row, .total-row {
    margin-bottom: 8px;
  }
  
  .shipping-label, .total-label, .shipping-cost, .total-amount {
    font-size: 12px;
  }
  
  .checkout-btn {
    padding: 10px 20px;
    font-size: 15px;
  }
  
  .savings-amount {
    margin-right: 0;
  }
}

@media (max-width: 360px) {
  .cart-content {
    width: 100%;
  }
  
  .free-shipping-progress {
    padding: 8px 10px 12px;
  }
  
  .free-shipping-progress .free-shipping-progress-text {
    font-size: 11px;
  }
  
  .cart-header {
    padding: 10px;
  }
  
  .cart-items-container {
    padding: 0 10px;
  }
  
  .cart-item {
    padding: 12px 0;
  }
  
  .cart-item-title {
    font-size: 13px;
  }
  
  .bundle-product {
    flex: 0 0 100px;
  }
  
  .bundle-product-image {
    height: 80px;
  }
  
  .checkout-section {
    padding: 12px 10px 16px;
  }
}
</style>

<script>
// Listen for cart refresh events from cart.js
$(document).on('cart:refresh', function() {
  console.log('Cart refresh event triggered');
  // Add a small delay to ensure DOM is ready
  setTimeout(function() {
    updateBundleProducts();
  }, 50);
});

// Listen for cart refresh complete events
$(document).on('cart:refresh-complete', function() {
  console.log('Cart refresh complete event triggered');
  // Ensure cart content is visible after refresh
  setTimeout(function() {
    if ($('.r-side-cart').hasClass('active')) {
      console.log('Cart is active, ensuring content visibility');
      $('.Cart_Drawer__Content').show();
      $('.empty-cart').hide();
    }
  }, 100);
});




// Format money helper function
function formatMoney(cents) {
  // Convert to number if it's a string
  if (typeof cents === 'string') {
    cents = parseFloat(cents);
  }
  
  // Handle invalid input
  if (isNaN(cents)) {
    // Use Shopify's currency code if available, otherwise default to USD
    var currencyCode = (typeof Shopify !== 'undefined' && Shopify.currency && Shopify.currency.active) ? Shopify.currency.active : 'USD';
    if (currencyCode === 'INR') {
      return "Rs. 0.00";
    } else {
      return "$0.00";
    }
  }
  
  // Convert cents to dollars and format
  var dollars = cents / 100;
  var currencyCode = (typeof Shopify !== 'undefined' && Shopify.currency && Shopify.currency.active) ? Shopify.currency.active : 'USD';
  
  if (currencyCode === 'INR') {
    // For Indian Rupees, use Rs. symbol
    return "Rs. " + dollars.toFixed(2);
  } else {
    // Default to USD
    return "$" + dollars.toFixed(2);
  }
}





// Bundle slide navigation class
class BundleSlideNavigation {
  constructor() {
    // Call setupBundleDragAndTouch directly
    setTimeout(() => {
      this.setupBundleDragAndTouch();
      this.setupVariantSelection();
    }, 300);
  }

  setupBundleDragAndTouch() {
    const bundleContainer = document.getElementById('bundle-products-scroll');
    if (!bundleContainer) {
      return;
    }

    let currentIndex = 0;
    let cardWidth;
    let totalCards;
    let visibleCards;
    let isDragging = false;
    let startPos = 0;
    let currentTranslate = 0;
    let prevTranslate = 0;
    let animationID = 0;
    let clickPrevented = false;
    let lastDeltaX = 0;
    let hasDragged = false;
    let dragStartTime = 0;
    let dragThreshold = 10;

    // Calculate dimensions
    function calculateDimensions() {
      const bundleProducts = bundleContainer.querySelectorAll('.bundle-product');
      if (bundleProducts.length === 0) return;
      
      totalCards = bundleProducts.length;
      const firstCard = bundleProducts[0];
      const style = window.getComputedStyle(firstCard);
      const marginLeft = parseInt(style.marginLeft) || 0;
      const marginRight = parseInt(style.marginRight) || 0;
      
      cardWidth = firstCard.offsetWidth + marginLeft + marginRight;
      
      const containerWidth = bundleContainer.parentElement.offsetWidth;
      visibleCards = Math.floor(containerWidth / cardWidth);
      visibleCards = Math.max(1, visibleCards);
    }

    // Initialize
    calculateDimensions();
    updateBundlePosition();

    // Handle window resize
    window.addEventListener('resize', function() {
      calculateDimensions();
      if (currentIndex > totalCards - visibleCards) {
        currentIndex = Math.max(0, totalCards - visibleCards);
      }
      updateBundlePosition();
    });

    // Update bundle position
    function updateBundlePosition() {
      if (isNaN(cardWidth) || cardWidth <= 0) {
        calculateDimensions();
        if (isNaN(cardWidth) || cardWidth <= 0) return;
      }
      const translateX = -currentIndex * cardWidth;
      bundleContainer.style.transform = `translateX(${translateX}px)`;
    }

    // Check if target is interactive
    function isInteractiveTarget(target) {
      return target.closest('.variant-dot') || 
             target.closest('.bundle-cart-btn') || 
             target.closest('button') ||
             target.closest('input') ||
             target.closest('select');
    }

    // Prevent link clicks during drag
    bundleContainer.addEventListener('click', function(e) {
      if (hasDragged) {
        e.preventDefault();
        e.stopPropagation();
        hasDragged = false;
      }
    });

    // Mouse drag support
    let mouseStartTime = 0;
    let mouseStartX = 0;
    let mouseLastX = 0;
    let mouseLastTime = 0;

    bundleContainer.addEventListener('mousedown', function(e) {
      if (isInteractiveTarget(e.target)) {
        return;
      }
      if (e.button !== 0) return;
      e.preventDefault();
      isDragging = true;
      clickPrevented = false;
      hasDragged = false;
      dragStartTime = Date.now();
      mouseStartX = startPos = e.clientX;
      mouseLastX = e.clientX;
      mouseStartTime = mouseLastTime = Date.now();
      prevTranslate = -currentIndex * cardWidth;
      bundleContainer.classList.add('no-transition');
      bundleContainer.parentElement.classList.add('grabbing');
      cancelAnimationFrame(animationID);
      animationID = requestAnimationFrame(animation);
    });

    window.addEventListener('mousemove', function(e) {
      if (!isDragging) return;
      const currentPosition = e.clientX;
      const diff = currentPosition - mouseStartX;
      lastDeltaX = diff;
      currentTranslate = prevTranslate + diff;
      mouseLastX = currentPosition;
      mouseLastTime = Date.now();
      
      const maxTranslate = 0;
      const minTranslate = -(totalCards - visibleCards) * cardWidth;
      if (currentTranslate > maxTranslate) {
        currentTranslate = maxTranslate + diff * 0.3;
      } else if (currentTranslate < minTranslate) {
        currentTranslate = minTranslate + diff * 0.3;
      }
      
      if (Math.abs(diff) > dragThreshold) {
        clickPrevented = true;
        hasDragged = true;
      }
    });

    function mouseDragEnd(e) {
      if (!isDragging) return;
      
      const dragDuration = Date.now() - dragStartTime;
      const movedBy = mouseLastX - mouseStartX;
      
      if (dragDuration < 200 && Math.abs(movedBy) < dragThreshold) {
        isDragging = false;
        bundleContainer.classList.remove('no-transition');
        bundleContainer.parentElement.classList.remove('grabbing');
        cancelAnimationFrame(animationID);
        return;
      }
      
      isDragging = false;
      bundleContainer.classList.remove('no-transition');
      bundleContainer.parentElement.classList.remove('grabbing');
      
      const timeElapsed = (mouseLastTime - mouseStartTime) || 1;
      const velocity = movedBy / timeElapsed;
      let targetIndex = currentIndex;
      
      const flickVelocity = 0.5;
      if (cardWidth > 0) {
        if (Math.abs(velocity) > flickVelocity) {
          if (velocity < 0) {
            targetIndex = Math.min(totalCards - visibleCards, currentIndex + 2);
          } else {
            targetIndex = Math.max(0, currentIndex - 2);
          }
        } else if (Math.abs(movedBy) > cardWidth * 0.15) {
          if (movedBy < 0) {
            targetIndex = Math.min(totalCards - visibleCards, currentIndex + 2);
          } else {
            targetIndex = Math.max(0, currentIndex - 2);
          }
        } else {
          targetIndex = currentIndex;
        }
      }
      
      targetIndex = Math.max(0, Math.min(totalCards - visibleCards, targetIndex));
      currentIndex = targetIndex;
      updateBundlePosition();
      
      cancelAnimationFrame(animationID);
      setTimeout(() => {
        clickPrevented = false;
      }, 550);
    }

    window.addEventListener('mouseup', mouseDragEnd);
    bundleContainer.addEventListener('mouseleave', mouseDragEnd);

    // Touch swipe support for mobile
    let touchStartX = 0;
    let touchStartY = 0;
    let touchCurrentX = 0;
    let touchStartTime = 0;
    let touchPrevTranslate = 0;
    let touchIsDragging = false;
    let touchHasDragged = false;
    let touchDirection = null;

    bundleContainer.addEventListener('touchstart', function(e) {
      if (isInteractiveTarget(e.target)) {
        return;
      }
      if (e.touches.length !== 1) return;
      touchIsDragging = true;
      touchHasDragged = false;
      touchDirection = null;
      dragStartTime = Date.now();
      touchStartX = e.touches[0].clientX;
      touchStartY = e.touches[0].clientY;
      touchCurrentX = e.touches[0].clientX;
      touchStartTime = Date.now();
      touchPrevTranslate = -currentIndex * cardWidth;
      bundleContainer.classList.add('no-transition');
      bundleContainer.parentElement.classList.add('grabbing');
    }, { passive: true });

    bundleContainer.addEventListener('touchmove', function(e) {
      if (!touchIsDragging || e.touches.length !== 1) return;

      const currentX = e.touches[0].clientX;
      const currentY = e.touches[0].clientY;

      if (touchDirection === null) {
        const deltaX = Math.abs(currentX - touchStartX);
        const deltaY = Math.abs(currentY - touchStartY);

        if (deltaX > 5 || deltaY > 5) {
          if (deltaX > deltaY) {
            touchDirection = 'horizontal';
          } else {
            touchDirection = 'vertical';
          }
        }
      }

      if (touchDirection === 'horizontal') {
        e.preventDefault();
        touchCurrentX = currentX;
        const diff = touchCurrentX - touchStartX;
        currentTranslate = touchPrevTranslate + diff;
        
        const maxTranslate = 0;
        const minTranslate = -(totalCards - visibleCards) * cardWidth;
        if (currentTranslate > maxTranslate) {
          currentTranslate = maxTranslate + diff * 0.3;
        } else if (currentTranslate < minTranslate) {
          currentTranslate = minTranslate + diff * 0.3;
        }
        
        bundleContainer.style.transform = `translateX(${currentTranslate}px)`;
        
        if (Math.abs(diff) > dragThreshold) {
          touchHasDragged = true;
          hasDragged = true;
        }
      }
    }, { passive: false });

    bundleContainer.addEventListener('touchend', function(e) {
      if (!touchIsDragging) return;

      const wasHorizontal = touchDirection === 'horizontal';
      
      touchIsDragging = false;
      touchDirection = null;

      if (!wasHorizontal) {
        return;
      }
      
      const dragDuration = Date.now() - dragStartTime;
      const movedBy = touchCurrentX - touchStartX;
      
      if (dragDuration < 200 && Math.abs(movedBy) < dragThreshold) {
        bundleContainer.classList.remove('no-transition');
        bundleContainer.parentElement.classList.remove('grabbing');
        return;
      }
      
      bundleContainer.classList.remove('no-transition');
      bundleContainer.parentElement.classList.remove('grabbing');
      
      const timeElapsed = (Date.now() - touchStartTime) || 1;
      const velocity = movedBy / timeElapsed;
      let targetIndex = currentIndex;
      const flickVelocity = 0.5;
      
      if (cardWidth > 0) {
        if (Math.abs(velocity) > flickVelocity) {
          if (velocity < 0) {
            targetIndex = Math.min(totalCards - visibleCards, currentIndex + 2);
          } else {
            targetIndex = Math.max(0, currentIndex - 2);
          }
        } else if (Math.abs(movedBy) > cardWidth * 0.15) {
          if (movedBy < 0) {
            targetIndex = Math.min(totalCards - visibleCards, currentIndex + 2);
          } else {
            targetIndex = Math.max(0, currentIndex - 2);
          }
        }
      }
      
      targetIndex = Math.max(0, Math.min(totalCards - visibleCards, targetIndex));
      currentIndex = targetIndex;
      updateBundlePosition();
      
      setTimeout(() => {
        hasDragged = false;
      }, 550);
    });

    // Animation function
    function animation() {
      if (isDragging) {
        bundleContainer.style.transform = `translateX(${currentTranslate}px)`;
        animationID = requestAnimationFrame(animation);
      }
    }
  }
  
  // Setup variant selection for bundle products
  setupVariantSelection() {
    const bundleContainer = document.getElementById('bundle-products-scroll');
    if (!bundleContainer) return;
    
    // Handle variant dot clicks
    bundleContainer.addEventListener('click', function(e) {
      const variantDot = e.target.closest('.variant-dot');
      if (variantDot) {
        e.preventDefault();
        const productId = variantDot.closest('.bundle-product').dataset.productId;
        const variantId = variantDot.dataset.variantId;
        const variantIndex = variantDot.dataset.variantIndex;
        
        // Update selected variant dot
        const productContainer = variantDot.closest('.bundle-product');
        const variantDots = productContainer.querySelectorAll('.variant-dot');
        variantDots.forEach(dot => {
          dot.classList.remove('selected');
        });
        variantDot.classList.add('selected');
        
        // Update the Add to Bag button with the selected variant ID
        const addToBagBtn = productContainer.querySelector('.bundle-cart-btn');
        if (addToBagBtn) {
          addToBagBtn.dataset.variantId = variantId;
        }
        
        // Update the fabric name
        const materialElement = productContainer.querySelector('.bundle-product-material');
        if (materialElement) {
          const fabric = variantDot.dataset.fabric || '';
          materialElement.textContent = fabric;
        }
        
        // Update product image based on selected variant
        const productImage = productContainer.querySelector('.bundle-product-image img');
        if (productImage) {
          // Get variant data from window object (would be populated by AJAX)
          const variantData = window[`bundleProductVariants_${productId}`];
          if (variantData && variantData[variantIndex]) {
            const variant = variantData[variantIndex];
            if (variant.featured_image && variant.featured_image.url) {
              // Add a small delay to ensure smooth transition
              productImage.style.opacity = '0.5';
              setTimeout(() => {
                productImage.src = variant.featured_image.url;
                productImage.alt = variant.title;
                productImage.style.opacity = '1';
              }, 100);
            }
          }
        }
              
        // Update product price based on selected variant
        const productPrice = productContainer.querySelector('.bundle-product-price');
        if (productPrice) {
          const variantData = window[`bundleProductVariants_${productId}`];
          if (variantData && variantData[variantIndex]) {
            const variant = variantData[variantIndex];
            if (variant.price) {
              // Format price using existing formatMoney function
              productPrice.textContent = formatMoney(variant.price);
            }
          }
        }
      }
    });
  }
}

// Function to apply discount code
function applyDiscountCode(code) {
  if (!code) {
    alert("Please enter a discount code");
    return;
  }
  
  // Add loading state to the apply button
  $('#apply-discount').prop("disabled", true).addClass("is-loading");
  
  $.ajax({
    type: "POST",
    url: "/discount/" + code,
    dataType: "json",
    success: function(data) {
      // Refresh cart content to show updated prices
      updateBundleProducts();
      
      // Show success message
      alert("Discount code applied successfully!");
      
      // Clear the discount code input
      $('#discount-code').val('');
      
      // Remove loading state
      $('#apply-discount').prop("disabled", false).removeClass("is-loading");
    },
    error: function(XMLHttpRequest, textStatus) {
      // Handle error
      try {
        var data = JSON.parse(XMLHttpRequest.responseText);
        alert("Error applying discount: " + data.description);
      } catch (e) {
        alert("Error applying discount code. Please try again.");
      }
      
      // Remove loading state
      $('#apply-discount').prop("disabled", false).removeClass("is-loading");
    }
  });
}

// Function to initialize bundle product images with selected variants
function initializeBundleProductImages() {
  $('.bundle-product').each(function() {
    var $product = $(this);
    var productId = $product.data('product-id');
    var $selectedDot = $product.find('.variant-dot.selected');
    
    if ($selectedDot.length > 0) {
      var variantIndex = $selectedDot.data('variant-index');
      var variantData = window[`bundleProductVariants_${productId}`];
      
      if (variantData && variantData[variantIndex]) {
        var variant = variantData[variantIndex];
        var $productImage = $product.find('.bundle-product-image img');
        var $productPrice = $product.find('.bundle-product-price');
        var $materialElement = $product.find('.bundle-product-material');
        var $addToBagBtn = $product.find('.bundle-cart-btn');
        
        // Update image
        if (variant.featured_image && variant.featured_image.url && $productImage.length > 0) {
          $productImage.attr('src', variant.featured_image.url);
          $productImage.attr('alt', variant.title);
        }
        
        // Update price
        if (variant.price && $productPrice.length > 0) {
          $productPrice.text(formatMoney(variant.price));
        }
        
        // Update material
        if (variant.fabric && $materialElement.length > 0) {
          $materialElement.text(variant.fabric);
        }
        
        // Update add to bag button variant ID
        if ($addToBagBtn.length > 0) {
          $addToBagBtn.attr('data-variant-id', variant.id);
        }
      }
    }
  });
}

// Initialize bundle slide navigation
$(document).ready(function() {
  // Initialize on page load
  setTimeout(() => {
    new BundleSlideNavigation();
    initializeBundleProductImages();
    updateBundleProducts();
  }, 100);
  
  // Cart close functionality
  $(document).on('click', '.cart-close, .cart-overlay', function(e) {
    e.preventDefault();
    $('.r-side-cart').removeClass('active');
    $('body').removeClass('g-cart-open');
  });
  
  // Initialize on cart open
  $(document).on('click', '.cart-icon', function() {
    setTimeout(() => {
      new BundleSlideNavigation();
      initializeBundleProductImages();
    }, 300);
  });
  
  // Initialize after cart refresh
  $(document).on('cart:refresh-complete', function() {
    // Clear any stuck loading states immediately
    $('.bundle-cart-btn').prop("disabled", false).removeClass("is-loading");
  });
  

  
  // Safety check for stuck loading states - runs every 5 seconds
  setInterval(function() {
    $('.bundle-cart-btn.is-loading').each(function() {
      var $button = $(this);
      var loadingStartTime = $button.data('loading-start-time');
      var currentTime = new Date().getTime();
      
      // If button has been loading for more than 5 seconds, remove loading state
      if (!loadingStartTime || (currentTime - loadingStartTime > 5000)) {
        $button.prop("disabled", false).removeClass("is-loading");
      }
    });
  }, 5000);
  
  // Add to Bag button handler for bundle products (only in cart)
  $(document).on('click', '.bundle-cart-btn', function(e) {
    e.preventDefault();
    e.stopPropagation(); // Prevent event bubbling
    e.stopImmediatePropagation(); // Prevent other handlers from running
    
    var $button = $(this);
    var variantId = $button.data('variant-id');
    var quantity = 1; // Default quantity
    
    console.log('Bundle button clicked:', variantId);
    
    // Prevent double-clicking or if cart operation is in progress
    if ($button.hasClass('is-loading') || $button.prop('disabled') || isCartOperationInProgress) {
      console.log('Button click ignored - already processing');
      return false;
    }
    
    // Validate variant ID
    if (!variantId) {
      console.log('No variant ID found');
      alert('Product variant not found');
      return false;
    }
    
    // Add loading state ONLY to this button and store loading start time
    $button.prop("disabled", true)
           .addClass("is-loading")
           .data('loading-start-time', new Date().getTime());
    
    console.log('Calling addBundleItemToCart...');
    
    // Add item to cart via AJAX
    addBundleItemToCart(variantId, quantity);
    
    // Safety measure: Remove loading state after a timeout
    setTimeout(function() {
      if ($button.hasClass('is-loading')) {
        console.log('Timeout: Removing loading state from button');
        $button.prop("disabled", false).removeClass("is-loading");
        isCartOperationInProgress = false; // Reset flag on timeout
      }
    }, 5000); // 5 seconds timeout as a fallback
  });
  
  // Quantity increase button handler
  $(document).on('click', '.quantity-btn.plus', function(e) {
    e.preventDefault();
    var $button = $(this);
    var $itemRow = $button.closest('.cart-item');
    var itemKey = $itemRow.data('item-key');
    var currentQuantity = parseInt($button.siblings('.quantity-input').val());
    var newQuantity = currentQuantity + 1;
    
    // Update quantity input immediately for better UX
    $button.siblings('.quantity-input').val(newQuantity);
    
    // Update item quantity in cart
    updateCartItemQuantity(itemKey, newQuantity);
  });
  
  // Quantity decrease button handler
  $(document).on('click', '.quantity-btn.minus', function(e) {
    e.preventDefault();
    var $button = $(this);
    var $itemRow = $button.closest('.cart-item');
    var itemKey = $itemRow.data('item-key');
    var currentQuantity = parseInt($button.siblings('.quantity-input').val());
    var newQuantity = Math.max(1, currentQuantity - 1); // Minimum quantity of 1
    
    // Update quantity input immediately for better UX
    $button.siblings('.quantity-input').val(newQuantity);
    
    // If quantity is 0, remove the item, otherwise update quantity
    if (newQuantity === 0) {
      removeItemFromCart(itemKey);
    } else {
      updateCartItemQuantity(itemKey, newQuantity);
    }
  });
  
  // Remove item button handler
  $(document).on('click', '.cart-item-remove', function(e) {
    e.preventDefault();
    var $button = $(this);
    var itemKey = $button.data('item-key');
    
    // Remove item from cart
    removeItemFromCart(itemKey);
  });
  
  // Apply discount code handler
  $(document).on('click', '#apply-discount', function(e) {
    e.preventDefault();
    var code = $('#discount-code').val().trim();
    applyDiscountCode(code);
  });
  
  // Allow applying discount with Enter key
  $(document).on('keypress', '#discount-code', function(e) {
    if (e.which === 13) { // Enter key
      e.preventDefault();
      var code = $(this).val().trim();
      applyDiscountCode(code);
    }
  });
});

// Function to update bundle products after cart changes
function updateBundleProducts() {
  console.log('updateBundleProducts called - using server-side cart HTML');
  
  // Instead of generating HTML dynamically, fetch the complete cart from server
  $.ajax({
    type: "GET",
    url: "/cart",
    dataType: "html",
    cache: false,
    success: function(html) {
      console.log('Cart HTML received from server');
      
      var $cartHtml = $(html);
      var $newCartSection = $cartHtml.find('.r-side-cart');
      
      if ($newCartSection.length > 0) {
        // Get current cart state
        var wasActive = $('.r-side-cart').hasClass('active');
        var bodyHasCartOpen = $('body').hasClass('g-cart-open');
        
        // Replace cart content with fresh server HTML
        $('.r-side-cart').html($newCartSection.html());
        
        // Restore cart state
        if (wasActive) {
          $('.r-side-cart').addClass('active');
        }
        if (bodyHasCartOpen) {
          $('body').addClass('g-cart-open');
        }
        
        // Update cart counts from the fresh HTML
        var cartCount = $cartHtml.find('.count').text() || '0';
        $(".count").html(cartCount);
        $("#cart-count").html(cartCount);
        $(".hcart").html(cartCount);
        
        if (cartCount == '0') {
          console.log('Cart is empty');
          $(".hcart").hide();
        } else {
          console.log('Cart has', cartCount, 'items');
          $(".hcart").show();
        }
        
        console.log('Cart updated with server HTML successfully');
        
        // Re-initialize bundle functionality after cart update
        setTimeout(function() {
          new BundleSlideNavigation();
          initializeBundleProductImages();
          console.log('Bundle functionality re-initialized');
        }, 100);
        
      } else {
        console.error('No cart section found in server response');
      }
    },
    error: function(xhr, status, error) {
      console.error('Error fetching cart HTML:', error);
      // Fallback to JSON API if HTML fetch fails
      $.ajax({
        type: "GET",
        url: "/cart.js",
        dataType: "json",
        success: function(cartData) {
          // Update cart counts only
          $(".count").html(cartData.item_count);
          $("#cart-count").html(cartData.item_count);
          $(".hcart").html(cartData.item_count);
          
          if (cartData.item_count > 0) {
            $(".hcart").show();
          } else {
            $(".hcart").hide();
          }
        }
      });
    }
  });
}

// Global flag to prevent multiple simultaneous cart operations
var isCartOperationInProgress = false;
var cartOperationTimeout = null;

// Function to add item to cart from bundle section
function addBundleItemToCart(variantId, quantity) {
  // Clear any existing timeout
  if (cartOperationTimeout) {
    clearTimeout(cartOperationTimeout);
  }
  
  // Prevent multiple simultaneous operations
  if (isCartOperationInProgress) {
    console.log('Cart operation already in progress, skipping...');
    return;
  }
  
  isCartOperationInProgress = true;
  var $button = $('.bundle-cart-btn[data-variant-id="' + variantId + '"]');
  
  console.log('Adding bundle item to cart:', variantId, 'quantity:', quantity);
  
  // Use Shopify's cart/add.js with proper success/error handling
  $.ajax({
    type: "POST",
    url: "/cart/add.js",
    dataType: "json",
    data: {
      id: variantId,
      quantity: quantity
    },
    success: function(item) {
      console.log('Successfully added item to cart:', item);
      
      // Remove loading state from button
      $button.prop("disabled", false).removeClass("is-loading");
      
      // Reset the flag
      isCartOperationInProgress = false;
      
      // Use Shopify.onSuccess which is now properly handled by cart.js
      if (typeof Shopify !== 'undefined' && typeof Shopify.onSuccess === 'function') {
        Shopify.onSuccess();
      } else {
        // Fallback: trigger cart refresh directly
        $(document).trigger('cart:refresh');
      }
    },
    error: function(xhr) {
      console.log('Error adding item to cart:', xhr);
      
      // Remove loading state from button
      $button.prop("disabled", false).removeClass("is-loading");
      
      // Reset the flag immediately on error
      isCartOperationInProgress = false;
      
      // Use Shopify.onError which is now properly handled by cart.js
      if (typeof Shopify !== 'undefined' && typeof Shopify.onError === 'function') {
        Shopify.onError(xhr, 'error');
      } else {
        // Fallback error handling
        try {
          var data = JSON.parse(xhr.responseText);
          alert(data.message || 'Error adding item to cart');
        } catch (e) {
          alert('Error adding item to cart');
        }
      }
    }
  });
}

// Function to update cart item quantity
function updateCartItemQuantity(itemKey, quantity) {
  $.ajax({
    type: "POST",
    url: "/cart/change.js",
    dataType: "json",
    data: {
      id: itemKey,
      quantity: quantity
    },
    success: function(cart) {
      // Trigger cart refresh
      $(document).trigger('cart:refresh');
    },
    error: function(xhr) {
      var data = JSON.parse(xhr.responseText);
      alert(data.message || 'Error updating cart');
      // Refresh to restore correct quantities
      $(document).trigger('cart:refresh');
    }
  });
}

// Function to remove item from cart
function removeItemFromCart(itemKey) {
  $.ajax({
    type: "POST",
    url: "/cart/change.js",
    dataType: "json",
    data: {
      id: itemKey,
      quantity: 0
    },
    success: function(cart) {
      // Trigger cart refresh
      $(document).trigger('cart:refresh');
    },
    error: function(xhr) {
      var data = JSON.parse(xhr.responseText);
      alert(data.message || 'Error removing item');
    }
  });
}

// Function to apply discount code
function applyDiscountCode(code) {
  if (!code) {
    alert('Please enter a discount code');
    return;
  }
  
  // Redirect to checkout with discount code
  window.location.href = '/checkout?discount=' + encodeURIComponent(code);
}
</script>

