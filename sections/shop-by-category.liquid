<!-- shop_by_category section start -->
<div class="shop-by-category-section">
  <div class="containershopbycategory">
    <h2 class="section-title">{{ section.settings.title }}</h2>
    
    <div class="category-carousel-container">
      <div class="category-carousel">
        {% for block in section.blocks %}
          {% if block.type == 'category' %}
            <div class="category-item" {{ block.shopify_attributes }}>
              <a href="{{ block.settings.link }}" class="category-link">
                <div class="category-image">
                  {% if block.settings.image != blank %}
                    <img 
                      src="{{ block.settings.image | img_url: 'master' }}" 
                      alt="{{ block.settings.title }}"
                      loading="lazy"
                      width="{{ block.settings.image.width }}"
                      height="{{ block.settings.image.height }}"
                    >
                  {% else %}
                    {{ 'image' | placeholder_svg_tag: 'placeholder-svg' }}
                  {% endif %}
                </div>
                <div class="category-info">
                  <h3 class="category-title">{{ block.settings.title }}</h3>
                  {% if block.settings.subtitle != blank %}
                    <p class="category-subtitle">{{ block.settings.subtitle }}</p>
                  {% endif %}
                </div>
              </a>
            </div>
          {% endif %}
        {% endfor %}
      </div>
      
      <div class="carousel-navigation">
        <button class="carousel-prev" aria-label="Previous category">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M15 18L9 12L15 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </button>
        <button class="carousel-next" aria-label="Next category">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M9 18L15 12L9 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </button>
        <div class="carousel-indicator-track">
          <div class="indicator-line"></div>
        </div>
      </div>
    </div>
  </div>
</div>
<!-- shop_by_category section end -->

<style>
  .shop-by-category-section {
    padding: 40px 0;
    background-color: {{ section.settings.background_color }};
  }
  
  .containershopbycategory {
    margin: 0 auto;
    padding: 0 40px;
  }
  
  .section-title {
    font-size: 48px;
    font-weight: 550;
    letter-spacing: 0.5px;
    margin-bottom: 30px;
    text-transform: normal;
    text-align: left;
    color: {{ section.settings.title_color }};
  }
  
  .category-carousel-container {
    position: relative;
    overflow: hidden; 
  }
  
  .category-carousel {
    display: flex;
    gap: 20px;
    overflow-x: hidden; 
    padding: 10px 0; 
    -webkit-overflow-scrolling: touch; 
    cursor: grab;
    user-select: none; 
  }
  
  .category-carousel.dragging {
    cursor: grabbing;
  }
  
  .category-item {
    flex: 0 0 auto;
    width: calc(30% - 7.5px); 
    position: relative;
    border-radius: 8px;
    overflow: hidden;
  }
  
  .category-link {
    display: block;
    text-decoration: none;
    color: inherit;
  }
  
  .category-image {
    position: relative;
    overflow: hidden;
    border-radius: 8px;
    aspect-ratio: 3/4;
  }
  
  .category-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    pointer-events: none; 
  }
  
  .category-info {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    padding: 15px;
    color: #fff;
  }
  
  .category-title {
    font-size: 18px;
    font-weight: 600;
    margin: 0 0 5px;
    text-transform: normal;
  }
  
  .category-subtitle {
    font-size: 14px;
    margin: 0;
    opacity: 0.9;
  }
  
  .carousel-navigation {
    display: flex;
    align-items: center;
    margin-top: 20px;
    gap: 15px;
  }
  
  .carousel-prev,
  .carousel-next {
    background: transparent;
    color: #000;
    border: none;
    padding: 0;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: opacity 0.2s ease;
  }

  .carousel-prev:disabled,
  .carousel-next:disabled {
    opacity: 0.4;
    cursor: not-allowed;
  }
  
  .carousel-indicator-track { 
    position: relative;
    width: 160px;
    height: 2px;
    background-color: #e0e0e0;
    border-radius: 1px;
    /* overflow: hidden; No longer needed if line grows from left:0 */
  }
  
  .indicator-line {
    position: absolute;
    top: 0;
    left: 0; /* MODIFIED: Always starts at left: 0 */
    height: 100%;
    width: 0%; /* MODIFIED: Starts at 0 width */
    background-color: #000;
    /* MODIFIED: Transition only width, transform is no longer used for positioning */
    transition: width 0.4s cubic-bezier(0.23, 1, 0.32, 1); 
    border-radius: 1px;
  }
  
  /* Mobile styles */
  @media (max-width: 991px) {
    .containershopbycategory {
      padding: 0 15px !important;
    }
    
    .section-title {
      font-size: 28px;
      font-weight: 550;
      letter-spacing: 0.5px;
      margin-bottom: 20px;
      text-transform: normal;
      text-align: left !important;
    }
    
    .category-carousel-container {
      margin-right: -14px;
      margin-bottom: 30px;
    }
    
    .category-carousel {
      gap: 10px;
      padding: 10px 15% 10px 0; /* Added right padding for better spacing on mobile */
    }
    
    .category-item {
      width: 90%;
    }
    
    .carousel-navigation {
      justify-content: center;
      margin-right: 15px;
    }
    
    .carousel-prev,
    .carousel-next {
      display: none;
    }
    
    .carousel-indicator-track {
      width: 200px;
    }
  }
  
  /* @media (max-width: 767px) {
    .shop-by-category-section {
      padding: 30px 0;
    }
    .category-carousel {
      gap: 10px;
    }
    .category-item {
      width: calc(80% - 15px); 
    }
    .category-title {
      font-size: 16px;
    }
    .category-subtitle {
      font-size: 12px;
    }
  } */
  
  /* Prevent text/image selection while dragging */
  .category-carousel.dragging {
    user-select: none;
    pointer-events: none;
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const carouselContainer = document.querySelector('.category-carousel-container');
  if (!carouselContainer) return;

  const carousel = carouselContainer.querySelector('.category-carousel');
  const items = Array.from(carousel.querySelectorAll('.category-item'));
  const prevButton = carouselContainer.querySelector('.carousel-prev');
  const nextButton = carouselContainer.querySelector('.carousel-next');
  const indicatorLine = carouselContainer.querySelector('.indicator-line');

  if (!carousel || items.length === 0 || !indicatorLine) {
    if (prevButton) prevButton.style.display = 'none';
    if (nextButton) nextButton.style.display = 'none';
    if (indicatorLine) indicatorLine.parentElement.style.display = 'none';
    return;
  }

  let currentIndex = 0;
  let itemWidth = 0;
  let gap = 0;
  let totalItemWidth = 0; 
  let visibleWidth = 0;
  let scrollWidth = 0;
  let maxScroll = 0;

  let currentScrollLeft = 0;
  let animationFrameId = null;

  // Touch swipe variables
  let touchStartX = 0;
  let touchStartY = 0;
  let touchScrollStart = 0;
  let isTouching = false;
  let lastTouchDeltaX = 0; // Track swipe direction
  let touchMoved = false; // Track if touch actually moved
  let touchDirection = null;

  // Mouse drag variables
  let isDragging = false;
  let dragStartX = 0;
  let dragScrollStart = 0;
  let lastMouseDeltaX = 0; // Track mouse drag direction
  let mouseMoved = false; // Track if mouse actually moved
  let clickPrevented = false; // Track if click should be prevented

  function calculateDimensions() {
    if (items.length === 0) return;
    visibleWidth = carousel.clientWidth;
    itemWidth = items[0].offsetWidth;
    const style = window.getComputedStyle(carousel);
    gap = parseFloat(style.gap) || (items.length > 1 ? (items[1].offsetLeft - items[0].offsetLeft - itemWidth) : 0);
    totalItemWidth = itemWidth + gap;
    
    scrollWidth = items.reduce((acc, item, index) => {
        let currentItemWidth = item.offsetWidth;
        return acc + currentItemWidth + (index < items.length - 1 ? gap : 0);
    }, 0);
    
    // Add extra padding for the last item on mobile to ensure proper spacing
    const isMobile = window.innerWidth <= 991;
    const rightPadding = isMobile ? (visibleWidth * 0.15) : 0; // 15% of visible width as right padding on mobile
    
    maxScroll = Math.max(0, scrollWidth + rightPadding - visibleWidth);
    
    if (carousel.scrollLeft > maxScroll) {
      carousel.scrollLeft = maxScroll;
    }
    currentScrollLeft = carousel.scrollLeft;
  }

  function updateButtonStates() {
    const epsilon = 1; 
    if (prevButton) prevButton.disabled = currentScrollLeft <= epsilon;
    if (nextButton) nextButton.disabled = currentScrollLeft >= maxScroll - epsilon;
  }

  function updateIndicator() {
    calculateDimensions(); 
    let scrollPercent;
    const epsilon = 1; 

    if (scrollWidth <= visibleWidth) { // Not scrollable or fully visible
        scrollPercent = 1; // Show as full if not scrollable
    } else if (currentScrollLeft <= epsilon) { 
        scrollPercent = 0;
    } else if (currentScrollLeft >= maxScroll - epsilon) { 
        scrollPercent = 1;
    } else if (maxScroll > 0) { 
        scrollPercent = currentScrollLeft / maxScroll;
    } else { 
        scrollPercent = 0; // Fallback
    }
    
    scrollPercent = Math.max(0, Math.min(1, scrollPercent)); // Clamp scrollPercent

    // MODIFIED: Indicator line grows in width, no translation
    indicatorLine.style.width = `${scrollPercent * 100}%`;
    // indicatorLine.style.transform = 'translateX(0%)'; // Ensure it's not translated if set elsewhere

    updateButtonStates();
  }

  function smoothScrollTo(targetScroll, duration = 400) {
    cancelAnimationFrame(animationFrameId);
    const startScroll = currentScrollLeft;
    const distance = targetScroll - startScroll;
    let startTime = null;

    function animationStep(timestamp) {
      if (!startTime) startTime = timestamp;
      const progress = Math.min((timestamp - startTime) / duration, 1);
      const easedProgress = 1 - Math.pow(1 - progress, 4); 
      
      currentScrollLeft = startScroll + distance * easedProgress;
      carousel.scrollLeft = currentScrollLeft;
      updateIndicator(); // Update indicator during animation

      if (progress < 1) {
        animationFrameId = requestAnimationFrame(animationStep);
      } else {
        currentScrollLeft = targetScroll; 
        carousel.scrollLeft = currentScrollLeft;
        updateIndicator(); // Final update
      }
    }
    animationFrameId = requestAnimationFrame(animationStep);
  }
  
  function onTouchStart(e) {
    if (!e.touches || e.touches.length !== 1) return;
    isTouching = true;
    touchMoved = false;
    touchDirection = null;
    touchStartX = e.touches[0].clientX;
    touchStartY = e.touches[0].clientY;
    touchScrollStart = currentScrollLeft;
    cancelAnimationFrame(animationFrameId);
  }

  function onTouchMove(e) {
    if (!isTouching || !e.touches || e.touches.length !== 1) return;
    const currentX = e.touches[0].clientX;
    const currentY = e.touches[0].clientY;

    if (touchDirection === null) {
      const deltaX = Math.abs(currentX - touchStartX);
      const deltaY = Math.abs(currentY - touchStartY);
      if (deltaX > 5 || deltaY > 5) {
        if (deltaX > deltaY) {
          touchDirection = 'horizontal';
        } else {
          touchDirection = 'vertical';
        }
      }
    }

    if (touchDirection === 'horizontal') {
      e.preventDefault();
      const deltaX = currentX - touchStartX;
      touchMoved = true;
      lastTouchDeltaX = deltaX; // Track direction
      currentScrollLeft = Math.max(0, Math.min(maxScroll, touchScrollStart - deltaX));
      carousel.scrollLeft = currentScrollLeft;
      updateIndicator();
    }
  }

  function onTouchEnd(e) {
    if (!isTouching) return;

    const wasHorizontal = touchDirection === 'horizontal';
    isTouching = false;
    touchDirection = null;

    if (!wasHorizontal || !touchMoved) {
      touchMoved = false;
      return;
    }
    
    // Only snap if actually moved (was dragging)
    if (touchMoved) {
      // Snap to nearest item
      if (totalItemWidth === 0) calculateDimensions();
      if (totalItemWidth === 0) return;
      let targetIndex = 0;
      if (lastTouchDeltaX < -10) { // Swiped right (next)
        targetIndex = Math.ceil(currentScrollLeft / totalItemWidth);
      } else if (lastTouchDeltaX > 10) { // Swiped left (previous)
        targetIndex = Math.floor(currentScrollLeft / totalItemWidth);
      } else {
        targetIndex = Math.round(currentScrollLeft / totalItemWidth);
      }
      targetIndex = Math.max(0, Math.min(items.length - 1, targetIndex));
      let targetScroll = targetIndex * totalItemWidth;
      
      // On mobile, ensure the last item has proper spacing by limiting scroll to maxScroll
      const isMobile = window.innerWidth <= 991;
      if (isMobile && targetIndex === items.length - 1) {
        targetScroll = Math.min(targetScroll, maxScroll);
      }
      
      targetScroll = Math.max(0, Math.min(targetScroll, maxScroll));
      currentIndex = targetIndex;
      smoothScrollTo(targetScroll);
    }
    
    touchMoved = false;
  }

  // Mouse drag handlers
  function onMouseDown(e) {
    isDragging = true;
    mouseMoved = false;
    clickPrevented = false;
    dragStartX = e.clientX;
    dragScrollStart = currentScrollLeft;
    cancelAnimationFrame(animationFrameId);
  }

  function onMouseMove(e) {
    if (!isDragging) return;
    const deltaX = e.clientX - dragStartX;
    
    if (!mouseMoved) {
      carousel.classList.add('dragging');
      mouseMoved = true;
      clickPrevented = true;
    }
    lastMouseDeltaX = deltaX; // Track direction
    currentScrollLeft = Math.max(0, Math.min(maxScroll, dragScrollStart - deltaX));
    carousel.scrollLeft = currentScrollLeft;
    updateIndicator();
    e.preventDefault();
  }

  function onMouseUp(e) {
    if (!isDragging) return;
    isDragging = false;
    carousel.classList.remove('dragging');
    
    // Only snap if actually moved (was dragging)
    if (mouseMoved) {
      // Snap to nearest item
      if (totalItemWidth === 0) calculateDimensions();
      if (totalItemWidth === 0) return;
      let targetIndex = 0;
      if (lastMouseDeltaX < -10) { // Swiped right (next)
        targetIndex = Math.ceil(currentScrollLeft / totalItemWidth);
      } else if (lastMouseDeltaX > 10) { // Swiped left (previous)
        targetIndex = Math.floor(currentScrollLeft / totalItemWidth);
      } else {
        targetIndex = Math.round(currentScrollLeft / totalItemWidth);
      }
      targetIndex = Math.max(0, Math.min(items.length - 1, targetIndex));
      let targetScroll = targetIndex * totalItemWidth;
      
      // On mobile, ensure the last item has proper spacing by limiting scroll to maxScroll
      const isMobile = window.innerWidth <= 991;
      if (isMobile && targetIndex === items.length - 1) {
        targetScroll = Math.min(targetScroll, maxScroll);
      }
      
      targetScroll = Math.max(0, Math.min(targetScroll, maxScroll));
      currentIndex = targetIndex;
      smoothScrollTo(targetScroll);
    }
    
    // Reset flags
    setTimeout(() => {
      mouseMoved = false;
      clickPrevented = false;
    }, 10);
  }

  if (prevButton) {
    prevButton.addEventListener('click', () => {
      if (totalItemWidth === 0) calculateDimensions();
      if (totalItemWidth === 0) return;
      let targetScroll = currentScrollLeft - totalItemWidth; 
      const targetIndex = Math.round(Math.max(0, targetScroll) / totalItemWidth);
      targetScroll = targetIndex * totalItemWidth;
      smoothScrollTo(Math.max(0, targetScroll));
    });
  }

  if (nextButton) {
    nextButton.addEventListener('click', () => {
      if (totalItemWidth === 0) calculateDimensions();
      if (totalItemWidth === 0) return;
      let targetScroll = currentScrollLeft + totalItemWidth;
      const targetIndex = Math.round(Math.min(maxScroll, targetScroll) / totalItemWidth);
      targetScroll = targetIndex * totalItemWidth;
      smoothScrollTo(Math.min(maxScroll, targetScroll));
    });
  }

  // Add touch event listeners for swipe
  carousel.addEventListener('touchstart', onTouchStart, { passive: false });
  carousel.addEventListener('touchmove', onTouchMove, { passive: false });
  carousel.addEventListener('touchend', onTouchEnd);
  carousel.addEventListener('touchcancel', onTouchEnd);

  // Add mouse event listeners for drag
  carousel.addEventListener('mousedown', onMouseDown);
  window.addEventListener('mousemove', onMouseMove);
  window.addEventListener('mouseup', onMouseUp);

  items.forEach(item => {
    const link = item.querySelector('.category-link');
    if (link) {
      link.addEventListener('click', (e) => {
        if (clickPrevented || touchMoved || mouseMoved) {
          e.preventDefault();
          e.stopPropagation();
        }
      });
    }
  });

  const resizeObserver = new ResizeObserver(() => {
    calculateDimensions();
    updateIndicator();
    let targetScroll = currentIndex * totalItemWidth; // Use the stored currentIndex
    targetScroll = Math.max(0, Math.min(targetScroll, maxScroll));
    currentScrollLeft = targetScroll; 
    carousel.scrollLeft = currentScrollLeft; 
    updateIndicator();
  });
  resizeObserver.observe(carousel);

  calculateDimensions();
  updateIndicator();
  
  if (maxScroll <= 0) {
    if (prevButton) prevButton.style.display = 'none';
    if (nextButton) nextButton.style.display = 'none';
    if (indicatorLine) indicatorLine.parentElement.style.display = 'none';
  }
});
</script>

{% schema %}
{
  "name": "Shop by Category",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "shop by category"
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background Color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title Color",
      "default": "#000000"
    }
  ],
  "blocks": [
    {
      "type": "category",
      "name": "Category",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Category Image"
        },
        {
          "type": "text",
          "id": "title",
          "label": "Category Title",
          "default": "Category Name"
        },
        {
          "type": "text",
          "id": "subtitle",
          "label": "Category Subtitle",
          "default": "Product description"
        },
        {
          "type": "url",
          "id": "link",
          "label": "Category Link"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Shop by Category",
      "category": "Collection",
      "blocks": [
        {
          "type": "category",
          "settings": {
            "title": "CORDURA",
            "subtitle": "Recycling Nylon"
          }
        },
        {
          "type": "category",
          "settings": {
            "title": "X-PAC",
            "subtitle": "VX21"
          }
        },
        {
          "type": "category",
          "settings": {
            "title": "LIMITED EDITION",
            "subtitle": "New Drop"
          }
        }
      ]
    }
  ]
}
{% endschema %}
