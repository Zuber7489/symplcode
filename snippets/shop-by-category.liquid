{% comment %}
  Shop by Category Snippet
  Include this in templates with: {% render 'shop-by-category' %}
{% endcomment %}

<!-- shop_by_category section start -->
<div class="shop-by-category-section">
  <div class="container">
    <h2 class="section-title">SHOP BY CATEGORY</h2>
    
    <div class="category-carousel-container">
      <div class="category-carousel">
        <!-- Customize these categories with your own content -->
        <div class="category-item">
          <a href="/collections/backpacks" class="category-link">
            <div class="category-image">
              <img 
                src="https://symplofficial.com/cdn/shop/files/5-side.jpg?v=1746048417" 
                alt="Backpacks"
                loading="lazy"
                width="400"
                height="500"
              >
            </div>
            <div class="category-info">
              <h3 class="category-title">BACKPACKS</h3>
              <p class="category-subtitle">Travel & Business</p>
            </div>
          </a>
        </div>
        
        <div class="category-item">
          <a href="/collections/wallets" class="category-link">
            <div class="category-image">
              <img 
                src="https://symplofficial.com/cdn/shop/files/2-front-pocket.jpg?v=1746048416" 
                alt="Wallets"
                loading="lazy"
                width="400"
                height="500"
              >
            </div>
            <div class="category-info">
              <h3 class="category-title">WALLETS</h3>
              <p class="category-subtitle">Minimalist Design</p>
            </div>
          </a>
        </div>
        
        <div class="category-item">
          <a href="/collections/accessories" class="category-link">
            <div class="category-image">
              <img 
                src="https://symplofficial.com/cdn/shop/files/CommuterPack_V2-17.jpg?v=1749559933" 
                alt="Accessories"
                loading="lazy"
                width="400"
                height="500"
              >
            </div>
            <div class="category-info">
              <h3 class="category-title">ACCESSORIES</h3>
              <p class="category-subtitle">Complete Your Look</p>
            </div>
          </a>
        </div>
        
        <div class="category-item">
          <a href="/collections/totes" class="category-link">
            <div class="category-image">
              <img 
                src="https://symplofficial.com/cdn/shop/files/5-side.jpg?v=1746048417" 
                alt="Tote Bags"
                loading="lazy"
                width="400"
                height="500"
              >
            </div>
            <div class="category-info">
              <h3 class="category-title">TOTE BAGS</h3>
              <p class="category-subtitle">Everyday Essentials</p>
            </div>
          </a>
        </div>
        
        <div class="category-item">
          <a href="/collections/limited-edition" class="category-link">
            <div class="category-image">
              <img 
                src="https://symplofficial.com/cdn/shop/files/2-front-pocket.jpg?v=1746048416" 
                alt="Limited Edition"
                loading="lazy"
                width="400"
                height="500"
              >
            </div>
            <div class="category-info">
              <h3 class="category-title">LIMITED EDITION</h3>
              <p class="category-subtitle">Exclusive Collection</p>
            </div>
          </a>
        </div>
      </div>
      
      <div class="carousel-navigation">
        <button class="carousel-prev" aria-label="Previous category">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M15 18L9 12L15 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </button>
        <button class="carousel-next" aria-label="Next category">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M9 18L15 12L9 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </button>
        <div class="carousel-indicator-track">
          <div class="indicator-line"></div>
        </div>
      </div>
    </div>
  </div>
</div>
<!-- shop_by_category section end -->

<style>
  .shop-by-category-section {
    padding: 40px 0;
    background-color: #ffffff;
  }
  
  .shop-by-category-section .container {
    margin: 0 auto;
    padding: 0 20px;
  }
  
  .shop-by-category-section .section-title {
    font-weight: 600;
    margin-bottom: 30px;
    text-transform: uppercase;
    text-align: left;
    color: #000000;
  }
  
  .category-carousel-container {
    position: relative;
    overflow: hidden; 
  }
  
  .category-carousel {
    display: flex;
    gap: 20px;
    overflow-x: hidden; 
    padding: 10px 0; 
    -webkit-overflow-scrolling: touch; 
    cursor: grab;
    user-select: none;
    transition: transform 0.3s;
  }
  
  .category-carousel.dragging {
    cursor: grabbing;
  }
  
  .category-item {
    flex: 0 0 auto;
    width: calc(33.333% - 12px); /* 3 items per screen - slightly bigger */
    position: relative;
    border-radius: 8px;
    overflow: hidden;
  }
  
  .category-link {
    display: block;
    text-decoration: none;
    color: inherit;
  }
  
  .category-image {
    position: relative;
    overflow: hidden;
    border-radius: 8px;
    aspect-ratio: 2/2.4;
  }
  
  .category-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    pointer-events: none; 
  }
  
  .category-info {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    padding: 15px;
    color: #fff;
  }
  
  .category-title {
    font-size: 18px;
    font-weight: 600;
    margin: 0 0 5px;
    text-transform: uppercase;
  }
  
  .category-subtitle {
    font-size: 14px;
    margin: 0;
    opacity: 0.9;
  }
  
  .carousel-navigation {
    display: flex;
    align-items: center;
    margin-top: 20px;
    gap: 15px;
  }
  
  .carousel-prev,
  .carousel-next {
    background: transparent;
    color: #000;
    border: none;
    padding: 4px;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .carousel-prev:hover,
  .carousel-next:hover {
    color: #333;
    transform: scale(1.1);
  }

  .carousel-prev:disabled,
  .carousel-next:disabled {
    opacity: 0.3;
    cursor: not-allowed;
    transform: none;
  }

  .carousel-prev:disabled:hover,
  .carousel-next:disabled:hover {
    color: #000;
    transform: none;
  }
  
  .carousel-indicator-track { 
    position: relative;
    width: 160px;
    height: 2px;
    background-color: #e0e0e0;
    border-radius: 1px;
  }
  
  .indicator-line {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 0%;
    background-color: #000;
    transition: width 0.4s cubic-bezier(0.23, 1, 0.32, 1); 
    border-radius: 1px;
  }
  
  /* Responsive styles - maintaining 3 items per screen */
  @media (max-width: 991px) {
    .category-item {
      width: calc(33.333% - 12px); /* Still 3 items on tablet - slightly bigger */
    }
  }
  
  @media (max-width: 767px) {
    .shop-by-category-section {
      padding: 30px 0;
    }
    .category-carousel {
      gap: 10px;
      padding: 0 10px; /* Add horizontal padding for mobile */
    }
    .category-item {
      width: calc(33.333% - 6px); /* 3 items on mobile - bigger */
      min-width: 100px; /* Ensures touchable area */
    }
    .category-title {
      font-size: 14px;
    }
    .category-subtitle {
      font-size: 12px;
    }
    /* Hide arrows on mobile */
    .carousel-prev,
    .carousel-next {
      display: none;
    }
    .carousel-indicator-track {
      margin-left: 0; /* Center the indicator when arrows are hidden */
    }
  }
  
  @media (max-width: 480px) {
    .category-item {
      width: calc(33.333% - 4px); /* Still 3 items on small mobile - even bigger */
      min-width: 90px;
    }
    .category-title {
      font-size: 12px;
    }
    .category-subtitle {
      font-size: 10px;
    }
  }
  
  .category-carousel.dragging {
    user-select: none;
    pointer-events: none;
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const carouselContainer = document.querySelector('.category-carousel-container');
  if (!carouselContainer) return;

  const carousel = carouselContainer.querySelector('.category-carousel');
  const items = Array.from(carousel.querySelectorAll('.category-item'));
  const prevButton = carouselContainer.querySelector('.carousel-prev');
  const nextButton = carouselContainer.querySelector('.carousel-next');
  const indicatorLine = carouselContainer.querySelector('.indicator-line');

  if (!carousel || items.length === 0 || !indicatorLine) {
    if (prevButton) prevButton.style.display = 'none';
    if (nextButton) nextButton.style.display = 'none';
    if (indicatorLine) indicatorLine.parentElement.style.display = 'none';
    return;
  }

  let currentIndex = 0;
  let itemWidth = 0;
  let gap = 0;
  let totalItemWidth = 0; 
  let visibleWidth = 0;
  let scrollWidth = 0;
  let maxScroll = 0;

  let currentScrollLeft = 0;
  let animationFrameId = null;

  let touchStartX = 0;
  let touchScrollStart = 0;
  let isTouching = false;
  let lastTouchDeltaX = 0;

  let isDragging = false;
  let dragStartX = 0;
  let dragScrollStart = 0;
  let lastMouseDeltaX = 0;

  function calculateDimensions() {
    if (items.length === 0) return;
    visibleWidth = carousel.clientWidth;
    itemWidth = items[0].offsetWidth;
    const style = window.getComputedStyle(carousel);
    gap = parseFloat(style.gap) || (items.length > 1 ? (items[1].offsetLeft - items[0].offsetLeft - itemWidth) : 0);
    totalItemWidth = itemWidth + gap;
    
    scrollWidth = items.reduce((acc, item, index) => {
        let currentItemWidth = item.offsetWidth;
        return acc + currentItemWidth + (index < items.length - 1 ? gap : 0);
    }, 0);
    maxScroll = Math.max(0, scrollWidth - visibleWidth);
    
    if (carousel.scrollLeft > maxScroll) {
      carousel.scrollLeft = maxScroll;
    }
    currentScrollLeft = carousel.scrollLeft;
  }

  function updateButtonStates() {
    const epsilon = 1; 
    if (prevButton) prevButton.disabled = currentScrollLeft <= epsilon;
    if (nextButton) nextButton.disabled = currentScrollLeft >= maxScroll - epsilon;
  }

  function updateIndicator() {
    calculateDimensions(); 
    let scrollPercent;
    const epsilon = 1; 

    if (scrollWidth <= visibleWidth) {
        scrollPercent = 1;
    } else if (currentScrollLeft <= epsilon) { 
        scrollPercent = 0;
    } else if (currentScrollLeft >= maxScroll - epsilon) { 
        scrollPercent = 1;
    } else if (maxScroll > 0) { 
        scrollPercent = currentScrollLeft / maxScroll;
    } else { 
        scrollPercent = 0;
    }
    
    scrollPercent = Math.max(0, Math.min(1, scrollPercent));
    indicatorLine.style.width = scrollPercent * 100 + '%';
    updateButtonStates();
  }

  function smoothScrollTo(targetScroll, duration) {
    duration = duration || 400;
    cancelAnimationFrame(animationFrameId);
    const startScroll = currentScrollLeft;
    const distance = targetScroll - startScroll;
    let startTime = null;

    function animationStep(timestamp) {
      if (!startTime) startTime = timestamp;
      const progress = Math.min((timestamp - startTime) / duration, 1);
      const easedProgress = 1 - Math.pow(1 - progress, 4); 
      
      currentScrollLeft = startScroll + distance * easedProgress;
      carousel.scrollLeft = currentScrollLeft;
      updateIndicator();

      if (progress < 1) {
        animationFrameId = requestAnimationFrame(animationStep);
      } else {
        currentScrollLeft = targetScroll; 
        carousel.scrollLeft = currentScrollLeft;
        updateIndicator();
      }
    }
    animationFrameId = requestAnimationFrame(animationStep);
  }
  
  function onTouchStart(e) {
    if (!e.touches || e.touches.length !== 1) return;
    isTouching = true;
    touchStartX = e.touches[0].clientX;
    touchScrollStart = currentScrollLeft;
    cancelAnimationFrame(animationFrameId);
  }

  function onTouchMove(e) {
    if (!isTouching || !e.touches || e.touches.length !== 1) return;
    const currentX = e.touches[0].clientX;
    const deltaX = currentX - touchStartX;
    lastTouchDeltaX = deltaX;
    currentScrollLeft = Math.max(0, Math.min(maxScroll, touchScrollStart - deltaX));
    carousel.scrollLeft = currentScrollLeft;
    updateIndicator();
    e.preventDefault();
  }

  function onTouchEnd(e) {
    if (!isTouching) return;
    isTouching = false;
    if (totalItemWidth === 0) calculateDimensions();
    if (totalItemWidth === 0) return;
    let targetIndex = 0;
    if (lastTouchDeltaX < -10) {
      targetIndex = Math.ceil(currentScrollLeft / totalItemWidth);
    } else if (lastTouchDeltaX > 10) {
      targetIndex = Math.floor(currentScrollLeft / totalItemWidth);
    } else {
      targetIndex = Math.round(currentScrollLeft / totalItemWidth);
    }
    targetIndex = Math.max(0, Math.min(items.length - 1, targetIndex));
    let targetScroll = targetIndex * totalItemWidth;
    targetScroll = Math.max(0, Math.min(targetScroll, maxScroll));
    currentIndex = targetIndex;
    smoothScrollTo(targetScroll);
  }

  function onMouseDown(e) {
    isDragging = true;
    carousel.classList.add('dragging');
    dragStartX = e.clientX;
    dragScrollStart = currentScrollLeft;
    cancelAnimationFrame(animationFrameId);
  }

  function onMouseMove(e) {
    if (!isDragging) return;
    const deltaX = e.clientX - dragStartX;
    lastMouseDeltaX = deltaX;
    currentScrollLeft = Math.max(0, Math.min(maxScroll, dragScrollStart - deltaX));
    carousel.scrollLeft = currentScrollLeft;
    updateIndicator();
    e.preventDefault();
  }

  function onMouseUp(e) {
    if (!isDragging) return;
    isDragging = false;
    carousel.classList.remove('dragging');
    if (totalItemWidth === 0) calculateDimensions();
    if (totalItemWidth === 0) return;
    let targetIndex = 0;
    if (lastMouseDeltaX < -10) {
      targetIndex = Math.ceil(currentScrollLeft / totalItemWidth);
    } else if (lastMouseDeltaX > 10) {
      targetIndex = Math.floor(currentScrollLeft / totalItemWidth);
    } else {
      targetIndex = Math.round(currentScrollLeft / totalItemWidth);
    }
    targetIndex = Math.max(0, Math.min(items.length - 1, targetIndex));
    let targetScroll = targetIndex * totalItemWidth;
    targetScroll = Math.max(0, Math.min(targetScroll, maxScroll));
    currentIndex = targetIndex;
    smoothScrollTo(targetScroll);
  }

  if (prevButton) {
    prevButton.addEventListener('click', function() {
      if (totalItemWidth === 0) calculateDimensions();
      if (totalItemWidth === 0) return;
      // Move by 3 items (one screen)
      let targetScroll = currentScrollLeft - (totalItemWidth * 3); 
      targetScroll = Math.max(0, targetScroll);
      smoothScrollTo(targetScroll);
    });
  }

  if (nextButton) {
    nextButton.addEventListener('click', function() {
      if (totalItemWidth === 0) calculateDimensions();
      if (totalItemWidth === 0) return;
      // Move by 3 items (one screen)
      let targetScroll = currentScrollLeft + (totalItemWidth * 3);
      targetScroll = Math.min(maxScroll, targetScroll);
      smoothScrollTo(targetScroll);
    });
  }

  carousel.addEventListener('touchstart', onTouchStart, { passive: false });
  carousel.addEventListener('touchmove', onTouchMove, { passive: false });
  carousel.addEventListener('touchend', onTouchEnd);
  carousel.addEventListener('touchcancel', onTouchEnd);

  carousel.addEventListener('mousedown', onMouseDown);
  window.addEventListener('mousemove', onMouseMove);
  window.addEventListener('mouseup', onMouseUp);

  items.forEach(function(item) {
    const link = item.querySelector('.category-link');
    if (link) {
      link.addEventListener('click', function(e) {
        // Click handler if needed
      });
    }
  });

  const resizeObserver = new ResizeObserver(function() {
    calculateDimensions();
    updateIndicator();
    let targetScroll = currentIndex * totalItemWidth;
    targetScroll = Math.max(0, Math.min(targetScroll, maxScroll));
    currentScrollLeft = targetScroll; 
    carousel.scrollLeft = currentScrollLeft; 
    updateIndicator();
  });
  resizeObserver.observe(carousel);

  calculateDimensions();
  updateIndicator();
  
  if (maxScroll <= 0) {
    if (prevButton) prevButton.style.display = 'none';
    if (nextButton) nextButton.style.display = 'none';
    if (indicatorLine) indicatorLine.parentElement.style.display = 'none';
  }
});
</script> 